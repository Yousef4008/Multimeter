/*
 * capacitance_meter.c
 *
 *  Created on: Jul 3, 2024
 *      Author: Youssif Hossam
 */

#include "capacitance_meter.h"
#include <util/delay.h>

float CAPACITANCE_METER_getReading(CAPACITANCE_unitType * capUnit ){
	float capacitance;
	uint16 adcValue;
	uint32	time;
	 uint8 cap_scale = 0;
	Timer1_ConfigType Timer1_Config = {0, 0, CLK_256_PRESCALER, NORMAL_MODE };

	if(!cap_scale)
	{
		GPIO_setupPinDirection(CAPACITANCE_METER_CHARGING_RES_1_PORT_ID, CAPACITANCE_METER_CHARGING_RES_1_PIN_ID, PIN_OUTPUT);
		GPIO_setupPinDirection(CAPACITANCE_METER_DISCHARGING_RES_PORT_ID, CAPACITANCE_METER_DISCHARGING_RES_PIN_ID, PIN_INPUT);
		GPIO_setupPinDirection(CAPACITANCE_METER_CHARGING_RES_2_PORT_ID, CAPACITANCE_METER_CHARGING_RES_2_PIN_ID, PIN_INPUT);
		GPIO_setupPinDirection(CAPACITANCE_METER_POSITIVE_CAP_PORT_ID, CAPACITANCE_METER_POSITIVE_CAP_PIN_ID, PIN_INPUT);
		GPIO_setupPinDirection(CAPACITANCE_METER_NEGATIVE_CAP_PORT_ID, CAPACITANCE_METER_NEGATIVE_CAP_PIN_ID, PIN_OUTPUT);

		GPIO_writePin(PORTA_ID, PIN2_ID,LOGIC_LOW);
		GPIO_writePin(PORTB_ID, PIN4_ID,LOGIC_LOW);
		_delay_ms(50);
		GPIO_writePin(PORTA_ID, PIN2_ID,LOGIC_LOW);
		GPIO_writePin(PORTB_ID, PIN4_ID,LOGIC_HIGH);

		Timer1_Config.prescaler = NO_PRESCALER;
		Timer1_init(&Timer1_Config);
		while(ADC_readChannel(CAPACITANCE_METER_POSITIVE_CAP_PIN_ID) < 648);
		capacitance = (float)Timer1_getCount() / 160000;
		Timer1_deInit();
		if(capacitance > 1.0F){
			*capUnit = MICRO_FARAD;
			return capacitance;
		}
		else if(capacitance > 0.1F){
			*capUnit = NANO_FARAD;
			return capacitance*1000;

		}
		else
		{
			cap_scale = 1;
		}
		GPIO_writePin(CAPACITANCE_METER_CHARGING_RES_1_PORT_ID, CAPACITANCE_METER_CHARGING_RES_1_PIN_ID,LOGIC_LOW);
		GPIO_setupPinDirection(CAPACITANCE_METER_DISCHARGING_RES_PORT_ID, CAPACITANCE_METER_DISCHARGING_RES_PIN_ID, PIN_OUTPUT);
		GPIO_writePin(CAPACITANCE_METER_DISCHARGING_RES_PORT_ID, CAPACITANCE_METER_DISCHARGING_RES_PIN_ID,LOGIC_LOW);
		while(ADC_readChannel(CAPACITANCE_METER_POSITIVE_CAP_PIN_ID) > 0);
		GPIO_setupPinDirection(CAPACITANCE_METER_DISCHARGING_RES_PORT_ID, CAPACITANCE_METER_DISCHARGING_RES_PIN_ID, PIN_INPUT);
	}

	else
	{
		GPIO_setupPinDirection(CAPACITANCE_METER_CHARGING_RES_1_PORT_ID, CAPACITANCE_METER_CHARGING_RES_1_PIN_ID, PIN_INPUT);
		GPIO_setupPinDirection(CAPACITANCE_METER_DISCHARGING_RES_PORT_ID, CAPACITANCE_METER_DISCHARGING_RES_PIN_ID, PIN_INPUT);
		GPIO_setupPinDirection(CAPACITANCE_METER_CHARGING_RES_2_PORT_ID, CAPACITANCE_METER_CHARGING_RES_2_PIN_ID, PIN_INPUT);
		GPIO_setupPinDirection(CAPACITANCE_METER_POSITIVE_CAP_PORT_ID, CAPACITANCE_METER_POSITIVE_CAP_PIN_ID, PIN_INPUT);
		GPIO_setupPinDirection(CAPACITANCE_METER_NEGATIVE_CAP_PORT_ID, CAPACITANCE_METER_NEGATIVE_CAP_PIN_ID, PIN_OUTPUT);

		GPIO_writePin(CAPACITANCE_METER_NEGATIVE_CAP_PORT_ID, CAPACITANCE_METER_NEGATIVE_CAP_PIN_ID, LOGIC_HIGH);
		adcValue = ADC_readChannel(CAPACITANCE_METER_POSITIVE_CAP_PIN_ID);
		GPIO_writePin(CAPACITANCE_METER_POSITIVE_CAP_PORT_ID, CAPACITANCE_METER_POSITIVE_CAP_PIN_ID, LOGIC_LOW);
		if(adcValue < 1018)
		{
			GPIO_setupPinDirection(CAPACITANCE_METER_POSITIVE_CAP_PORT_ID, CAPACITANCE_METER_POSITIVE_CAP_PIN_ID, PIN_OUTPUT);
			GPIO_writePin(CAPACITANCE_METER_POSITIVE_CAP_PORT_ID, CAPACITANCE_METER_POSITIVE_CAP_PIN_ID, LOGIC_HIGH);
			capacitance = (float)adcValue * 6 / (float)(CAPACITANCE_METER_ADC_MAX_VALUE - adcValue);
			GPIO_writePin(CAPACITANCE_METER_POSITIVE_CAP_PORT_ID, CAPACITANCE_METER_POSITIVE_CAP_PIN_ID, LOGIC_LOW);
			GPIO_writePin(CAPACITANCE_METER_NEGATIVE_CAP_PORT_ID, CAPACITANCE_METER_NEGATIVE_CAP_PIN_ID, LOGIC_LOW);
			_delay_ms(50);
			*capUnit = PICO_FARAD;
			return capacitance;
		}
		else
		{
			GPIO_setupPinDirection(CAPACITANCE_METER_CHARGING_RES_1_PORT_ID, CAPACITANCE_METER_CHARGING_RES_1_PIN_ID, PIN_INPUT);
			GPIO_setupPinDirection(CAPACITANCE_METER_DISCHARGING_RES_PORT_ID, CAPACITANCE_METER_DISCHARGING_RES_PIN_ID, PIN_INPUT);
			GPIO_setupPinDirection(CAPACITANCE_METER_CHARGING_RES_2_PORT_ID, CAPACITANCE_METER_CHARGING_RES_2_PIN_ID, PIN_OUTPUT);
			GPIO_setupPinDirection(CAPACITANCE_METER_POSITIVE_CAP_PORT_ID, CAPACITANCE_METER_POSITIVE_CAP_PIN_ID, PIN_INPUT);
			GPIO_setupPinDirection(CAPACITANCE_METER_NEGATIVE_CAP_PORT_ID, CAPACITANCE_METER_NEGATIVE_CAP_PIN_ID, PIN_OUTPUT);

			GPIO_writePin(CAPACITANCE_METER_NEGATIVE_CAP_PORT_ID, CAPACITANCE_METER_NEGATIVE_CAP_PIN_ID,LOGIC_LOW);
			GPIO_writePin(CAPACITANCE_METER_CHARGING_RES_2_PORT_ID, CAPACITANCE_METER_CHARGING_RES_2_PIN_ID,LOGIC_HIGH);

			Timer1_Config.prescaler = NO_PRESCALER;
			Timer1_init(&Timer1_Config);
			while(ADC_readChannel(CAPACITANCE_METER_POSITIVE_CAP_PIN_ID) < 648);
			time = Timer1_getCount() / 16;
			capacitance = (float)time / 1000;
			Timer1_deInit();
			GPIO_writePin(PORTB_ID, PIN6_ID,LOGIC_LOW);
			_delay_ms(time*5/100000);
			if (capacitance > 1000.0)
			{
				cap_scale = 0;          //We change the scale to 1uF - max
			}
			else
			{
				*capUnit = NANO_FARAD;
				return capacitance;
			}
		}

	}

	return capacitance;
}
