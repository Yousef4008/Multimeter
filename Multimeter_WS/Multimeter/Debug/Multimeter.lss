
Multimeter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000550c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d2  00800060  0000550c  000055a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004f  00800132  00800132  00005672  2**0
                  ALLOC
  3 .stab         000060f0  00000000  00000000  00005674  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002f89  00000000  00000000  0000b764  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__ctors_end>
       4:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       8:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      10:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      14:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      18:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      1c:	0c 94 a4 02 	jmp	0x548	; 0x548 <__vector_7>
      20:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      24:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <__vector_9>
      28:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      2c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      30:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      34:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      38:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      3c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      40:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      44:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      48:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      4c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      50:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      54:	00 40       	sbci	r16, 0x00	; 0
      56:	7a 10       	cpse	r7, r10
      58:	f3 5a       	subi	r31, 0xA3	; 163
      5a:	00 a0       	ldd	r0, Z+32	; 0x20
      5c:	72 4e       	sbci	r23, 0xE2	; 226
      5e:	18 09       	sbc	r17, r8
      60:	00 10       	cpse	r0, r0
      62:	a5 d4       	rcall	.+2378   	; 0x9ae <GPIO_setupPinDirection+0x13e>
      64:	e8 00       	.word	0x00e8	; ????
      66:	00 e8       	ldi	r16, 0x80	; 128
      68:	76 48       	sbci	r23, 0x86	; 134
      6a:	17 00       	.word	0x0017	; ????
      6c:	00 e4       	ldi	r16, 0x40	; 64
      6e:	0b 54       	subi	r16, 0x4B	; 75
      70:	02 00       	.word	0x0002	; ????
      72:	00 ca       	rjmp	.-3072   	; 0xfffff474 <__eeprom_end+0xff7ef474>
      74:	9a 3b       	cpi	r25, 0xBA	; 186
      76:	00 00       	nop
      78:	00 e1       	ldi	r16, 0x10	; 16
      7a:	f5 05       	cpc	r31, r5
      7c:	00 00       	nop
      7e:	80 96       	adiw	r24, 0x20	; 32
      80:	98 00       	.word	0x0098	; ????
      82:	00 00       	nop
      84:	40 42       	sbci	r20, 0x20	; 32
      86:	0f 00       	.word	0x000f	; ????
      88:	00 00       	nop
      8a:	a0 86       	std	Z+8, r10	; 0x08
      8c:	01 00       	.word	0x0001	; ????
      8e:	00 00       	nop
      90:	10 27       	eor	r17, r16
      92:	00 00       	nop
      94:	00 00       	nop
      96:	e8 03       	fmulsu	r22, r16
      98:	00 00       	nop
      9a:	00 00       	nop
      9c:	64 00       	.word	0x0064	; ????
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	0a 00       	.word	0x000a	; ????
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	01 00       	.word	0x0001	; ????
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	2c 76       	andi	r18, 0x6C	; 108
      b0:	d8 88       	ldd	r13, Y+16	; 0x10
      b2:	dc 67       	ori	r29, 0x7C	; 124
      b4:	4f 08       	sbc	r4, r15
      b6:	23 df       	rcall	.-442    	; 0xfffffefe <__eeprom_end+0xff7efefe>
      b8:	c1 df       	rcall	.-126    	; 0x3c <__CCP__+0x8>
      ba:	ae 59       	subi	r26, 0x9E	; 158
      bc:	e1 b1       	in	r30, 0x01	; 1
      be:	b7 96       	adiw	r30, 0x27	; 39
      c0:	e5 e3       	ldi	r30, 0x35	; 53
      c2:	e4 53       	subi	r30, 0x34	; 52
      c4:	c6 3a       	cpi	r28, 0xA6	; 166
      c6:	e6 51       	subi	r30, 0x16	; 22
      c8:	99 76       	andi	r25, 0x69	; 105
      ca:	96 e8       	ldi	r25, 0x86	; 134
      cc:	e6 c2       	rjmp	.+1484   	; 0x69a <Timer1_setCallBack+0x1c>
      ce:	84 26       	eor	r8, r20
      d0:	eb 89       	ldd	r30, Y+19	; 0x13
      d2:	8c 9b       	sbis	0x11, 4	; 17
      d4:	62 ed       	ldi	r22, 0xD2	; 210
      d6:	40 7c       	andi	r20, 0xC0	; 192
      d8:	6f fc       	.word	0xfc6f	; ????
      da:	ef bc       	out	0x2f, r14	; 47
      dc:	9c 9f       	mul	r25, r28
      de:	40 f2       	brcs	.-112    	; 0x70 <__SREG__+0x31>
      e0:	ba a5       	ldd	r27, Y+42	; 0x2a
      e2:	6f a5       	ldd	r22, Y+47	; 0x2f
      e4:	f4 90       	lpm	r15, Z+
      e6:	05 5a       	subi	r16, 0xA5	; 165
      e8:	2a f7       	brpl	.-54     	; 0xb4 <__SREG__+0x75>
      ea:	5c 93       	st	X, r21
      ec:	6b 6c       	ori	r22, 0xCB	; 203
      ee:	f9 67       	ori	r31, 0x79	; 121
      f0:	6d c1       	rjmp	.+730    	; 0x3cc <Wire_requestFromWithStop+0x6a>
      f2:	1b fc       	.word	0xfc1b	; ????
      f4:	e0 e4       	ldi	r30, 0x40	; 64
      f6:	0d 47       	sbci	r16, 0x7D	; 125
      f8:	fe f5       	brtc	.+126    	; 0x178 <.do_clear_bss_loop>
      fa:	20 e6       	ldi	r18, 0x60	; 96
      fc:	b5 00       	.word	0x00b5	; ????
      fe:	d0 ed       	ldi	r29, 0xD0	; 208
     100:	90 2e       	mov	r9, r16
     102:	03 00       	.word	0x0003	; ????
     104:	94 35       	cpi	r25, 0x54	; 84
     106:	77 05       	cpc	r23, r7
     108:	00 80       	ld	r0, Z
     10a:	84 1e       	adc	r8, r20
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 20       	and	r0, r0
     110:	4e 0a       	sbc	r4, r30
     112:	00 00       	nop
     114:	00 c8       	rjmp	.-4096   	; 0xfffff116 <__eeprom_end+0xff7ef116>
     116:	0c 33       	cpi	r16, 0x3C	; 60
     118:	33 33       	cpi	r19, 0x33	; 51
     11a:	33 0f       	add	r19, r19
     11c:	98 6e       	ori	r25, 0xE8	; 232
     11e:	12 83       	std	Z+2, r17	; 0x02
     120:	11 41       	sbci	r17, 0x11	; 17
     122:	ef 8d       	ldd	r30, Y+31	; 0x1f
     124:	21 14       	cp	r2, r1
     126:	89 3b       	cpi	r24, 0xB9	; 185
     128:	e6 55       	subi	r30, 0x56	; 86
     12a:	16 cf       	rjmp	.-468    	; 0xffffff58 <__eeprom_end+0xff7eff58>
     12c:	fe e6       	ldi	r31, 0x6E	; 110
     12e:	db 18       	sub	r13, r11
     130:	d1 84       	ldd	r13, Z+9	; 0x09
     132:	4b 38       	cpi	r20, 0x8B	; 139
     134:	1b f7       	brvc	.-58     	; 0xfc <__SREG__+0xbd>
     136:	7c 1d       	adc	r23, r12
     138:	90 1d       	adc	r25, r0
     13a:	a4 bb       	out	0x14, r26	; 20
     13c:	e4 24       	eor	r14, r4
     13e:	20 32       	cpi	r18, 0x20	; 32
     140:	84 72       	andi	r24, 0x24	; 36
     142:	5e 22       	and	r5, r30
     144:	81 00       	.word	0x0081	; ????
     146:	c9 f1       	breq	.+114    	; 0x1ba <Wire_init+0x2e>
     148:	24 ec       	ldi	r18, 0xC4	; 196
     14a:	a1 e5       	ldi	r26, 0x51	; 81
     14c:	3d 27       	eor	r19, r29

0000014e <__ctors_end>:
     14e:	11 24       	eor	r1, r1
     150:	1f be       	out	0x3f, r1	; 63
     152:	cf e5       	ldi	r28, 0x5F	; 95
     154:	d8 e0       	ldi	r29, 0x08	; 8
     156:	de bf       	out	0x3e, r29	; 62
     158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
     15a:	11 e0       	ldi	r17, 0x01	; 1
     15c:	a0 e6       	ldi	r26, 0x60	; 96
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	ec e0       	ldi	r30, 0x0C	; 12
     162:	f5 e5       	ldi	r31, 0x55	; 85
     164:	02 c0       	rjmp	.+4      	; 0x16a <.do_copy_data_start>

00000166 <.do_copy_data_loop>:
     166:	05 90       	lpm	r0, Z+
     168:	0d 92       	st	X+, r0

0000016a <.do_copy_data_start>:
     16a:	a2 33       	cpi	r26, 0x32	; 50
     16c:	b1 07       	cpc	r27, r17
     16e:	d9 f7       	brne	.-10     	; 0x166 <.do_copy_data_loop>

00000170 <__do_clear_bss>:
     170:	11 e0       	ldi	r17, 0x01	; 1
     172:	a2 e3       	ldi	r26, 0x32	; 50
     174:	b1 e0       	ldi	r27, 0x01	; 1
     176:	01 c0       	rjmp	.+2      	; 0x17a <.do_clear_bss_start>

00000178 <.do_clear_bss_loop>:
     178:	1d 92       	st	X+, r1

0000017a <.do_clear_bss_start>:
     17a:	a1 38       	cpi	r26, 0x81	; 129
     17c:	b1 07       	cpc	r27, r17
     17e:	e1 f7       	brne	.-8      	; 0x178 <.do_clear_bss_loop>
     180:	0e 94 2b 21 	call	0x4256	; 0x4256 <main>
     184:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <_exit>

00000188 <__bad_interrupt>:
     188:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000018c <Wire_init>:

static uint8_t txAddress = 0;
static uint8_t txBuffer[BUFFER_LENGTH];
static uint8_t txBufferIndex = 0;

void Wire_init(uint32_t scl_clock) {
     18c:	0f 93       	push	r16
     18e:	1f 93       	push	r17
     190:	df 93       	push	r29
     192:	cf 93       	push	r28
     194:	00 d0       	rcall	.+0      	; 0x196 <Wire_init+0xa>
     196:	00 d0       	rcall	.+0      	; 0x198 <Wire_init+0xc>
     198:	cd b7       	in	r28, 0x3d	; 61
     19a:	de b7       	in	r29, 0x3e	; 62
     19c:	69 83       	std	Y+1, r22	; 0x01
     19e:	7a 83       	std	Y+2, r23	; 0x02
     1a0:	8b 83       	std	Y+3, r24	; 0x03
     1a2:	9c 83       	std	Y+4, r25	; 0x04
    TWSR = 0x00;
     1a4:	e1 e2       	ldi	r30, 0x21	; 33
     1a6:	f0 e0       	ldi	r31, 0x00	; 0
     1a8:	10 82       	st	Z, r1
    TWBR = ((F_CPU / scl_clock) - 16) / 2;
     1aa:	00 e2       	ldi	r16, 0x20	; 32
     1ac:	10 e0       	ldi	r17, 0x00	; 0
     1ae:	80 e0       	ldi	r24, 0x00	; 0
     1b0:	94 e2       	ldi	r25, 0x24	; 36
     1b2:	a4 ef       	ldi	r26, 0xF4	; 244
     1b4:	b0 e0       	ldi	r27, 0x00	; 0
     1b6:	29 81       	ldd	r18, Y+1	; 0x01
     1b8:	3a 81       	ldd	r19, Y+2	; 0x02
     1ba:	4b 81       	ldd	r20, Y+3	; 0x03
     1bc:	5c 81       	ldd	r21, Y+4	; 0x04
     1be:	bc 01       	movw	r22, r24
     1c0:	cd 01       	movw	r24, r26
     1c2:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <__udivmodsi4>
     1c6:	da 01       	movw	r26, r20
     1c8:	c9 01       	movw	r24, r18
     1ca:	40 97       	sbiw	r24, 0x10	; 16
     1cc:	a1 09       	sbc	r26, r1
     1ce:	b1 09       	sbc	r27, r1
     1d0:	b6 95       	lsr	r27
     1d2:	a7 95       	ror	r26
     1d4:	97 95       	ror	r25
     1d6:	87 95       	ror	r24
     1d8:	f8 01       	movw	r30, r16
     1da:	80 83       	st	Z, r24
    TWCR = (1 << TWEN);
     1dc:	e6 e5       	ldi	r30, 0x56	; 86
     1de:	f0 e0       	ldi	r31, 0x00	; 0
     1e0:	84 e0       	ldi	r24, 0x04	; 4
     1e2:	80 83       	st	Z, r24
}
     1e4:	0f 90       	pop	r0
     1e6:	0f 90       	pop	r0
     1e8:	0f 90       	pop	r0
     1ea:	0f 90       	pop	r0
     1ec:	cf 91       	pop	r28
     1ee:	df 91       	pop	r29
     1f0:	1f 91       	pop	r17
     1f2:	0f 91       	pop	r16
     1f4:	08 95       	ret

000001f6 <Wire_begin>:

void Wire_begin() {
     1f6:	df 93       	push	r29
     1f8:	cf 93       	push	r28
     1fa:	cd b7       	in	r28, 0x3d	; 61
     1fc:	de b7       	in	r29, 0x3e	; 62
    Wire_init(100000L); // Default 100kHz SCL clock
     1fe:	60 ea       	ldi	r22, 0xA0	; 160
     200:	76 e8       	ldi	r23, 0x86	; 134
     202:	81 e0       	ldi	r24, 0x01	; 1
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	0e 94 c6 00 	call	0x18c	; 0x18c <Wire_init>
}
     20a:	cf 91       	pop	r28
     20c:	df 91       	pop	r29
     20e:	08 95       	ret

00000210 <Wire_beginWithAddress>:

void Wire_beginWithAddress(uint8_t address) {
     210:	df 93       	push	r29
     212:	cf 93       	push	r28
     214:	0f 92       	push	r0
     216:	cd b7       	in	r28, 0x3d	; 61
     218:	de b7       	in	r29, 0x3e	; 62
     21a:	89 83       	std	Y+1, r24	; 0x01
    TWAR = (address << 1);
     21c:	e2 e2       	ldi	r30, 0x22	; 34
     21e:	f0 e0       	ldi	r31, 0x00	; 0
     220:	89 81       	ldd	r24, Y+1	; 0x01
     222:	88 0f       	add	r24, r24
     224:	80 83       	st	Z, r24
    Wire_begin();
     226:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <Wire_begin>
}
     22a:	0f 90       	pop	r0
     22c:	cf 91       	pop	r28
     22e:	df 91       	pop	r29
     230:	08 95       	ret

00000232 <Wire_beginTransmission>:

void Wire_beginTransmission(uint8_t address) {
     232:	df 93       	push	r29
     234:	cf 93       	push	r28
     236:	0f 92       	push	r0
     238:	cd b7       	in	r28, 0x3d	; 61
     23a:	de b7       	in	r29, 0x3e	; 62
     23c:	89 83       	std	Y+1, r24	; 0x01
    txAddress = address;
     23e:	89 81       	ldd	r24, Y+1	; 0x01
     240:	80 93 34 01 	sts	0x0134, r24
    txBufferIndex = 0;
     244:	10 92 35 01 	sts	0x0135, r1
}
     248:	0f 90       	pop	r0
     24a:	cf 91       	pop	r28
     24c:	df 91       	pop	r29
     24e:	08 95       	ret

00000250 <Wire_endTransmission>:

uint8_t Wire_endTransmission() {
     250:	df 93       	push	r29
     252:	cf 93       	push	r28
     254:	cd b7       	in	r28, 0x3d	; 61
     256:	de b7       	in	r29, 0x3e	; 62
    return Wire_endTransmissionWithStop(1);
     258:	81 e0       	ldi	r24, 0x01	; 1
     25a:	0e 94 32 01 	call	0x264	; 0x264 <Wire_endTransmissionWithStop>
}
     25e:	cf 91       	pop	r28
     260:	df 91       	pop	r29
     262:	08 95       	ret

00000264 <Wire_endTransmissionWithStop>:

uint8_t Wire_endTransmissionWithStop(uint8_t sendStop) {
     264:	df 93       	push	r29
     266:	cf 93       	push	r28
     268:	00 d0       	rcall	.+0      	; 0x26a <Wire_endTransmissionWithStop+0x6>
     26a:	0f 92       	push	r0
     26c:	cd b7       	in	r28, 0x3d	; 61
     26e:	de b7       	in	r29, 0x3e	; 62
     270:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t i;

    // Send start condition
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     272:	e6 e5       	ldi	r30, 0x56	; 86
     274:	f0 e0       	ldi	r31, 0x00	; 0
     276:	84 ea       	ldi	r24, 0xA4	; 164
     278:	80 83       	st	Z, r24
    while (!(TWCR & (1 << TWINT)));
     27a:	e6 e5       	ldi	r30, 0x56	; 86
     27c:	f0 e0       	ldi	r31, 0x00	; 0
     27e:	80 81       	ld	r24, Z
     280:	88 23       	and	r24, r24
     282:	dc f7       	brge	.-10     	; 0x27a <Wire_endTransmissionWithStop+0x16>

    // Send slave address
    TWDR = (txAddress << 1) | TW_WRITE;
     284:	e3 e2       	ldi	r30, 0x23	; 35
     286:	f0 e0       	ldi	r31, 0x00	; 0
     288:	80 91 34 01 	lds	r24, 0x0134
     28c:	88 0f       	add	r24, r24
     28e:	80 83       	st	Z, r24
    TWCR = (1 << TWINT) | (1 << TWEN);
     290:	e6 e5       	ldi	r30, 0x56	; 86
     292:	f0 e0       	ldi	r31, 0x00	; 0
     294:	84 e8       	ldi	r24, 0x84	; 132
     296:	80 83       	st	Z, r24
    while (!(TWCR & (1 << TWINT)));
     298:	e6 e5       	ldi	r30, 0x56	; 86
     29a:	f0 e0       	ldi	r31, 0x00	; 0
     29c:	80 81       	ld	r24, Z
     29e:	88 23       	and	r24, r24
     2a0:	dc f7       	brge	.-10     	; 0x298 <Wire_endTransmissionWithStop+0x34>

    // Check for ACK/NACK
    if ((TWSR & 0xF8) != TW_MT_SLA_ACK) return 1;
     2a2:	e1 e2       	ldi	r30, 0x21	; 33
     2a4:	f0 e0       	ldi	r31, 0x00	; 0
     2a6:	80 81       	ld	r24, Z
     2a8:	88 2f       	mov	r24, r24
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	88 7f       	andi	r24, 0xF8	; 248
     2ae:	90 70       	andi	r25, 0x00	; 0
     2b0:	88 31       	cpi	r24, 0x18	; 24
     2b2:	91 05       	cpc	r25, r1
     2b4:	19 f0       	breq	.+6      	; 0x2bc <Wire_endTransmissionWithStop+0x58>
     2b6:	81 e0       	ldi	r24, 0x01	; 1
     2b8:	8b 83       	std	Y+3, r24	; 0x03
     2ba:	3b c0       	rjmp	.+118    	; 0x332 <Wire_endTransmissionWithStop+0xce>

    // Write data
    for (i = 0; i < txBufferIndex; i++) {
     2bc:	19 82       	std	Y+1, r1	; 0x01
     2be:	23 c0       	rjmp	.+70     	; 0x306 <Wire_endTransmissionWithStop+0xa2>
        TWDR = txBuffer[i];
     2c0:	a3 e2       	ldi	r26, 0x23	; 35
     2c2:	b0 e0       	ldi	r27, 0x00	; 0
     2c4:	89 81       	ldd	r24, Y+1	; 0x01
     2c6:	88 2f       	mov	r24, r24
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	fc 01       	movw	r30, r24
     2cc:	ea 5a       	subi	r30, 0xAA	; 170
     2ce:	fe 4f       	sbci	r31, 0xFE	; 254
     2d0:	80 81       	ld	r24, Z
     2d2:	8c 93       	st	X, r24
        TWCR = (1 << TWINT) | (1 << TWEN);
     2d4:	e6 e5       	ldi	r30, 0x56	; 86
     2d6:	f0 e0       	ldi	r31, 0x00	; 0
     2d8:	84 e8       	ldi	r24, 0x84	; 132
     2da:	80 83       	st	Z, r24
        while (!(TWCR & (1 << TWINT)));
     2dc:	e6 e5       	ldi	r30, 0x56	; 86
     2de:	f0 e0       	ldi	r31, 0x00	; 0
     2e0:	80 81       	ld	r24, Z
     2e2:	88 23       	and	r24, r24
     2e4:	dc f7       	brge	.-10     	; 0x2dc <Wire_endTransmissionWithStop+0x78>
        if ((TWSR & 0xF8) != TW_MT_DATA_ACK) return 2;
     2e6:	e1 e2       	ldi	r30, 0x21	; 33
     2e8:	f0 e0       	ldi	r31, 0x00	; 0
     2ea:	80 81       	ld	r24, Z
     2ec:	88 2f       	mov	r24, r24
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	88 7f       	andi	r24, 0xF8	; 248
     2f2:	90 70       	andi	r25, 0x00	; 0
     2f4:	88 32       	cpi	r24, 0x28	; 40
     2f6:	91 05       	cpc	r25, r1
     2f8:	19 f0       	breq	.+6      	; 0x300 <Wire_endTransmissionWithStop+0x9c>
     2fa:	82 e0       	ldi	r24, 0x02	; 2
     2fc:	8b 83       	std	Y+3, r24	; 0x03
     2fe:	19 c0       	rjmp	.+50     	; 0x332 <Wire_endTransmissionWithStop+0xce>

    // Check for ACK/NACK
    if ((TWSR & 0xF8) != TW_MT_SLA_ACK) return 1;

    // Write data
    for (i = 0; i < txBufferIndex; i++) {
     300:	89 81       	ldd	r24, Y+1	; 0x01
     302:	8f 5f       	subi	r24, 0xFF	; 255
     304:	89 83       	std	Y+1, r24	; 0x01
     306:	90 91 35 01 	lds	r25, 0x0135
     30a:	89 81       	ldd	r24, Y+1	; 0x01
     30c:	89 17       	cp	r24, r25
     30e:	c0 f2       	brcs	.-80     	; 0x2c0 <Wire_endTransmissionWithStop+0x5c>
        while (!(TWCR & (1 << TWINT)));
        if ((TWSR & 0xF8) != TW_MT_DATA_ACK) return 2;
    }

    // Send stop condition if required
    if (sendStop) {
     310:	8a 81       	ldd	r24, Y+2	; 0x02
     312:	88 23       	and	r24, r24
     314:	69 f0       	breq	.+26     	; 0x330 <Wire_endTransmissionWithStop+0xcc>
        TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
     316:	e6 e5       	ldi	r30, 0x56	; 86
     318:	f0 e0       	ldi	r31, 0x00	; 0
     31a:	84 e9       	ldi	r24, 0x94	; 148
     31c:	80 83       	st	Z, r24
        while (TWCR & (1 << TWSTO));
     31e:	e6 e5       	ldi	r30, 0x56	; 86
     320:	f0 e0       	ldi	r31, 0x00	; 0
     322:	80 81       	ld	r24, Z
     324:	88 2f       	mov	r24, r24
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	80 71       	andi	r24, 0x10	; 16
     32a:	90 70       	andi	r25, 0x00	; 0
     32c:	00 97       	sbiw	r24, 0x00	; 0
     32e:	b9 f7       	brne	.-18     	; 0x31e <Wire_endTransmissionWithStop+0xba>
    }

    return 0;
     330:	1b 82       	std	Y+3, r1	; 0x03
     332:	8b 81       	ldd	r24, Y+3	; 0x03
}
     334:	0f 90       	pop	r0
     336:	0f 90       	pop	r0
     338:	0f 90       	pop	r0
     33a:	cf 91       	pop	r28
     33c:	df 91       	pop	r29
     33e:	08 95       	ret

00000340 <Wire_requestFrom>:

uint8_t Wire_requestFrom(uint8_t address, uint8_t quantity) {
     340:	df 93       	push	r29
     342:	cf 93       	push	r28
     344:	00 d0       	rcall	.+0      	; 0x346 <Wire_requestFrom+0x6>
     346:	cd b7       	in	r28, 0x3d	; 61
     348:	de b7       	in	r29, 0x3e	; 62
     34a:	89 83       	std	Y+1, r24	; 0x01
     34c:	6a 83       	std	Y+2, r22	; 0x02
    return Wire_requestFromWithStop(address, quantity, 1);
     34e:	89 81       	ldd	r24, Y+1	; 0x01
     350:	6a 81       	ldd	r22, Y+2	; 0x02
     352:	41 e0       	ldi	r20, 0x01	; 1
     354:	0e 94 b1 01 	call	0x362	; 0x362 <Wire_requestFromWithStop>
}
     358:	0f 90       	pop	r0
     35a:	0f 90       	pop	r0
     35c:	cf 91       	pop	r28
     35e:	df 91       	pop	r29
     360:	08 95       	ret

00000362 <Wire_requestFromWithStop>:

uint8_t Wire_requestFromWithStop(uint8_t address, uint8_t quantity, uint8_t sendStop) {
     362:	df 93       	push	r29
     364:	cf 93       	push	r28
     366:	00 d0       	rcall	.+0      	; 0x368 <Wire_requestFromWithStop+0x6>
     368:	00 d0       	rcall	.+0      	; 0x36a <Wire_requestFromWithStop+0x8>
     36a:	0f 92       	push	r0
     36c:	cd b7       	in	r28, 0x3d	; 61
     36e:	de b7       	in	r29, 0x3e	; 62
     370:	8a 83       	std	Y+2, r24	; 0x02
     372:	6b 83       	std	Y+3, r22	; 0x03
     374:	4c 83       	std	Y+4, r20	; 0x04
    uint8_t count = 0;
     376:	19 82       	std	Y+1, r1	; 0x01

    // Send start condition
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     378:	e6 e5       	ldi	r30, 0x56	; 86
     37a:	f0 e0       	ldi	r31, 0x00	; 0
     37c:	84 ea       	ldi	r24, 0xA4	; 164
     37e:	80 83       	st	Z, r24
    while (!(TWCR & (1 << TWINT)));
     380:	e6 e5       	ldi	r30, 0x56	; 86
     382:	f0 e0       	ldi	r31, 0x00	; 0
     384:	80 81       	ld	r24, Z
     386:	88 23       	and	r24, r24
     388:	dc f7       	brge	.-10     	; 0x380 <Wire_requestFromWithStop+0x1e>

    // Send slave address
    TWDR = (address << 1) | TW_READ;
     38a:	e3 e2       	ldi	r30, 0x23	; 35
     38c:	f0 e0       	ldi	r31, 0x00	; 0
     38e:	8a 81       	ldd	r24, Y+2	; 0x02
     390:	88 2f       	mov	r24, r24
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	88 0f       	add	r24, r24
     396:	99 1f       	adc	r25, r25
     398:	81 60       	ori	r24, 0x01	; 1
     39a:	80 83       	st	Z, r24
    TWCR = (1 << TWINT) | (1 << TWEN);
     39c:	e6 e5       	ldi	r30, 0x56	; 86
     39e:	f0 e0       	ldi	r31, 0x00	; 0
     3a0:	84 e8       	ldi	r24, 0x84	; 132
     3a2:	80 83       	st	Z, r24
    while (!(TWCR & (1 << TWINT)));
     3a4:	e6 e5       	ldi	r30, 0x56	; 86
     3a6:	f0 e0       	ldi	r31, 0x00	; 0
     3a8:	80 81       	ld	r24, Z
     3aa:	88 23       	and	r24, r24
     3ac:	dc f7       	brge	.-10     	; 0x3a4 <Wire_requestFromWithStop+0x42>

    // Check for ACK/NACK
    if ((TWSR & 0xF8) != TW_MR_SLA_ACK) return 0;
     3ae:	e1 e2       	ldi	r30, 0x21	; 33
     3b0:	f0 e0       	ldi	r31, 0x00	; 0
     3b2:	80 81       	ld	r24, Z
     3b4:	88 2f       	mov	r24, r24
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	88 7f       	andi	r24, 0xF8	; 248
     3ba:	90 70       	andi	r25, 0x00	; 0
     3bc:	80 34       	cpi	r24, 0x40	; 64
     3be:	91 05       	cpc	r25, r1
     3c0:	39 f1       	breq	.+78     	; 0x410 <Wire_requestFromWithStop+0xae>
     3c2:	1d 82       	std	Y+5, r1	; 0x05
     3c4:	40 c0       	rjmp	.+128    	; 0x446 <Wire_requestFromWithStop+0xe4>

    // Read data
    while (count < quantity) {
        if (count == quantity - 1)
     3c6:	89 81       	ldd	r24, Y+1	; 0x01
     3c8:	28 2f       	mov	r18, r24
     3ca:	30 e0       	ldi	r19, 0x00	; 0
     3cc:	8b 81       	ldd	r24, Y+3	; 0x03
     3ce:	88 2f       	mov	r24, r24
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	01 97       	sbiw	r24, 0x01	; 1
     3d4:	28 17       	cp	r18, r24
     3d6:	39 07       	cpc	r19, r25
     3d8:	29 f4       	brne	.+10     	; 0x3e4 <Wire_requestFromWithStop+0x82>
            TWCR = (1 << TWINT) | (1 << TWEN); // NACK on last byte
     3da:	e6 e5       	ldi	r30, 0x56	; 86
     3dc:	f0 e0       	ldi	r31, 0x00	; 0
     3de:	84 e8       	ldi	r24, 0x84	; 132
     3e0:	80 83       	st	Z, r24
     3e2:	04 c0       	rjmp	.+8      	; 0x3ec <Wire_requestFromWithStop+0x8a>
        else
            TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA); // ACK on other bytes
     3e4:	e6 e5       	ldi	r30, 0x56	; 86
     3e6:	f0 e0       	ldi	r31, 0x00	; 0
     3e8:	84 ec       	ldi	r24, 0xC4	; 196
     3ea:	80 83       	st	Z, r24

        while (!(TWCR & (1 << TWINT)));
     3ec:	e6 e5       	ldi	r30, 0x56	; 86
     3ee:	f0 e0       	ldi	r31, 0x00	; 0
     3f0:	80 81       	ld	r24, Z
     3f2:	88 23       	and	r24, r24
     3f4:	dc f7       	brge	.-10     	; 0x3ec <Wire_requestFromWithStop+0x8a>

        rxBuffer[count++] = TWDR;
     3f6:	89 81       	ldd	r24, Y+1	; 0x01
     3f8:	88 2f       	mov	r24, r24
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	e3 e2       	ldi	r30, 0x23	; 35
     3fe:	f0 e0       	ldi	r31, 0x00	; 0
     400:	20 81       	ld	r18, Z
     402:	fc 01       	movw	r30, r24
     404:	ea 5c       	subi	r30, 0xCA	; 202
     406:	fe 4f       	sbci	r31, 0xFE	; 254
     408:	20 83       	st	Z, r18
     40a:	89 81       	ldd	r24, Y+1	; 0x01
     40c:	8f 5f       	subi	r24, 0xFF	; 255
     40e:	89 83       	std	Y+1, r24	; 0x01

    // Check for ACK/NACK
    if ((TWSR & 0xF8) != TW_MR_SLA_ACK) return 0;

    // Read data
    while (count < quantity) {
     410:	99 81       	ldd	r25, Y+1	; 0x01
     412:	8b 81       	ldd	r24, Y+3	; 0x03
     414:	98 17       	cp	r25, r24
     416:	b8 f2       	brcs	.-82     	; 0x3c6 <Wire_requestFromWithStop+0x64>
        while (!(TWCR & (1 << TWINT)));

        rxBuffer[count++] = TWDR;
    }

    rxBufferIndex = 0;
     418:	10 92 32 01 	sts	0x0132, r1
    rxBufferLength = count;
     41c:	89 81       	ldd	r24, Y+1	; 0x01
     41e:	80 93 33 01 	sts	0x0133, r24

    // Send stop condition if required
    if (sendStop) {
     422:	8c 81       	ldd	r24, Y+4	; 0x04
     424:	88 23       	and	r24, r24
     426:	69 f0       	breq	.+26     	; 0x442 <Wire_requestFromWithStop+0xe0>
        TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
     428:	e6 e5       	ldi	r30, 0x56	; 86
     42a:	f0 e0       	ldi	r31, 0x00	; 0
     42c:	84 e9       	ldi	r24, 0x94	; 148
     42e:	80 83       	st	Z, r24
        while (TWCR & (1 << TWSTO));
     430:	e6 e5       	ldi	r30, 0x56	; 86
     432:	f0 e0       	ldi	r31, 0x00	; 0
     434:	80 81       	ld	r24, Z
     436:	88 2f       	mov	r24, r24
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	80 71       	andi	r24, 0x10	; 16
     43c:	90 70       	andi	r25, 0x00	; 0
     43e:	00 97       	sbiw	r24, 0x00	; 0
     440:	b9 f7       	brne	.-18     	; 0x430 <Wire_requestFromWithStop+0xce>
    }

    return count;
     442:	89 81       	ldd	r24, Y+1	; 0x01
     444:	8d 83       	std	Y+5, r24	; 0x05
     446:	8d 81       	ldd	r24, Y+5	; 0x05
}
     448:	0f 90       	pop	r0
     44a:	0f 90       	pop	r0
     44c:	0f 90       	pop	r0
     44e:	0f 90       	pop	r0
     450:	0f 90       	pop	r0
     452:	cf 91       	pop	r28
     454:	df 91       	pop	r29
     456:	08 95       	ret

00000458 <Wire_write>:

void Wire_write(uint8_t data) {
     458:	df 93       	push	r29
     45a:	cf 93       	push	r28
     45c:	0f 92       	push	r0
     45e:	cd b7       	in	r28, 0x3d	; 61
     460:	de b7       	in	r29, 0x3e	; 62
     462:	89 83       	std	Y+1, r24	; 0x01
    if (txBufferIndex >= BUFFER_LENGTH) return; // Buffer overflow
     464:	80 91 35 01 	lds	r24, 0x0135
     468:	80 32       	cpi	r24, 0x20	; 32
     46a:	68 f4       	brcc	.+26     	; 0x486 <Wire_write+0x2e>
    txBuffer[txBufferIndex++] = data;
     46c:	20 91 35 01 	lds	r18, 0x0135
     470:	82 2f       	mov	r24, r18
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	fc 01       	movw	r30, r24
     476:	ea 5a       	subi	r30, 0xAA	; 170
     478:	fe 4f       	sbci	r31, 0xFE	; 254
     47a:	89 81       	ldd	r24, Y+1	; 0x01
     47c:	80 83       	st	Z, r24
     47e:	82 2f       	mov	r24, r18
     480:	8f 5f       	subi	r24, 0xFF	; 255
     482:	80 93 35 01 	sts	0x0135, r24
}
     486:	0f 90       	pop	r0
     488:	cf 91       	pop	r28
     48a:	df 91       	pop	r29
     48c:	08 95       	ret

0000048e <Wire_read>:

uint8_t Wire_read() {
     48e:	df 93       	push	r29
     490:	cf 93       	push	r28
     492:	0f 92       	push	r0
     494:	cd b7       	in	r28, 0x3d	; 61
     496:	de b7       	in	r29, 0x3e	; 62
    if (rxBufferIndex >= rxBufferLength) return 0; // No more data
     498:	90 91 32 01 	lds	r25, 0x0132
     49c:	80 91 33 01 	lds	r24, 0x0133
     4a0:	98 17       	cp	r25, r24
     4a2:	10 f0       	brcs	.+4      	; 0x4a8 <Wire_read+0x1a>
     4a4:	19 82       	std	Y+1, r1	; 0x01
     4a6:	0d c0       	rjmp	.+26     	; 0x4c2 <Wire_read+0x34>
    return rxBuffer[rxBufferIndex++];
     4a8:	20 91 32 01 	lds	r18, 0x0132
     4ac:	82 2f       	mov	r24, r18
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	fc 01       	movw	r30, r24
     4b2:	ea 5c       	subi	r30, 0xCA	; 202
     4b4:	fe 4f       	sbci	r31, 0xFE	; 254
     4b6:	80 81       	ld	r24, Z
     4b8:	89 83       	std	Y+1, r24	; 0x01
     4ba:	82 2f       	mov	r24, r18
     4bc:	8f 5f       	subi	r24, 0xFF	; 255
     4be:	80 93 32 01 	sts	0x0132, r24
     4c2:	89 81       	ldd	r24, Y+1	; 0x01
}
     4c4:	0f 90       	pop	r0
     4c6:	cf 91       	pop	r28
     4c8:	df 91       	pop	r29
     4ca:	08 95       	ret

000004cc <Wire_available>:

int Wire_available() {
     4cc:	df 93       	push	r29
     4ce:	cf 93       	push	r28
     4d0:	cd b7       	in	r28, 0x3d	; 61
     4d2:	de b7       	in	r29, 0x3e	; 62
    return rxBufferLength - rxBufferIndex;
     4d4:	80 91 33 01 	lds	r24, 0x0133
     4d8:	28 2f       	mov	r18, r24
     4da:	30 e0       	ldi	r19, 0x00	; 0
     4dc:	80 91 32 01 	lds	r24, 0x0132
     4e0:	88 2f       	mov	r24, r24
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	a9 01       	movw	r20, r18
     4e6:	48 1b       	sub	r20, r24
     4e8:	59 0b       	sbc	r21, r25
     4ea:	ca 01       	movw	r24, r20
}
     4ec:	cf 91       	pop	r28
     4ee:	df 91       	pop	r29
     4f0:	08 95       	ret

000004f2 <__vector_9>:
/*______________________________________________________________________________
 |                           Interrupt Service Routine                          |
 |______________________________________________________________________________|
 */

ISR (TIMER1_OVF_vect){
     4f2:	1f 92       	push	r1
     4f4:	0f 92       	push	r0
     4f6:	0f b6       	in	r0, 0x3f	; 63
     4f8:	0f 92       	push	r0
     4fa:	11 24       	eor	r1, r1
     4fc:	8f 93       	push	r24
     4fe:	9f 93       	push	r25
     500:	af 93       	push	r26
     502:	bf 93       	push	r27
     504:	df 93       	push	r29
     506:	cf 93       	push	r28
     508:	cd b7       	in	r28, 0x3d	; 61
     50a:	de b7       	in	r29, 0x3e	; 62
	overflow_count++; 		// Increment overflow counter
     50c:	80 91 78 01 	lds	r24, 0x0178
     510:	90 91 79 01 	lds	r25, 0x0179
     514:	a0 91 7a 01 	lds	r26, 0x017A
     518:	b0 91 7b 01 	lds	r27, 0x017B
     51c:	01 96       	adiw	r24, 0x01	; 1
     51e:	a1 1d       	adc	r26, r1
     520:	b1 1d       	adc	r27, r1
     522:	80 93 78 01 	sts	0x0178, r24
     526:	90 93 79 01 	sts	0x0179, r25
     52a:	a0 93 7a 01 	sts	0x017A, r26
     52e:	b0 93 7b 01 	sts	0x017B, r27
	/*if(target_routine != NULL_PTR)
		(*target_routine)();*/
}
     532:	cf 91       	pop	r28
     534:	df 91       	pop	r29
     536:	bf 91       	pop	r27
     538:	af 91       	pop	r26
     53a:	9f 91       	pop	r25
     53c:	8f 91       	pop	r24
     53e:	0f 90       	pop	r0
     540:	0f be       	out	0x3f, r0	; 63
     542:	0f 90       	pop	r0
     544:	1f 90       	pop	r1
     546:	18 95       	reti

00000548 <__vector_7>:

ISR (TIMER1_COMPA_vect){
     548:	1f 92       	push	r1
     54a:	0f 92       	push	r0
     54c:	0f b6       	in	r0, 0x3f	; 63
     54e:	0f 92       	push	r0
     550:	11 24       	eor	r1, r1
     552:	2f 93       	push	r18
     554:	3f 93       	push	r19
     556:	4f 93       	push	r20
     558:	5f 93       	push	r21
     55a:	6f 93       	push	r22
     55c:	7f 93       	push	r23
     55e:	8f 93       	push	r24
     560:	9f 93       	push	r25
     562:	af 93       	push	r26
     564:	bf 93       	push	r27
     566:	ef 93       	push	r30
     568:	ff 93       	push	r31
     56a:	df 93       	push	r29
     56c:	cf 93       	push	r28
     56e:	cd b7       	in	r28, 0x3d	; 61
     570:	de b7       	in	r29, 0x3e	; 62
	if(target_routine != NULL_PTR)
     572:	80 91 76 01 	lds	r24, 0x0176
     576:	90 91 77 01 	lds	r25, 0x0177
     57a:	00 97       	sbiw	r24, 0x00	; 0
     57c:	29 f0       	breq	.+10     	; 0x588 <__vector_7+0x40>
		(*target_routine)();
     57e:	e0 91 76 01 	lds	r30, 0x0176
     582:	f0 91 77 01 	lds	r31, 0x0177
     586:	09 95       	icall
}
     588:	cf 91       	pop	r28
     58a:	df 91       	pop	r29
     58c:	ff 91       	pop	r31
     58e:	ef 91       	pop	r30
     590:	bf 91       	pop	r27
     592:	af 91       	pop	r26
     594:	9f 91       	pop	r25
     596:	8f 91       	pop	r24
     598:	7f 91       	pop	r23
     59a:	6f 91       	pop	r22
     59c:	5f 91       	pop	r21
     59e:	4f 91       	pop	r20
     5a0:	3f 91       	pop	r19
     5a2:	2f 91       	pop	r18
     5a4:	0f 90       	pop	r0
     5a6:	0f be       	out	0x3f, r0	; 63
     5a8:	0f 90       	pop	r0
     5aa:	1f 90       	pop	r1
     5ac:	18 95       	reti

000005ae <Timer1_init>:
 -> Functional responsible for Initialize Timer1 by:
    1. Setting the initial value of the counter
    2. Setup the mode (Normal / Compare)
    3. Setup the prescaler
 */
void Timer1_init(const Timer1_ConfigType * Config_Ptr){
     5ae:	df 93       	push	r29
     5b0:	cf 93       	push	r28
     5b2:	00 d0       	rcall	.+0      	; 0x5b4 <Timer1_init+0x6>
     5b4:	cd b7       	in	r28, 0x3d	; 61
     5b6:	de b7       	in	r29, 0x3e	; 62
     5b8:	9a 83       	std	Y+2, r25	; 0x02
     5ba:	89 83       	std	Y+1, r24	; 0x01

	TCNT1 = Config_Ptr->initial_value;		/* Set timer1 initial count to zero */
     5bc:	ac e4       	ldi	r26, 0x4C	; 76
     5be:	b0 e0       	ldi	r27, 0x00	; 0
     5c0:	e9 81       	ldd	r30, Y+1	; 0x01
     5c2:	fa 81       	ldd	r31, Y+2	; 0x02
     5c4:	80 81       	ld	r24, Z
     5c6:	91 81       	ldd	r25, Z+1	; 0x01
     5c8:	11 96       	adiw	r26, 0x01	; 1
     5ca:	9c 93       	st	X, r25
     5cc:	8e 93       	st	-X, r24

	overflow_count = 0; // Reset overflow counter
     5ce:	10 92 78 01 	sts	0x0178, r1
     5d2:	10 92 79 01 	sts	0x0179, r1
     5d6:	10 92 7a 01 	sts	0x017A, r1
     5da:	10 92 7b 01 	sts	0x017B, r1

	if (Config_Ptr->mode == NORMAL_MODE){
     5de:	e9 81       	ldd	r30, Y+1	; 0x01
     5e0:	fa 81       	ldd	r31, Y+2	; 0x02
     5e2:	85 81       	ldd	r24, Z+5	; 0x05
     5e4:	88 23       	and	r24, r24
     5e6:	91 f4       	brne	.+36     	; 0x60c <Timer1_init+0x5e>

		TIMSK |= (1<<TOIE1); /* Enable Timer1 Overflow Interrupt */
     5e8:	a9 e5       	ldi	r26, 0x59	; 89
     5ea:	b0 e0       	ldi	r27, 0x00	; 0
     5ec:	e9 e5       	ldi	r30, 0x59	; 89
     5ee:	f0 e0       	ldi	r31, 0x00	; 0
     5f0:	80 81       	ld	r24, Z
     5f2:	84 60       	ori	r24, 0x04	; 4
     5f4:	8c 93       	st	X, r24
		 * 1. Disconnect OC1A and OC1B  COM1A1=0 COM1A0=0 COM1B0=0 COM1B1=0
		 * 2. FOC1A=1 FOC1B=0
		 * 3. Normal Mode WGM10=0 WGM11=0 (Mode Number 1)
		 */

		TCCR1A = (1<<FOC1A);
     5f6:	ef e4       	ldi	r30, 0x4F	; 79
     5f8:	f0 e0       	ldi	r31, 0x00	; 0
     5fa:	88 e0       	ldi	r24, 0x08	; 8
     5fc:	80 83       	st	Z, r24
		/* Configure timer control register TCCR1B
		 * 1. Normal Mode WGM12=0 WGM13=0 (Mode Number 1)
		 * 2. Prescaler is configurable
		 */
		TCCR1B = Config_Ptr->prescaler;
     5fe:	ae e4       	ldi	r26, 0x4E	; 78
     600:	b0 e0       	ldi	r27, 0x00	; 0
     602:	e9 81       	ldd	r30, Y+1	; 0x01
     604:	fa 81       	ldd	r31, Y+2	; 0x02
     606:	84 81       	ldd	r24, Z+4	; 0x04
     608:	8c 93       	st	X, r24
     60a:	1e c0       	rjmp	.+60     	; 0x648 <Timer1_init+0x9a>

	}
	else {

		OCR1A = Config_Ptr->compare_value;
     60c:	aa e4       	ldi	r26, 0x4A	; 74
     60e:	b0 e0       	ldi	r27, 0x00	; 0
     610:	e9 81       	ldd	r30, Y+1	; 0x01
     612:	fa 81       	ldd	r31, Y+2	; 0x02
     614:	82 81       	ldd	r24, Z+2	; 0x02
     616:	93 81       	ldd	r25, Z+3	; 0x03
     618:	11 96       	adiw	r26, 0x01	; 1
     61a:	9c 93       	st	X, r25
     61c:	8e 93       	st	-X, r24

		TIMSK |= (1<<OCIE1A); /* Enable Timer1 Compare A Interrupt */
     61e:	a9 e5       	ldi	r26, 0x59	; 89
     620:	b0 e0       	ldi	r27, 0x00	; 0
     622:	e9 e5       	ldi	r30, 0x59	; 89
     624:	f0 e0       	ldi	r31, 0x00	; 0
     626:	80 81       	ld	r24, Z
     628:	80 61       	ori	r24, 0x10	; 16
     62a:	8c 93       	st	X, r24
		/* Configure timer control register TCCR1A
		 * 1. Disconnect OC1A and OC1B  COM1A1=0 COM1A0=0 COM1B0=0 COM1B1=0
		 * 2. FOC1A=1 FOC1B=0
		 * 3. CTC Mode WGM10=0 WGM11=0 (Mode Number 4)
		 */
		TCCR1A = (1<<FOC1A);
     62c:	ef e4       	ldi	r30, 0x4F	; 79
     62e:	f0 e0       	ldi	r31, 0x00	; 0
     630:	88 e0       	ldi	r24, 0x08	; 8
     632:	80 83       	st	Z, r24

		/* Configure timer control register TCCR1B
		 * 1. CTC Mode WGM12=1 WGM13=0 (Mode Number 4)
		 * 2. Prescaler is configurable
		 */
		TCCR1B = Config_Ptr->prescaler | Config_Ptr->mode;
     634:	ae e4       	ldi	r26, 0x4E	; 78
     636:	b0 e0       	ldi	r27, 0x00	; 0
     638:	e9 81       	ldd	r30, Y+1	; 0x01
     63a:	fa 81       	ldd	r31, Y+2	; 0x02
     63c:	94 81       	ldd	r25, Z+4	; 0x04
     63e:	e9 81       	ldd	r30, Y+1	; 0x01
     640:	fa 81       	ldd	r31, Y+2	; 0x02
     642:	85 81       	ldd	r24, Z+5	; 0x05
     644:	89 2b       	or	r24, r25
     646:	8c 93       	st	X, r24
	}
}
     648:	0f 90       	pop	r0
     64a:	0f 90       	pop	r0
     64c:	cf 91       	pop	r28
     64e:	df 91       	pop	r29
     650:	08 95       	ret

00000652 <Timer1_deInit>:

/*
 * Description :
 -> Functional responsible for uninitialize timer1
 */
void Timer1_deInit(void){
     652:	df 93       	push	r29
     654:	cf 93       	push	r28
     656:	cd b7       	in	r28, 0x3d	; 61
     658:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
     65a:	ec e4       	ldi	r30, 0x4C	; 76
     65c:	f0 e0       	ldi	r31, 0x00	; 0
     65e:	11 82       	std	Z+1, r1	; 0x01
     660:	10 82       	st	Z, r1
	TCCR1B = 0;
     662:	ee e4       	ldi	r30, 0x4E	; 78
     664:	f0 e0       	ldi	r31, 0x00	; 0
     666:	10 82       	st	Z, r1
	overflow_count = 0; // Reset overflow counter
     668:	10 92 78 01 	sts	0x0178, r1
     66c:	10 92 79 01 	sts	0x0179, r1
     670:	10 92 7a 01 	sts	0x017A, r1
     674:	10 92 7b 01 	sts	0x017B, r1
}
     678:	cf 91       	pop	r28
     67a:	df 91       	pop	r29
     67c:	08 95       	ret

0000067e <Timer1_setCallBack>:

/*
 * Description :
 -> Functional responsible for setting the call back function
 */
void Timer1_setCallBack(void(*a_ptr)(void)){
     67e:	df 93       	push	r29
     680:	cf 93       	push	r28
     682:	00 d0       	rcall	.+0      	; 0x684 <Timer1_setCallBack+0x6>
     684:	cd b7       	in	r28, 0x3d	; 61
     686:	de b7       	in	r29, 0x3e	; 62
     688:	9a 83       	std	Y+2, r25	; 0x02
     68a:	89 83       	std	Y+1, r24	; 0x01
	target_routine = a_ptr;
     68c:	89 81       	ldd	r24, Y+1	; 0x01
     68e:	9a 81       	ldd	r25, Y+2	; 0x02
     690:	90 93 77 01 	sts	0x0177, r25
     694:	80 93 76 01 	sts	0x0176, r24
}
     698:	0f 90       	pop	r0
     69a:	0f 90       	pop	r0
     69c:	cf 91       	pop	r28
     69e:	df 91       	pop	r29
     6a0:	08 95       	ret

000006a2 <Timer1_getCount>:

/*
 * Description :
 -> Functional responsible for getting the value of timer
 */
uint32 Timer1_getCount(){
     6a2:	df 93       	push	r29
     6a4:	cf 93       	push	r28
     6a6:	00 d0       	rcall	.+0      	; 0x6a8 <Timer1_getCount+0x6>
     6a8:	00 d0       	rcall	.+0      	; 0x6aa <Timer1_getCount+0x8>
     6aa:	cd b7       	in	r28, 0x3d	; 61
     6ac:	de b7       	in	r29, 0x3e	; 62
	uint32 total_count;
	cli(); // Disable interrupts to ensure atomic read of TCNT1 and overflow_count
     6ae:	f8 94       	cli
	total_count = ((uint32)overflow_count << 16) | TCNT1;
     6b0:	80 91 78 01 	lds	r24, 0x0178
     6b4:	90 91 79 01 	lds	r25, 0x0179
     6b8:	a0 91 7a 01 	lds	r26, 0x017A
     6bc:	b0 91 7b 01 	lds	r27, 0x017B
     6c0:	ac 01       	movw	r20, r24
     6c2:	33 27       	eor	r19, r19
     6c4:	22 27       	eor	r18, r18
     6c6:	ec e4       	ldi	r30, 0x4C	; 76
     6c8:	f0 e0       	ldi	r31, 0x00	; 0
     6ca:	80 81       	ld	r24, Z
     6cc:	91 81       	ldd	r25, Z+1	; 0x01
     6ce:	cc 01       	movw	r24, r24
     6d0:	a0 e0       	ldi	r26, 0x00	; 0
     6d2:	b0 e0       	ldi	r27, 0x00	; 0
     6d4:	82 2b       	or	r24, r18
     6d6:	93 2b       	or	r25, r19
     6d8:	a4 2b       	or	r26, r20
     6da:	b5 2b       	or	r27, r21
     6dc:	89 83       	std	Y+1, r24	; 0x01
     6de:	9a 83       	std	Y+2, r25	; 0x02
     6e0:	ab 83       	std	Y+3, r26	; 0x03
     6e2:	bc 83       	std	Y+4, r27	; 0x04
	sei(); // Enable interrupts
     6e4:	78 94       	sei
	return total_count;
     6e6:	89 81       	ldd	r24, Y+1	; 0x01
     6e8:	9a 81       	ldd	r25, Y+2	; 0x02
     6ea:	ab 81       	ldd	r26, Y+3	; 0x03
     6ec:	bc 81       	ldd	r27, Y+4	; 0x04
}
     6ee:	bc 01       	movw	r22, r24
     6f0:	cd 01       	movw	r24, r26
     6f2:	0f 90       	pop	r0
     6f4:	0f 90       	pop	r0
     6f6:	0f 90       	pop	r0
     6f8:	0f 90       	pop	r0
     6fa:	cf 91       	pop	r28
     6fc:	df 91       	pop	r29
     6fe:	08 95       	ret

00000700 <I2C_init>:
/*
 * Description :
 -> Initiate the I2C with its configurable baud rate and slave address
 */
void I2C_init(const I2C_ConfigType * Config_Ptr)
{
     700:	df 93       	push	r29
     702:	cf 93       	push	r28
     704:	00 d0       	rcall	.+0      	; 0x706 <I2C_init+0x6>
     706:	cd b7       	in	r28, 0x3d	; 61
     708:	de b7       	in	r29, 0x3e	; 62
     70a:	9a 83       	std	Y+2, r25	; 0x02
     70c:	89 83       	std	Y+1, r24	; 0x01
	/* Bit Rate: using zero pre-scaler TWPS=00 and F_CPU=8Mhz and configurable TWBR*/

	TWBR = Config_Ptr->bit_rate;
     70e:	a0 e2       	ldi	r26, 0x20	; 32
     710:	b0 e0       	ldi	r27, 0x00	; 0
     712:	e9 81       	ldd	r30, Y+1	; 0x01
     714:	fa 81       	ldd	r31, Y+2	; 0x02
     716:	81 81       	ldd	r24, Z+1	; 0x01
     718:	8c 93       	st	X, r24
	TWSR = 0x00;
     71a:	e1 e2       	ldi	r30, 0x21	; 33
     71c:	f0 e0       	ldi	r31, 0x00	; 0
     71e:	10 82       	st	Z, r1

	/* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */

	TWAR = ((Config_Ptr->address)<<1);
     720:	a2 e2       	ldi	r26, 0x22	; 34
     722:	b0 e0       	ldi	r27, 0x00	; 0
     724:	e9 81       	ldd	r30, Y+1	; 0x01
     726:	fa 81       	ldd	r31, Y+2	; 0x02
     728:	80 81       	ld	r24, Z
     72a:	88 0f       	add	r24, r24
     72c:	8c 93       	st	X, r24

	TWCR = (1<<TWEN); /* enable I2C */
     72e:	e6 e5       	ldi	r30, 0x56	; 86
     730:	f0 e0       	ldi	r31, 0x00	; 0
     732:	84 e0       	ldi	r24, 0x04	; 4
     734:	80 83       	st	Z, r24
}
     736:	0f 90       	pop	r0
     738:	0f 90       	pop	r0
     73a:	cf 91       	pop	r28
     73c:	df 91       	pop	r29
     73e:	08 95       	ret

00000740 <I2C_start>:
/*
 * Description :
 -> Function to send the start bit
 */
uint8 I2C_start(uint8 address)
{
     740:	df 93       	push	r29
     742:	cf 93       	push	r28
     744:	00 d0       	rcall	.+0      	; 0x746 <I2C_start+0x6>
     746:	0f 92       	push	r0
     748:	cd b7       	in	r28, 0x3d	; 61
     74a:	de b7       	in	r29, 0x3e	; 62
     74c:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t status;		/* Declare variable */
	TWCR=(1<<TWSTA)|(1<<TWEN)|(1<<TWINT); /* Enable TWI, generate START */
     74e:	e6 e5       	ldi	r30, 0x56	; 86
     750:	f0 e0       	ldi	r31, 0x00	; 0
     752:	84 ea       	ldi	r24, 0xA4	; 164
     754:	80 83       	st	Z, r24
	while(!(TWCR&(1<<TWINT)));	/* Wait until TWI finish its current job */
     756:	e6 e5       	ldi	r30, 0x56	; 86
     758:	f0 e0       	ldi	r31, 0x00	; 0
     75a:	80 81       	ld	r24, Z
     75c:	88 23       	and	r24, r24
     75e:	dc f7       	brge	.-10     	; 0x756 <I2C_start+0x16>
	status=TWSR&0xF8;		/* Read TWI status register */
     760:	e1 e2       	ldi	r30, 0x21	; 33
     762:	f0 e0       	ldi	r31, 0x00	; 0
     764:	80 81       	ld	r24, Z
     766:	88 7f       	andi	r24, 0xF8	; 248
     768:	89 83       	std	Y+1, r24	; 0x01
	if(status!=0x08)		/* Check weather START transmitted or not? */
     76a:	89 81       	ldd	r24, Y+1	; 0x01
     76c:	88 30       	cpi	r24, 0x08	; 8
     76e:	11 f0       	breq	.+4      	; 0x774 <I2C_start+0x34>
		return 0;			/* Return 0 to indicate start condition fail */
     770:	1b 82       	std	Y+3, r1	; 0x03
     772:	20 c0       	rjmp	.+64     	; 0x7b4 <I2C_start+0x74>
	TWDR=address;		/* Write SLA+W in TWI data register */
     774:	e3 e2       	ldi	r30, 0x23	; 35
     776:	f0 e0       	ldi	r31, 0x00	; 0
     778:	8a 81       	ldd	r24, Y+2	; 0x02
     77a:	80 83       	st	Z, r24
	TWCR=(1<<TWEN)|(1<<TWINT);	/* Enable TWI & clear interrupt flag */
     77c:	e6 e5       	ldi	r30, 0x56	; 86
     77e:	f0 e0       	ldi	r31, 0x00	; 0
     780:	84 e8       	ldi	r24, 0x84	; 132
     782:	80 83       	st	Z, r24
	while(!(TWCR&(1<<TWINT)));	/* Wait until TWI finish its current job */
     784:	e6 e5       	ldi	r30, 0x56	; 86
     786:	f0 e0       	ldi	r31, 0x00	; 0
     788:	80 81       	ld	r24, Z
     78a:	88 23       	and	r24, r24
     78c:	dc f7       	brge	.-10     	; 0x784 <I2C_start+0x44>
	status=TWSR&0xF8;		/* Read TWI status register */
     78e:	e1 e2       	ldi	r30, 0x21	; 33
     790:	f0 e0       	ldi	r31, 0x00	; 0
     792:	80 81       	ld	r24, Z
     794:	88 7f       	andi	r24, 0xF8	; 248
     796:	89 83       	std	Y+1, r24	; 0x01
	if(status==0x18)		/* Check for SLA+W transmitted &ack received */
     798:	89 81       	ldd	r24, Y+1	; 0x01
     79a:	88 31       	cpi	r24, 0x18	; 24
     79c:	19 f4       	brne	.+6      	; 0x7a4 <I2C_start+0x64>
		return 1;			/* Return 1 to indicate ack received */
     79e:	81 e0       	ldi	r24, 0x01	; 1
     7a0:	8b 83       	std	Y+3, r24	; 0x03
     7a2:	08 c0       	rjmp	.+16     	; 0x7b4 <I2C_start+0x74>
	if(status==0x20)		/* Check for SLA+W transmitted &nack received */
     7a4:	89 81       	ldd	r24, Y+1	; 0x01
     7a6:	80 32       	cpi	r24, 0x20	; 32
     7a8:	19 f4       	brne	.+6      	; 0x7b0 <I2C_start+0x70>
		return 2;			/* Return 2 to indicate nack received */
     7aa:	82 e0       	ldi	r24, 0x02	; 2
     7ac:	8b 83       	std	Y+3, r24	; 0x03
     7ae:	02 c0       	rjmp	.+4      	; 0x7b4 <I2C_start+0x74>
	else
		return 3;			/* Else return 3 to indicate SLA+W failed */
     7b0:	83 e0       	ldi	r24, 0x03	; 3
     7b2:	8b 83       	std	Y+3, r24	; 0x03
     7b4:	8b 81       	ldd	r24, Y+3	; 0x03
}
     7b6:	0f 90       	pop	r0
     7b8:	0f 90       	pop	r0
     7ba:	0f 90       	pop	r0
     7bc:	cf 91       	pop	r28
     7be:	df 91       	pop	r29
     7c0:	08 95       	ret

000007c2 <I2C_stop>:
/*
 * Description :
 -> Function to send the stop bit
 */
void I2C_stop(void)
{
     7c2:	df 93       	push	r29
     7c4:	cf 93       	push	r28
     7c6:	cd b7       	in	r28, 0x3d	; 61
     7c8:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
     7ca:	e6 e5       	ldi	r30, 0x56	; 86
     7cc:	f0 e0       	ldi	r31, 0x00	; 0
     7ce:	84 e9       	ldi	r24, 0x94	; 148
     7d0:	80 83       	st	Z, r24
}
     7d2:	cf 91       	pop	r28
     7d4:	df 91       	pop	r29
     7d6:	08 95       	ret

000007d8 <I2C_writeByte>:
/*
 * Description :
 -> Function to send a single byte over I2C
 */
void I2C_writeByte(uint8 data)
{
     7d8:	df 93       	push	r29
     7da:	cf 93       	push	r28
     7dc:	0f 92       	push	r0
     7de:	cd b7       	in	r28, 0x3d	; 61
     7e0:	de b7       	in	r29, 0x3e	; 62
     7e2:	89 83       	std	Y+1, r24	; 0x01
	/* Put data On TWI data Register */
	TWDR = data;
     7e4:	e3 e2       	ldi	r30, 0x23	; 35
     7e6:	f0 e0       	ldi	r31, 0x00	; 0
     7e8:	89 81       	ldd	r24, Y+1	; 0x01
     7ea:	80 83       	st	Z, r24
	/*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
	TWCR = (1 << TWINT) | (1 << TWEN);
     7ec:	e6 e5       	ldi	r30, 0x56	; 86
     7ee:	f0 e0       	ldi	r31, 0x00	; 0
     7f0:	84 e8       	ldi	r24, 0x84	; 132
     7f2:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register(data is send successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
     7f4:	e6 e5       	ldi	r30, 0x56	; 86
     7f6:	f0 e0       	ldi	r31, 0x00	; 0
     7f8:	80 81       	ld	r24, Z
     7fa:	88 23       	and	r24, r24
     7fc:	dc f7       	brge	.-10     	; 0x7f4 <I2C_writeByte+0x1c>
}
     7fe:	0f 90       	pop	r0
     800:	cf 91       	pop	r28
     802:	df 91       	pop	r29
     804:	08 95       	ret

00000806 <I2C_readByteWithACK>:
/*
 * Description :
 -> Function to read a single byte with acknowledgment
 */
uint8 I2C_readByteWithACK(void)
{
     806:	df 93       	push	r29
     808:	cf 93       	push	r28
     80a:	cd b7       	in	r28, 0x3d	; 61
     80c:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
     80e:	e6 e5       	ldi	r30, 0x56	; 86
     810:	f0 e0       	ldi	r31, 0x00	; 0
     812:	84 ec       	ldi	r24, 0xC4	; 196
     814:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
     816:	e6 e5       	ldi	r30, 0x56	; 86
     818:	f0 e0       	ldi	r31, 0x00	; 0
     81a:	80 81       	ld	r24, Z
     81c:	88 23       	and	r24, r24
     81e:	dc f7       	brge	.-10     	; 0x816 <I2C_readByteWithACK+0x10>
	/* Read Data */
	return TWDR;
     820:	e3 e2       	ldi	r30, 0x23	; 35
     822:	f0 e0       	ldi	r31, 0x00	; 0
     824:	80 81       	ld	r24, Z
}
     826:	cf 91       	pop	r28
     828:	df 91       	pop	r29
     82a:	08 95       	ret

0000082c <I2C_readByteWithNACK>:
/*
 * Description :
 -> Function to read a single byte without acknowledgment
 */
uint8 I2C_readByteWithNACK(void)
{
     82c:	df 93       	push	r29
     82e:	cf 93       	push	r28
     830:	cd b7       	in	r28, 0x3d	; 61
     832:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWEN);
     834:	e6 e5       	ldi	r30, 0x56	; 86
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	84 e8       	ldi	r24, 0x84	; 132
     83a:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
     83c:	e6 e5       	ldi	r30, 0x56	; 86
     83e:	f0 e0       	ldi	r31, 0x00	; 0
     840:	80 81       	ld	r24, Z
     842:	88 23       	and	r24, r24
     844:	dc f7       	brge	.-10     	; 0x83c <I2C_readByteWithNACK+0x10>
	/* Read Data */
	return TWDR;
     846:	e3 e2       	ldi	r30, 0x23	; 35
     848:	f0 e0       	ldi	r31, 0x00	; 0
     84a:	80 81       	ld	r24, Z
}
     84c:	cf 91       	pop	r28
     84e:	df 91       	pop	r29
     850:	08 95       	ret

00000852 <I2C_getStatus>:
/*
 * Description :
 -> Function to get the status of the communication
 */
uint8 I2C_getStatus(void)
{
     852:	df 93       	push	r29
     854:	cf 93       	push	r28
     856:	0f 92       	push	r0
     858:	cd b7       	in	r28, 0x3d	; 61
     85a:	de b7       	in	r29, 0x3e	; 62
	uint8 status;
	/* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
	status = TWSR & 0xF8;
     85c:	e1 e2       	ldi	r30, 0x21	; 33
     85e:	f0 e0       	ldi	r31, 0x00	; 0
     860:	80 81       	ld	r24, Z
     862:	88 7f       	andi	r24, 0xF8	; 248
     864:	89 83       	std	Y+1, r24	; 0x01
	return status;
     866:	89 81       	ldd	r24, Y+1	; 0x01
}
     868:	0f 90       	pop	r0
     86a:	cf 91       	pop	r28
     86c:	df 91       	pop	r29
     86e:	08 95       	ret

00000870 <GPIO_setupPinDirection>:
 * Description :
 -> Setup the direction of the required pin input/output.
 -> If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     870:	df 93       	push	r29
     872:	cf 93       	push	r28
     874:	00 d0       	rcall	.+0      	; 0x876 <GPIO_setupPinDirection+0x6>
     876:	00 d0       	rcall	.+0      	; 0x878 <GPIO_setupPinDirection+0x8>
     878:	0f 92       	push	r0
     87a:	cd b7       	in	r28, 0x3d	; 61
     87c:	de b7       	in	r29, 0x3e	; 62
     87e:	89 83       	std	Y+1, r24	; 0x01
     880:	6a 83       	std	Y+2, r22	; 0x02
     882:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 -> Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	    Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 -> In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     884:	8a 81       	ldd	r24, Y+2	; 0x02
     886:	88 30       	cpi	r24, 0x08	; 8
     888:	08 f0       	brcs	.+2      	; 0x88c <GPIO_setupPinDirection+0x1c>
     88a:	d5 c0       	rjmp	.+426    	; 0xa36 <GPIO_setupPinDirection+0x1c6>
     88c:	89 81       	ldd	r24, Y+1	; 0x01
     88e:	84 30       	cpi	r24, 0x04	; 4
     890:	08 f0       	brcs	.+2      	; 0x894 <GPIO_setupPinDirection+0x24>
     892:	d1 c0       	rjmp	.+418    	; 0xa36 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     894:	89 81       	ldd	r24, Y+1	; 0x01
     896:	28 2f       	mov	r18, r24
     898:	30 e0       	ldi	r19, 0x00	; 0
     89a:	3d 83       	std	Y+5, r19	; 0x05
     89c:	2c 83       	std	Y+4, r18	; 0x04
     89e:	8c 81       	ldd	r24, Y+4	; 0x04
     8a0:	9d 81       	ldd	r25, Y+5	; 0x05
     8a2:	81 30       	cpi	r24, 0x01	; 1
     8a4:	91 05       	cpc	r25, r1
     8a6:	09 f4       	brne	.+2      	; 0x8aa <GPIO_setupPinDirection+0x3a>
     8a8:	43 c0       	rjmp	.+134    	; 0x930 <GPIO_setupPinDirection+0xc0>
     8aa:	2c 81       	ldd	r18, Y+4	; 0x04
     8ac:	3d 81       	ldd	r19, Y+5	; 0x05
     8ae:	22 30       	cpi	r18, 0x02	; 2
     8b0:	31 05       	cpc	r19, r1
     8b2:	2c f4       	brge	.+10     	; 0x8be <GPIO_setupPinDirection+0x4e>
     8b4:	8c 81       	ldd	r24, Y+4	; 0x04
     8b6:	9d 81       	ldd	r25, Y+5	; 0x05
     8b8:	00 97       	sbiw	r24, 0x00	; 0
     8ba:	71 f0       	breq	.+28     	; 0x8d8 <GPIO_setupPinDirection+0x68>
     8bc:	bc c0       	rjmp	.+376    	; 0xa36 <GPIO_setupPinDirection+0x1c6>
     8be:	2c 81       	ldd	r18, Y+4	; 0x04
     8c0:	3d 81       	ldd	r19, Y+5	; 0x05
     8c2:	22 30       	cpi	r18, 0x02	; 2
     8c4:	31 05       	cpc	r19, r1
     8c6:	09 f4       	brne	.+2      	; 0x8ca <GPIO_setupPinDirection+0x5a>
     8c8:	5f c0       	rjmp	.+190    	; 0x988 <GPIO_setupPinDirection+0x118>
     8ca:	8c 81       	ldd	r24, Y+4	; 0x04
     8cc:	9d 81       	ldd	r25, Y+5	; 0x05
     8ce:	83 30       	cpi	r24, 0x03	; 3
     8d0:	91 05       	cpc	r25, r1
     8d2:	09 f4       	brne	.+2      	; 0x8d6 <GPIO_setupPinDirection+0x66>
     8d4:	85 c0       	rjmp	.+266    	; 0x9e0 <GPIO_setupPinDirection+0x170>
     8d6:	af c0       	rjmp	.+350    	; 0xa36 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     8d8:	8b 81       	ldd	r24, Y+3	; 0x03
     8da:	81 30       	cpi	r24, 0x01	; 1
     8dc:	a1 f4       	brne	.+40     	; 0x906 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     8de:	aa e3       	ldi	r26, 0x3A	; 58
     8e0:	b0 e0       	ldi	r27, 0x00	; 0
     8e2:	ea e3       	ldi	r30, 0x3A	; 58
     8e4:	f0 e0       	ldi	r31, 0x00	; 0
     8e6:	80 81       	ld	r24, Z
     8e8:	48 2f       	mov	r20, r24
     8ea:	8a 81       	ldd	r24, Y+2	; 0x02
     8ec:	28 2f       	mov	r18, r24
     8ee:	30 e0       	ldi	r19, 0x00	; 0
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	02 2e       	mov	r0, r18
     8f6:	02 c0       	rjmp	.+4      	; 0x8fc <GPIO_setupPinDirection+0x8c>
     8f8:	88 0f       	add	r24, r24
     8fa:	99 1f       	adc	r25, r25
     8fc:	0a 94       	dec	r0
     8fe:	e2 f7       	brpl	.-8      	; 0x8f8 <GPIO_setupPinDirection+0x88>
     900:	84 2b       	or	r24, r20
     902:	8c 93       	st	X, r24
     904:	98 c0       	rjmp	.+304    	; 0xa36 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     906:	aa e3       	ldi	r26, 0x3A	; 58
     908:	b0 e0       	ldi	r27, 0x00	; 0
     90a:	ea e3       	ldi	r30, 0x3A	; 58
     90c:	f0 e0       	ldi	r31, 0x00	; 0
     90e:	80 81       	ld	r24, Z
     910:	48 2f       	mov	r20, r24
     912:	8a 81       	ldd	r24, Y+2	; 0x02
     914:	28 2f       	mov	r18, r24
     916:	30 e0       	ldi	r19, 0x00	; 0
     918:	81 e0       	ldi	r24, 0x01	; 1
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	02 2e       	mov	r0, r18
     91e:	02 c0       	rjmp	.+4      	; 0x924 <GPIO_setupPinDirection+0xb4>
     920:	88 0f       	add	r24, r24
     922:	99 1f       	adc	r25, r25
     924:	0a 94       	dec	r0
     926:	e2 f7       	brpl	.-8      	; 0x920 <GPIO_setupPinDirection+0xb0>
     928:	80 95       	com	r24
     92a:	84 23       	and	r24, r20
     92c:	8c 93       	st	X, r24
     92e:	83 c0       	rjmp	.+262    	; 0xa36 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     930:	8b 81       	ldd	r24, Y+3	; 0x03
     932:	81 30       	cpi	r24, 0x01	; 1
     934:	a1 f4       	brne	.+40     	; 0x95e <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     936:	a7 e3       	ldi	r26, 0x37	; 55
     938:	b0 e0       	ldi	r27, 0x00	; 0
     93a:	e7 e3       	ldi	r30, 0x37	; 55
     93c:	f0 e0       	ldi	r31, 0x00	; 0
     93e:	80 81       	ld	r24, Z
     940:	48 2f       	mov	r20, r24
     942:	8a 81       	ldd	r24, Y+2	; 0x02
     944:	28 2f       	mov	r18, r24
     946:	30 e0       	ldi	r19, 0x00	; 0
     948:	81 e0       	ldi	r24, 0x01	; 1
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	02 2e       	mov	r0, r18
     94e:	02 c0       	rjmp	.+4      	; 0x954 <GPIO_setupPinDirection+0xe4>
     950:	88 0f       	add	r24, r24
     952:	99 1f       	adc	r25, r25
     954:	0a 94       	dec	r0
     956:	e2 f7       	brpl	.-8      	; 0x950 <GPIO_setupPinDirection+0xe0>
     958:	84 2b       	or	r24, r20
     95a:	8c 93       	st	X, r24
     95c:	6c c0       	rjmp	.+216    	; 0xa36 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     95e:	a7 e3       	ldi	r26, 0x37	; 55
     960:	b0 e0       	ldi	r27, 0x00	; 0
     962:	e7 e3       	ldi	r30, 0x37	; 55
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	80 81       	ld	r24, Z
     968:	48 2f       	mov	r20, r24
     96a:	8a 81       	ldd	r24, Y+2	; 0x02
     96c:	28 2f       	mov	r18, r24
     96e:	30 e0       	ldi	r19, 0x00	; 0
     970:	81 e0       	ldi	r24, 0x01	; 1
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	02 2e       	mov	r0, r18
     976:	02 c0       	rjmp	.+4      	; 0x97c <GPIO_setupPinDirection+0x10c>
     978:	88 0f       	add	r24, r24
     97a:	99 1f       	adc	r25, r25
     97c:	0a 94       	dec	r0
     97e:	e2 f7       	brpl	.-8      	; 0x978 <GPIO_setupPinDirection+0x108>
     980:	80 95       	com	r24
     982:	84 23       	and	r24, r20
     984:	8c 93       	st	X, r24
     986:	57 c0       	rjmp	.+174    	; 0xa36 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     988:	8b 81       	ldd	r24, Y+3	; 0x03
     98a:	81 30       	cpi	r24, 0x01	; 1
     98c:	a1 f4       	brne	.+40     	; 0x9b6 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     98e:	a4 e3       	ldi	r26, 0x34	; 52
     990:	b0 e0       	ldi	r27, 0x00	; 0
     992:	e4 e3       	ldi	r30, 0x34	; 52
     994:	f0 e0       	ldi	r31, 0x00	; 0
     996:	80 81       	ld	r24, Z
     998:	48 2f       	mov	r20, r24
     99a:	8a 81       	ldd	r24, Y+2	; 0x02
     99c:	28 2f       	mov	r18, r24
     99e:	30 e0       	ldi	r19, 0x00	; 0
     9a0:	81 e0       	ldi	r24, 0x01	; 1
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	02 2e       	mov	r0, r18
     9a6:	02 c0       	rjmp	.+4      	; 0x9ac <GPIO_setupPinDirection+0x13c>
     9a8:	88 0f       	add	r24, r24
     9aa:	99 1f       	adc	r25, r25
     9ac:	0a 94       	dec	r0
     9ae:	e2 f7       	brpl	.-8      	; 0x9a8 <GPIO_setupPinDirection+0x138>
     9b0:	84 2b       	or	r24, r20
     9b2:	8c 93       	st	X, r24
     9b4:	40 c0       	rjmp	.+128    	; 0xa36 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     9b6:	a4 e3       	ldi	r26, 0x34	; 52
     9b8:	b0 e0       	ldi	r27, 0x00	; 0
     9ba:	e4 e3       	ldi	r30, 0x34	; 52
     9bc:	f0 e0       	ldi	r31, 0x00	; 0
     9be:	80 81       	ld	r24, Z
     9c0:	48 2f       	mov	r20, r24
     9c2:	8a 81       	ldd	r24, Y+2	; 0x02
     9c4:	28 2f       	mov	r18, r24
     9c6:	30 e0       	ldi	r19, 0x00	; 0
     9c8:	81 e0       	ldi	r24, 0x01	; 1
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	02 2e       	mov	r0, r18
     9ce:	02 c0       	rjmp	.+4      	; 0x9d4 <GPIO_setupPinDirection+0x164>
     9d0:	88 0f       	add	r24, r24
     9d2:	99 1f       	adc	r25, r25
     9d4:	0a 94       	dec	r0
     9d6:	e2 f7       	brpl	.-8      	; 0x9d0 <GPIO_setupPinDirection+0x160>
     9d8:	80 95       	com	r24
     9da:	84 23       	and	r24, r20
     9dc:	8c 93       	st	X, r24
     9de:	2b c0       	rjmp	.+86     	; 0xa36 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     9e0:	8b 81       	ldd	r24, Y+3	; 0x03
     9e2:	81 30       	cpi	r24, 0x01	; 1
     9e4:	a1 f4       	brne	.+40     	; 0xa0e <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     9e6:	a1 e3       	ldi	r26, 0x31	; 49
     9e8:	b0 e0       	ldi	r27, 0x00	; 0
     9ea:	e1 e3       	ldi	r30, 0x31	; 49
     9ec:	f0 e0       	ldi	r31, 0x00	; 0
     9ee:	80 81       	ld	r24, Z
     9f0:	48 2f       	mov	r20, r24
     9f2:	8a 81       	ldd	r24, Y+2	; 0x02
     9f4:	28 2f       	mov	r18, r24
     9f6:	30 e0       	ldi	r19, 0x00	; 0
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	02 2e       	mov	r0, r18
     9fe:	02 c0       	rjmp	.+4      	; 0xa04 <GPIO_setupPinDirection+0x194>
     a00:	88 0f       	add	r24, r24
     a02:	99 1f       	adc	r25, r25
     a04:	0a 94       	dec	r0
     a06:	e2 f7       	brpl	.-8      	; 0xa00 <GPIO_setupPinDirection+0x190>
     a08:	84 2b       	or	r24, r20
     a0a:	8c 93       	st	X, r24
     a0c:	14 c0       	rjmp	.+40     	; 0xa36 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     a0e:	a1 e3       	ldi	r26, 0x31	; 49
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	e1 e3       	ldi	r30, 0x31	; 49
     a14:	f0 e0       	ldi	r31, 0x00	; 0
     a16:	80 81       	ld	r24, Z
     a18:	48 2f       	mov	r20, r24
     a1a:	8a 81       	ldd	r24, Y+2	; 0x02
     a1c:	28 2f       	mov	r18, r24
     a1e:	30 e0       	ldi	r19, 0x00	; 0
     a20:	81 e0       	ldi	r24, 0x01	; 1
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	02 2e       	mov	r0, r18
     a26:	02 c0       	rjmp	.+4      	; 0xa2c <GPIO_setupPinDirection+0x1bc>
     a28:	88 0f       	add	r24, r24
     a2a:	99 1f       	adc	r25, r25
     a2c:	0a 94       	dec	r0
     a2e:	e2 f7       	brpl	.-8      	; 0xa28 <GPIO_setupPinDirection+0x1b8>
     a30:	80 95       	com	r24
     a32:	84 23       	and	r24, r20
     a34:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     a36:	0f 90       	pop	r0
     a38:	0f 90       	pop	r0
     a3a:	0f 90       	pop	r0
     a3c:	0f 90       	pop	r0
     a3e:	0f 90       	pop	r0
     a40:	cf 91       	pop	r28
     a42:	df 91       	pop	r29
     a44:	08 95       	ret

00000a46 <GPIO_writePin>:
 -> Write the value Logic High or Logic Low on the required pin.
 -> If the input port number or pin number are not correct, The function will not handle the request.
 -> If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     a46:	df 93       	push	r29
     a48:	cf 93       	push	r28
     a4a:	00 d0       	rcall	.+0      	; 0xa4c <GPIO_writePin+0x6>
     a4c:	00 d0       	rcall	.+0      	; 0xa4e <GPIO_writePin+0x8>
     a4e:	0f 92       	push	r0
     a50:	cd b7       	in	r28, 0x3d	; 61
     a52:	de b7       	in	r29, 0x3e	; 62
     a54:	89 83       	std	Y+1, r24	; 0x01
     a56:	6a 83       	std	Y+2, r22	; 0x02
     a58:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 -> Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	    Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 -> In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     a5a:	8a 81       	ldd	r24, Y+2	; 0x02
     a5c:	88 30       	cpi	r24, 0x08	; 8
     a5e:	08 f0       	brcs	.+2      	; 0xa62 <GPIO_writePin+0x1c>
     a60:	d5 c0       	rjmp	.+426    	; 0xc0c <GPIO_writePin+0x1c6>
     a62:	89 81       	ldd	r24, Y+1	; 0x01
     a64:	84 30       	cpi	r24, 0x04	; 4
     a66:	08 f0       	brcs	.+2      	; 0xa6a <GPIO_writePin+0x24>
     a68:	d1 c0       	rjmp	.+418    	; 0xc0c <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     a6a:	89 81       	ldd	r24, Y+1	; 0x01
     a6c:	28 2f       	mov	r18, r24
     a6e:	30 e0       	ldi	r19, 0x00	; 0
     a70:	3d 83       	std	Y+5, r19	; 0x05
     a72:	2c 83       	std	Y+4, r18	; 0x04
     a74:	8c 81       	ldd	r24, Y+4	; 0x04
     a76:	9d 81       	ldd	r25, Y+5	; 0x05
     a78:	81 30       	cpi	r24, 0x01	; 1
     a7a:	91 05       	cpc	r25, r1
     a7c:	09 f4       	brne	.+2      	; 0xa80 <GPIO_writePin+0x3a>
     a7e:	43 c0       	rjmp	.+134    	; 0xb06 <GPIO_writePin+0xc0>
     a80:	2c 81       	ldd	r18, Y+4	; 0x04
     a82:	3d 81       	ldd	r19, Y+5	; 0x05
     a84:	22 30       	cpi	r18, 0x02	; 2
     a86:	31 05       	cpc	r19, r1
     a88:	2c f4       	brge	.+10     	; 0xa94 <GPIO_writePin+0x4e>
     a8a:	8c 81       	ldd	r24, Y+4	; 0x04
     a8c:	9d 81       	ldd	r25, Y+5	; 0x05
     a8e:	00 97       	sbiw	r24, 0x00	; 0
     a90:	71 f0       	breq	.+28     	; 0xaae <GPIO_writePin+0x68>
     a92:	bc c0       	rjmp	.+376    	; 0xc0c <GPIO_writePin+0x1c6>
     a94:	2c 81       	ldd	r18, Y+4	; 0x04
     a96:	3d 81       	ldd	r19, Y+5	; 0x05
     a98:	22 30       	cpi	r18, 0x02	; 2
     a9a:	31 05       	cpc	r19, r1
     a9c:	09 f4       	brne	.+2      	; 0xaa0 <GPIO_writePin+0x5a>
     a9e:	5f c0       	rjmp	.+190    	; 0xb5e <GPIO_writePin+0x118>
     aa0:	8c 81       	ldd	r24, Y+4	; 0x04
     aa2:	9d 81       	ldd	r25, Y+5	; 0x05
     aa4:	83 30       	cpi	r24, 0x03	; 3
     aa6:	91 05       	cpc	r25, r1
     aa8:	09 f4       	brne	.+2      	; 0xaac <GPIO_writePin+0x66>
     aaa:	85 c0       	rjmp	.+266    	; 0xbb6 <GPIO_writePin+0x170>
     aac:	af c0       	rjmp	.+350    	; 0xc0c <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     aae:	8b 81       	ldd	r24, Y+3	; 0x03
     ab0:	81 30       	cpi	r24, 0x01	; 1
     ab2:	a1 f4       	brne	.+40     	; 0xadc <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     ab4:	ab e3       	ldi	r26, 0x3B	; 59
     ab6:	b0 e0       	ldi	r27, 0x00	; 0
     ab8:	eb e3       	ldi	r30, 0x3B	; 59
     aba:	f0 e0       	ldi	r31, 0x00	; 0
     abc:	80 81       	ld	r24, Z
     abe:	48 2f       	mov	r20, r24
     ac0:	8a 81       	ldd	r24, Y+2	; 0x02
     ac2:	28 2f       	mov	r18, r24
     ac4:	30 e0       	ldi	r19, 0x00	; 0
     ac6:	81 e0       	ldi	r24, 0x01	; 1
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	02 2e       	mov	r0, r18
     acc:	02 c0       	rjmp	.+4      	; 0xad2 <GPIO_writePin+0x8c>
     ace:	88 0f       	add	r24, r24
     ad0:	99 1f       	adc	r25, r25
     ad2:	0a 94       	dec	r0
     ad4:	e2 f7       	brpl	.-8      	; 0xace <GPIO_writePin+0x88>
     ad6:	84 2b       	or	r24, r20
     ad8:	8c 93       	st	X, r24
     ada:	98 c0       	rjmp	.+304    	; 0xc0c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     adc:	ab e3       	ldi	r26, 0x3B	; 59
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	eb e3       	ldi	r30, 0x3B	; 59
     ae2:	f0 e0       	ldi	r31, 0x00	; 0
     ae4:	80 81       	ld	r24, Z
     ae6:	48 2f       	mov	r20, r24
     ae8:	8a 81       	ldd	r24, Y+2	; 0x02
     aea:	28 2f       	mov	r18, r24
     aec:	30 e0       	ldi	r19, 0x00	; 0
     aee:	81 e0       	ldi	r24, 0x01	; 1
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	02 2e       	mov	r0, r18
     af4:	02 c0       	rjmp	.+4      	; 0xafa <GPIO_writePin+0xb4>
     af6:	88 0f       	add	r24, r24
     af8:	99 1f       	adc	r25, r25
     afa:	0a 94       	dec	r0
     afc:	e2 f7       	brpl	.-8      	; 0xaf6 <GPIO_writePin+0xb0>
     afe:	80 95       	com	r24
     b00:	84 23       	and	r24, r20
     b02:	8c 93       	st	X, r24
     b04:	83 c0       	rjmp	.+262    	; 0xc0c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     b06:	8b 81       	ldd	r24, Y+3	; 0x03
     b08:	81 30       	cpi	r24, 0x01	; 1
     b0a:	a1 f4       	brne	.+40     	; 0xb34 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     b0c:	a8 e3       	ldi	r26, 0x38	; 56
     b0e:	b0 e0       	ldi	r27, 0x00	; 0
     b10:	e8 e3       	ldi	r30, 0x38	; 56
     b12:	f0 e0       	ldi	r31, 0x00	; 0
     b14:	80 81       	ld	r24, Z
     b16:	48 2f       	mov	r20, r24
     b18:	8a 81       	ldd	r24, Y+2	; 0x02
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	81 e0       	ldi	r24, 0x01	; 1
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	02 2e       	mov	r0, r18
     b24:	02 c0       	rjmp	.+4      	; 0xb2a <GPIO_writePin+0xe4>
     b26:	88 0f       	add	r24, r24
     b28:	99 1f       	adc	r25, r25
     b2a:	0a 94       	dec	r0
     b2c:	e2 f7       	brpl	.-8      	; 0xb26 <GPIO_writePin+0xe0>
     b2e:	84 2b       	or	r24, r20
     b30:	8c 93       	st	X, r24
     b32:	6c c0       	rjmp	.+216    	; 0xc0c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     b34:	a8 e3       	ldi	r26, 0x38	; 56
     b36:	b0 e0       	ldi	r27, 0x00	; 0
     b38:	e8 e3       	ldi	r30, 0x38	; 56
     b3a:	f0 e0       	ldi	r31, 0x00	; 0
     b3c:	80 81       	ld	r24, Z
     b3e:	48 2f       	mov	r20, r24
     b40:	8a 81       	ldd	r24, Y+2	; 0x02
     b42:	28 2f       	mov	r18, r24
     b44:	30 e0       	ldi	r19, 0x00	; 0
     b46:	81 e0       	ldi	r24, 0x01	; 1
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	02 2e       	mov	r0, r18
     b4c:	02 c0       	rjmp	.+4      	; 0xb52 <GPIO_writePin+0x10c>
     b4e:	88 0f       	add	r24, r24
     b50:	99 1f       	adc	r25, r25
     b52:	0a 94       	dec	r0
     b54:	e2 f7       	brpl	.-8      	; 0xb4e <GPIO_writePin+0x108>
     b56:	80 95       	com	r24
     b58:	84 23       	and	r24, r20
     b5a:	8c 93       	st	X, r24
     b5c:	57 c0       	rjmp	.+174    	; 0xc0c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     b5e:	8b 81       	ldd	r24, Y+3	; 0x03
     b60:	81 30       	cpi	r24, 0x01	; 1
     b62:	a1 f4       	brne	.+40     	; 0xb8c <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
     b64:	a5 e3       	ldi	r26, 0x35	; 53
     b66:	b0 e0       	ldi	r27, 0x00	; 0
     b68:	e5 e3       	ldi	r30, 0x35	; 53
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	80 81       	ld	r24, Z
     b6e:	48 2f       	mov	r20, r24
     b70:	8a 81       	ldd	r24, Y+2	; 0x02
     b72:	28 2f       	mov	r18, r24
     b74:	30 e0       	ldi	r19, 0x00	; 0
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	02 2e       	mov	r0, r18
     b7c:	02 c0       	rjmp	.+4      	; 0xb82 <GPIO_writePin+0x13c>
     b7e:	88 0f       	add	r24, r24
     b80:	99 1f       	adc	r25, r25
     b82:	0a 94       	dec	r0
     b84:	e2 f7       	brpl	.-8      	; 0xb7e <GPIO_writePin+0x138>
     b86:	84 2b       	or	r24, r20
     b88:	8c 93       	st	X, r24
     b8a:	40 c0       	rjmp	.+128    	; 0xc0c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     b8c:	a5 e3       	ldi	r26, 0x35	; 53
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	e5 e3       	ldi	r30, 0x35	; 53
     b92:	f0 e0       	ldi	r31, 0x00	; 0
     b94:	80 81       	ld	r24, Z
     b96:	48 2f       	mov	r20, r24
     b98:	8a 81       	ldd	r24, Y+2	; 0x02
     b9a:	28 2f       	mov	r18, r24
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	81 e0       	ldi	r24, 0x01	; 1
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	02 2e       	mov	r0, r18
     ba4:	02 c0       	rjmp	.+4      	; 0xbaa <GPIO_writePin+0x164>
     ba6:	88 0f       	add	r24, r24
     ba8:	99 1f       	adc	r25, r25
     baa:	0a 94       	dec	r0
     bac:	e2 f7       	brpl	.-8      	; 0xba6 <GPIO_writePin+0x160>
     bae:	80 95       	com	r24
     bb0:	84 23       	and	r24, r20
     bb2:	8c 93       	st	X, r24
     bb4:	2b c0       	rjmp	.+86     	; 0xc0c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     bb6:	8b 81       	ldd	r24, Y+3	; 0x03
     bb8:	81 30       	cpi	r24, 0x01	; 1
     bba:	a1 f4       	brne	.+40     	; 0xbe4 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
     bbc:	a2 e3       	ldi	r26, 0x32	; 50
     bbe:	b0 e0       	ldi	r27, 0x00	; 0
     bc0:	e2 e3       	ldi	r30, 0x32	; 50
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	80 81       	ld	r24, Z
     bc6:	48 2f       	mov	r20, r24
     bc8:	8a 81       	ldd	r24, Y+2	; 0x02
     bca:	28 2f       	mov	r18, r24
     bcc:	30 e0       	ldi	r19, 0x00	; 0
     bce:	81 e0       	ldi	r24, 0x01	; 1
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	02 2e       	mov	r0, r18
     bd4:	02 c0       	rjmp	.+4      	; 0xbda <GPIO_writePin+0x194>
     bd6:	88 0f       	add	r24, r24
     bd8:	99 1f       	adc	r25, r25
     bda:	0a 94       	dec	r0
     bdc:	e2 f7       	brpl	.-8      	; 0xbd6 <GPIO_writePin+0x190>
     bde:	84 2b       	or	r24, r20
     be0:	8c 93       	st	X, r24
     be2:	14 c0       	rjmp	.+40     	; 0xc0c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
     be4:	a2 e3       	ldi	r26, 0x32	; 50
     be6:	b0 e0       	ldi	r27, 0x00	; 0
     be8:	e2 e3       	ldi	r30, 0x32	; 50
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	80 81       	ld	r24, Z
     bee:	48 2f       	mov	r20, r24
     bf0:	8a 81       	ldd	r24, Y+2	; 0x02
     bf2:	28 2f       	mov	r18, r24
     bf4:	30 e0       	ldi	r19, 0x00	; 0
     bf6:	81 e0       	ldi	r24, 0x01	; 1
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	02 2e       	mov	r0, r18
     bfc:	02 c0       	rjmp	.+4      	; 0xc02 <GPIO_writePin+0x1bc>
     bfe:	88 0f       	add	r24, r24
     c00:	99 1f       	adc	r25, r25
     c02:	0a 94       	dec	r0
     c04:	e2 f7       	brpl	.-8      	; 0xbfe <GPIO_writePin+0x1b8>
     c06:	80 95       	com	r24
     c08:	84 23       	and	r24, r20
     c0a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     c0c:	0f 90       	pop	r0
     c0e:	0f 90       	pop	r0
     c10:	0f 90       	pop	r0
     c12:	0f 90       	pop	r0
     c14:	0f 90       	pop	r0
     c16:	cf 91       	pop	r28
     c18:	df 91       	pop	r29
     c1a:	08 95       	ret

00000c1c <GPIO_readPin>:
 * Description :
 -> Read and return the value for the required pin, it should be Logic High or Logic Low.
 -> If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     c1c:	df 93       	push	r29
     c1e:	cf 93       	push	r28
     c20:	00 d0       	rcall	.+0      	; 0xc22 <GPIO_readPin+0x6>
     c22:	00 d0       	rcall	.+0      	; 0xc24 <GPIO_readPin+0x8>
     c24:	0f 92       	push	r0
     c26:	cd b7       	in	r28, 0x3d	; 61
     c28:	de b7       	in	r29, 0x3e	; 62
     c2a:	8a 83       	std	Y+2, r24	; 0x02
     c2c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
     c2e:	19 82       	std	Y+1, r1	; 0x01
	/*
	 -> Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	    Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 -> In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     c30:	8b 81       	ldd	r24, Y+3	; 0x03
     c32:	88 30       	cpi	r24, 0x08	; 8
     c34:	08 f0       	brcs	.+2      	; 0xc38 <GPIO_readPin+0x1c>
     c36:	84 c0       	rjmp	.+264    	; 0xd40 <GPIO_readPin+0x124>
     c38:	8a 81       	ldd	r24, Y+2	; 0x02
     c3a:	84 30       	cpi	r24, 0x04	; 4
     c3c:	08 f0       	brcs	.+2      	; 0xc40 <GPIO_readPin+0x24>
     c3e:	80 c0       	rjmp	.+256    	; 0xd40 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
     c40:	8a 81       	ldd	r24, Y+2	; 0x02
     c42:	28 2f       	mov	r18, r24
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	3d 83       	std	Y+5, r19	; 0x05
     c48:	2c 83       	std	Y+4, r18	; 0x04
     c4a:	4c 81       	ldd	r20, Y+4	; 0x04
     c4c:	5d 81       	ldd	r21, Y+5	; 0x05
     c4e:	41 30       	cpi	r20, 0x01	; 1
     c50:	51 05       	cpc	r21, r1
     c52:	79 f1       	breq	.+94     	; 0xcb2 <GPIO_readPin+0x96>
     c54:	8c 81       	ldd	r24, Y+4	; 0x04
     c56:	9d 81       	ldd	r25, Y+5	; 0x05
     c58:	82 30       	cpi	r24, 0x02	; 2
     c5a:	91 05       	cpc	r25, r1
     c5c:	34 f4       	brge	.+12     	; 0xc6a <GPIO_readPin+0x4e>
     c5e:	2c 81       	ldd	r18, Y+4	; 0x04
     c60:	3d 81       	ldd	r19, Y+5	; 0x05
     c62:	21 15       	cp	r18, r1
     c64:	31 05       	cpc	r19, r1
     c66:	69 f0       	breq	.+26     	; 0xc82 <GPIO_readPin+0x66>
     c68:	6b c0       	rjmp	.+214    	; 0xd40 <GPIO_readPin+0x124>
     c6a:	4c 81       	ldd	r20, Y+4	; 0x04
     c6c:	5d 81       	ldd	r21, Y+5	; 0x05
     c6e:	42 30       	cpi	r20, 0x02	; 2
     c70:	51 05       	cpc	r21, r1
     c72:	b9 f1       	breq	.+110    	; 0xce2 <GPIO_readPin+0xc6>
     c74:	8c 81       	ldd	r24, Y+4	; 0x04
     c76:	9d 81       	ldd	r25, Y+5	; 0x05
     c78:	83 30       	cpi	r24, 0x03	; 3
     c7a:	91 05       	cpc	r25, r1
     c7c:	09 f4       	brne	.+2      	; 0xc80 <GPIO_readPin+0x64>
     c7e:	49 c0       	rjmp	.+146    	; 0xd12 <GPIO_readPin+0xf6>
     c80:	5f c0       	rjmp	.+190    	; 0xd40 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
     c82:	e9 e3       	ldi	r30, 0x39	; 57
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	80 81       	ld	r24, Z
     c88:	28 2f       	mov	r18, r24
     c8a:	30 e0       	ldi	r19, 0x00	; 0
     c8c:	8b 81       	ldd	r24, Y+3	; 0x03
     c8e:	88 2f       	mov	r24, r24
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	a9 01       	movw	r20, r18
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <GPIO_readPin+0x7e>
     c96:	55 95       	asr	r21
     c98:	47 95       	ror	r20
     c9a:	8a 95       	dec	r24
     c9c:	e2 f7       	brpl	.-8      	; 0xc96 <GPIO_readPin+0x7a>
     c9e:	ca 01       	movw	r24, r20
     ca0:	81 70       	andi	r24, 0x01	; 1
     ca2:	90 70       	andi	r25, 0x00	; 0
     ca4:	88 23       	and	r24, r24
     ca6:	19 f0       	breq	.+6      	; 0xcae <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	89 83       	std	Y+1, r24	; 0x01
     cac:	49 c0       	rjmp	.+146    	; 0xd40 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     cae:	19 82       	std	Y+1, r1	; 0x01
     cb0:	47 c0       	rjmp	.+142    	; 0xd40 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
     cb2:	e6 e3       	ldi	r30, 0x36	; 54
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	80 81       	ld	r24, Z
     cb8:	28 2f       	mov	r18, r24
     cba:	30 e0       	ldi	r19, 0x00	; 0
     cbc:	8b 81       	ldd	r24, Y+3	; 0x03
     cbe:	88 2f       	mov	r24, r24
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	a9 01       	movw	r20, r18
     cc4:	02 c0       	rjmp	.+4      	; 0xcca <GPIO_readPin+0xae>
     cc6:	55 95       	asr	r21
     cc8:	47 95       	ror	r20
     cca:	8a 95       	dec	r24
     ccc:	e2 f7       	brpl	.-8      	; 0xcc6 <GPIO_readPin+0xaa>
     cce:	ca 01       	movw	r24, r20
     cd0:	81 70       	andi	r24, 0x01	; 1
     cd2:	90 70       	andi	r25, 0x00	; 0
     cd4:	88 23       	and	r24, r24
     cd6:	19 f0       	breq	.+6      	; 0xcde <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
     cd8:	81 e0       	ldi	r24, 0x01	; 1
     cda:	89 83       	std	Y+1, r24	; 0x01
     cdc:	31 c0       	rjmp	.+98     	; 0xd40 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     cde:	19 82       	std	Y+1, r1	; 0x01
     ce0:	2f c0       	rjmp	.+94     	; 0xd40 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
     ce2:	e3 e3       	ldi	r30, 0x33	; 51
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	28 2f       	mov	r18, r24
     cea:	30 e0       	ldi	r19, 0x00	; 0
     cec:	8b 81       	ldd	r24, Y+3	; 0x03
     cee:	88 2f       	mov	r24, r24
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	a9 01       	movw	r20, r18
     cf4:	02 c0       	rjmp	.+4      	; 0xcfa <GPIO_readPin+0xde>
     cf6:	55 95       	asr	r21
     cf8:	47 95       	ror	r20
     cfa:	8a 95       	dec	r24
     cfc:	e2 f7       	brpl	.-8      	; 0xcf6 <GPIO_readPin+0xda>
     cfe:	ca 01       	movw	r24, r20
     d00:	81 70       	andi	r24, 0x01	; 1
     d02:	90 70       	andi	r25, 0x00	; 0
     d04:	88 23       	and	r24, r24
     d06:	19 f0       	breq	.+6      	; 0xd0e <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	89 83       	std	Y+1, r24	; 0x01
     d0c:	19 c0       	rjmp	.+50     	; 0xd40 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     d0e:	19 82       	std	Y+1, r1	; 0x01
     d10:	17 c0       	rjmp	.+46     	; 0xd40 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
     d12:	e0 e3       	ldi	r30, 0x30	; 48
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	80 81       	ld	r24, Z
     d18:	28 2f       	mov	r18, r24
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	8b 81       	ldd	r24, Y+3	; 0x03
     d1e:	88 2f       	mov	r24, r24
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	a9 01       	movw	r20, r18
     d24:	02 c0       	rjmp	.+4      	; 0xd2a <GPIO_readPin+0x10e>
     d26:	55 95       	asr	r21
     d28:	47 95       	ror	r20
     d2a:	8a 95       	dec	r24
     d2c:	e2 f7       	brpl	.-8      	; 0xd26 <GPIO_readPin+0x10a>
     d2e:	ca 01       	movw	r24, r20
     d30:	81 70       	andi	r24, 0x01	; 1
     d32:	90 70       	andi	r25, 0x00	; 0
     d34:	88 23       	and	r24, r24
     d36:	19 f0       	breq	.+6      	; 0xd3e <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
     d38:	81 e0       	ldi	r24, 0x01	; 1
     d3a:	89 83       	std	Y+1, r24	; 0x01
     d3c:	01 c0       	rjmp	.+2      	; 0xd40 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     d3e:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
     d40:	89 81       	ldd	r24, Y+1	; 0x01
}
     d42:	0f 90       	pop	r0
     d44:	0f 90       	pop	r0
     d46:	0f 90       	pop	r0
     d48:	0f 90       	pop	r0
     d4a:	0f 90       	pop	r0
     d4c:	cf 91       	pop	r28
     d4e:	df 91       	pop	r29
     d50:	08 95       	ret

00000d52 <GPIO_setupPortDirection>:
 -> If the direction value is PORT_INPUT all pins in this port should be input pins.
 -> If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 -> If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
     d52:	df 93       	push	r29
     d54:	cf 93       	push	r28
     d56:	00 d0       	rcall	.+0      	; 0xd58 <GPIO_setupPortDirection+0x6>
     d58:	00 d0       	rcall	.+0      	; 0xd5a <GPIO_setupPortDirection+0x8>
     d5a:	cd b7       	in	r28, 0x3d	; 61
     d5c:	de b7       	in	r29, 0x3e	; 62
     d5e:	89 83       	std	Y+1, r24	; 0x01
     d60:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 -> Check if the input number is greater than NUM_OF_PORTS value.
	 -> In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
     d62:	89 81       	ldd	r24, Y+1	; 0x01
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	90 f5       	brcc	.+100    	; 0xdcc <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
     d68:	89 81       	ldd	r24, Y+1	; 0x01
     d6a:	28 2f       	mov	r18, r24
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	3c 83       	std	Y+4, r19	; 0x04
     d70:	2b 83       	std	Y+3, r18	; 0x03
     d72:	8b 81       	ldd	r24, Y+3	; 0x03
     d74:	9c 81       	ldd	r25, Y+4	; 0x04
     d76:	81 30       	cpi	r24, 0x01	; 1
     d78:	91 05       	cpc	r25, r1
     d7a:	d1 f0       	breq	.+52     	; 0xdb0 <GPIO_setupPortDirection+0x5e>
     d7c:	2b 81       	ldd	r18, Y+3	; 0x03
     d7e:	3c 81       	ldd	r19, Y+4	; 0x04
     d80:	22 30       	cpi	r18, 0x02	; 2
     d82:	31 05       	cpc	r19, r1
     d84:	2c f4       	brge	.+10     	; 0xd90 <GPIO_setupPortDirection+0x3e>
     d86:	8b 81       	ldd	r24, Y+3	; 0x03
     d88:	9c 81       	ldd	r25, Y+4	; 0x04
     d8a:	00 97       	sbiw	r24, 0x00	; 0
     d8c:	61 f0       	breq	.+24     	; 0xda6 <GPIO_setupPortDirection+0x54>
     d8e:	1e c0       	rjmp	.+60     	; 0xdcc <GPIO_setupPortDirection+0x7a>
     d90:	2b 81       	ldd	r18, Y+3	; 0x03
     d92:	3c 81       	ldd	r19, Y+4	; 0x04
     d94:	22 30       	cpi	r18, 0x02	; 2
     d96:	31 05       	cpc	r19, r1
     d98:	81 f0       	breq	.+32     	; 0xdba <GPIO_setupPortDirection+0x68>
     d9a:	8b 81       	ldd	r24, Y+3	; 0x03
     d9c:	9c 81       	ldd	r25, Y+4	; 0x04
     d9e:	83 30       	cpi	r24, 0x03	; 3
     da0:	91 05       	cpc	r25, r1
     da2:	81 f0       	breq	.+32     	; 0xdc4 <GPIO_setupPortDirection+0x72>
     da4:	13 c0       	rjmp	.+38     	; 0xdcc <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
     da6:	ea e3       	ldi	r30, 0x3A	; 58
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	8a 81       	ldd	r24, Y+2	; 0x02
     dac:	80 83       	st	Z, r24
     dae:	0e c0       	rjmp	.+28     	; 0xdcc <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
     db0:	e7 e3       	ldi	r30, 0x37	; 55
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	8a 81       	ldd	r24, Y+2	; 0x02
     db6:	80 83       	st	Z, r24
     db8:	09 c0       	rjmp	.+18     	; 0xdcc <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
     dba:	e4 e3       	ldi	r30, 0x34	; 52
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	8a 81       	ldd	r24, Y+2	; 0x02
     dc0:	80 83       	st	Z, r24
     dc2:	04 c0       	rjmp	.+8      	; 0xdcc <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
     dc4:	e1 e3       	ldi	r30, 0x31	; 49
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	8a 81       	ldd	r24, Y+2	; 0x02
     dca:	80 83       	st	Z, r24
			break;
		}
	}
}
     dcc:	0f 90       	pop	r0
     dce:	0f 90       	pop	r0
     dd0:	0f 90       	pop	r0
     dd2:	0f 90       	pop	r0
     dd4:	cf 91       	pop	r28
     dd6:	df 91       	pop	r29
     dd8:	08 95       	ret

00000dda <GPIO_writePort>:
 -> If any pin in the port is output pin the value will be written.
 -> If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 -> If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
     dda:	df 93       	push	r29
     ddc:	cf 93       	push	r28
     dde:	00 d0       	rcall	.+0      	; 0xde0 <GPIO_writePort+0x6>
     de0:	00 d0       	rcall	.+0      	; 0xde2 <GPIO_writePort+0x8>
     de2:	cd b7       	in	r28, 0x3d	; 61
     de4:	de b7       	in	r29, 0x3e	; 62
     de6:	89 83       	std	Y+1, r24	; 0x01
     de8:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 -> Check if the input number is greater than NUM_OF_PORTS value.
	 -> In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
     dea:	89 81       	ldd	r24, Y+1	; 0x01
     dec:	84 30       	cpi	r24, 0x04	; 4
     dee:	90 f5       	brcc	.+100    	; 0xe54 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
     df0:	89 81       	ldd	r24, Y+1	; 0x01
     df2:	28 2f       	mov	r18, r24
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	3c 83       	std	Y+4, r19	; 0x04
     df8:	2b 83       	std	Y+3, r18	; 0x03
     dfa:	8b 81       	ldd	r24, Y+3	; 0x03
     dfc:	9c 81       	ldd	r25, Y+4	; 0x04
     dfe:	81 30       	cpi	r24, 0x01	; 1
     e00:	91 05       	cpc	r25, r1
     e02:	d1 f0       	breq	.+52     	; 0xe38 <GPIO_writePort+0x5e>
     e04:	2b 81       	ldd	r18, Y+3	; 0x03
     e06:	3c 81       	ldd	r19, Y+4	; 0x04
     e08:	22 30       	cpi	r18, 0x02	; 2
     e0a:	31 05       	cpc	r19, r1
     e0c:	2c f4       	brge	.+10     	; 0xe18 <GPIO_writePort+0x3e>
     e0e:	8b 81       	ldd	r24, Y+3	; 0x03
     e10:	9c 81       	ldd	r25, Y+4	; 0x04
     e12:	00 97       	sbiw	r24, 0x00	; 0
     e14:	61 f0       	breq	.+24     	; 0xe2e <GPIO_writePort+0x54>
     e16:	1e c0       	rjmp	.+60     	; 0xe54 <GPIO_writePort+0x7a>
     e18:	2b 81       	ldd	r18, Y+3	; 0x03
     e1a:	3c 81       	ldd	r19, Y+4	; 0x04
     e1c:	22 30       	cpi	r18, 0x02	; 2
     e1e:	31 05       	cpc	r19, r1
     e20:	81 f0       	breq	.+32     	; 0xe42 <GPIO_writePort+0x68>
     e22:	8b 81       	ldd	r24, Y+3	; 0x03
     e24:	9c 81       	ldd	r25, Y+4	; 0x04
     e26:	83 30       	cpi	r24, 0x03	; 3
     e28:	91 05       	cpc	r25, r1
     e2a:	81 f0       	breq	.+32     	; 0xe4c <GPIO_writePort+0x72>
     e2c:	13 c0       	rjmp	.+38     	; 0xe54 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
     e2e:	eb e3       	ldi	r30, 0x3B	; 59
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	8a 81       	ldd	r24, Y+2	; 0x02
     e34:	80 83       	st	Z, r24
     e36:	0e c0       	rjmp	.+28     	; 0xe54 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
     e38:	e8 e3       	ldi	r30, 0x38	; 56
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	8a 81       	ldd	r24, Y+2	; 0x02
     e3e:	80 83       	st	Z, r24
     e40:	09 c0       	rjmp	.+18     	; 0xe54 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
     e42:	e5 e3       	ldi	r30, 0x35	; 53
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	80 83       	st	Z, r24
     e4a:	04 c0       	rjmp	.+8      	; 0xe54 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
     e4c:	e2 e3       	ldi	r30, 0x32	; 50
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	8a 81       	ldd	r24, Y+2	; 0x02
     e52:	80 83       	st	Z, r24
			break;
		}
	}
}
     e54:	0f 90       	pop	r0
     e56:	0f 90       	pop	r0
     e58:	0f 90       	pop	r0
     e5a:	0f 90       	pop	r0
     e5c:	cf 91       	pop	r28
     e5e:	df 91       	pop	r29
     e60:	08 95       	ret

00000e62 <GPIO_readPort>:
 * Description :
 -> Read and return the value of the required port.
 -> If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
     e62:	df 93       	push	r29
     e64:	cf 93       	push	r28
     e66:	00 d0       	rcall	.+0      	; 0xe68 <GPIO_readPort+0x6>
     e68:	00 d0       	rcall	.+0      	; 0xe6a <GPIO_readPort+0x8>
     e6a:	cd b7       	in	r28, 0x3d	; 61
     e6c:	de b7       	in	r29, 0x3e	; 62
     e6e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
     e70:	19 82       	std	Y+1, r1	; 0x01

	/*
	 -> Check if the input number is greater than NUM_OF_PORTS value.
	 -> In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
     e72:	8a 81       	ldd	r24, Y+2	; 0x02
     e74:	84 30       	cpi	r24, 0x04	; 4
     e76:	90 f5       	brcc	.+100    	; 0xedc <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
     e78:	8a 81       	ldd	r24, Y+2	; 0x02
     e7a:	28 2f       	mov	r18, r24
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	3c 83       	std	Y+4, r19	; 0x04
     e80:	2b 83       	std	Y+3, r18	; 0x03
     e82:	8b 81       	ldd	r24, Y+3	; 0x03
     e84:	9c 81       	ldd	r25, Y+4	; 0x04
     e86:	81 30       	cpi	r24, 0x01	; 1
     e88:	91 05       	cpc	r25, r1
     e8a:	d1 f0       	breq	.+52     	; 0xec0 <GPIO_readPort+0x5e>
     e8c:	2b 81       	ldd	r18, Y+3	; 0x03
     e8e:	3c 81       	ldd	r19, Y+4	; 0x04
     e90:	22 30       	cpi	r18, 0x02	; 2
     e92:	31 05       	cpc	r19, r1
     e94:	2c f4       	brge	.+10     	; 0xea0 <GPIO_readPort+0x3e>
     e96:	8b 81       	ldd	r24, Y+3	; 0x03
     e98:	9c 81       	ldd	r25, Y+4	; 0x04
     e9a:	00 97       	sbiw	r24, 0x00	; 0
     e9c:	61 f0       	breq	.+24     	; 0xeb6 <GPIO_readPort+0x54>
     e9e:	1e c0       	rjmp	.+60     	; 0xedc <GPIO_readPort+0x7a>
     ea0:	2b 81       	ldd	r18, Y+3	; 0x03
     ea2:	3c 81       	ldd	r19, Y+4	; 0x04
     ea4:	22 30       	cpi	r18, 0x02	; 2
     ea6:	31 05       	cpc	r19, r1
     ea8:	81 f0       	breq	.+32     	; 0xeca <GPIO_readPort+0x68>
     eaa:	8b 81       	ldd	r24, Y+3	; 0x03
     eac:	9c 81       	ldd	r25, Y+4	; 0x04
     eae:	83 30       	cpi	r24, 0x03	; 3
     eb0:	91 05       	cpc	r25, r1
     eb2:	81 f0       	breq	.+32     	; 0xed4 <GPIO_readPort+0x72>
     eb4:	13 c0       	rjmp	.+38     	; 0xedc <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
     eb6:	e9 e3       	ldi	r30, 0x39	; 57
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	80 81       	ld	r24, Z
     ebc:	89 83       	std	Y+1, r24	; 0x01
     ebe:	0e c0       	rjmp	.+28     	; 0xedc <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
     ec0:	e6 e3       	ldi	r30, 0x36	; 54
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	89 83       	std	Y+1, r24	; 0x01
     ec8:	09 c0       	rjmp	.+18     	; 0xedc <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
     eca:	e3 e3       	ldi	r30, 0x33	; 51
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	89 83       	std	Y+1, r24	; 0x01
     ed2:	04 c0       	rjmp	.+8      	; 0xedc <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
     ed4:	e0 e3       	ldi	r30, 0x30	; 48
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
     edc:	89 81       	ldd	r24, Y+1	; 0x01
}
     ede:	0f 90       	pop	r0
     ee0:	0f 90       	pop	r0
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	cf 91       	pop	r28
     ee8:	df 91       	pop	r29
     eea:	08 95       	ret

00000eec <ADC_init>:
/*______________________________________________________________________________
 |                               Functions Definitions                          |
 |______________________________________________________________________________|
 */

void ADC_init(const ADC_ConfigType * Config_Ptr){
     eec:	df 93       	push	r29
     eee:	cf 93       	push	r28
     ef0:	00 d0       	rcall	.+0      	; 0xef2 <ADC_init+0x6>
     ef2:	00 d0       	rcall	.+0      	; 0xef4 <ADC_init+0x8>
     ef4:	cd b7       	in	r28, 0x3d	; 61
     ef6:	de b7       	in	r29, 0x3e	; 62
     ef8:	9a 83       	std	Y+2, r25	; 0x02
     efa:	89 83       	std	Y+1, r24	; 0x01

	switch(Config_Ptr->ref_volt){
     efc:	e9 81       	ldd	r30, Y+1	; 0x01
     efe:	fa 81       	ldd	r31, Y+2	; 0x02
     f00:	80 81       	ld	r24, Z
     f02:	28 2f       	mov	r18, r24
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	3c 83       	std	Y+4, r19	; 0x04
     f08:	2b 83       	std	Y+3, r18	; 0x03
     f0a:	8b 81       	ldd	r24, Y+3	; 0x03
     f0c:	9c 81       	ldd	r25, Y+4	; 0x04
     f0e:	81 30       	cpi	r24, 0x01	; 1
     f10:	91 05       	cpc	r25, r1
     f12:	31 f0       	breq	.+12     	; 0xf20 <ADC_init+0x34>
     f14:	2b 81       	ldd	r18, Y+3	; 0x03
     f16:	3c 81       	ldd	r19, Y+4	; 0x04
     f18:	23 30       	cpi	r18, 0x03	; 3
     f1a:	31 05       	cpc	r19, r1
     f1c:	71 f0       	breq	.+28     	; 0xf3a <ADC_init+0x4e>
     f1e:	19 c0       	rjmp	.+50     	; 0xf52 <ADC_init+0x66>
	case Ext_AVCC:
		ADC_RefVoltValue = 5;
     f20:	80 e0       	ldi	r24, 0x00	; 0
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	a0 ea       	ldi	r26, 0xA0	; 160
     f26:	b0 e4       	ldi	r27, 0x40	; 64
     f28:	80 93 7d 01 	sts	0x017D, r24
     f2c:	90 93 7e 01 	sts	0x017E, r25
     f30:	a0 93 7f 01 	sts	0x017F, r26
     f34:	b0 93 80 01 	sts	0x0180, r27
     f38:	0c c0       	rjmp	.+24     	; 0xf52 <ADC_init+0x66>
		break;

	case Int_2_56V:
		ADC_RefVoltValue = 2.56;
     f3a:	8a e0       	ldi	r24, 0x0A	; 10
     f3c:	97 ed       	ldi	r25, 0xD7	; 215
     f3e:	a3 e2       	ldi	r26, 0x23	; 35
     f40:	b0 e4       	ldi	r27, 0x40	; 64
     f42:	80 93 7d 01 	sts	0x017D, r24
     f46:	90 93 7e 01 	sts	0x017E, r25
     f4a:	a0 93 7f 01 	sts	0x017F, r26
     f4e:	b0 93 80 01 	sts	0x0180, r27
	/* ADMUX Register Bits Description:
	 -> REFS1:0 = 01 to choose the reference voltage
	 -> ADLAR   = 0 (right adjusted)
	 -> MUX4:0  = 00000 to choose channel 0 as initialization
	 */
	ADMUX = (ADMUX & 0x3F) | ((Config_Ptr->ref_volt)<<6);
     f52:	a7 e2       	ldi	r26, 0x27	; 39
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	e7 e2       	ldi	r30, 0x27	; 39
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	28 2f       	mov	r18, r24
     f5e:	2f 73       	andi	r18, 0x3F	; 63
     f60:	e9 81       	ldd	r30, Y+1	; 0x01
     f62:	fa 81       	ldd	r31, Y+2	; 0x02
     f64:	80 81       	ld	r24, Z
     f66:	88 2f       	mov	r24, r24
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	00 24       	eor	r0, r0
     f6c:	96 95       	lsr	r25
     f6e:	87 95       	ror	r24
     f70:	07 94       	ror	r0
     f72:	96 95       	lsr	r25
     f74:	87 95       	ror	r24
     f76:	07 94       	ror	r0
     f78:	98 2f       	mov	r25, r24
     f7a:	80 2d       	mov	r24, r0
     f7c:	82 2b       	or	r24, r18
     f7e:	8c 93       	st	X, r24
	 -> ADEN    = 1 Enable ADC
	 -> ADIE    = 0 Disable ADC Interrupt
	 -> ADATE   = 0 Disable Auto Trigger
	 -> ADPS2:0  = selecting the prescaler.
	 */
	ADCSRA = (1<<ADEN) | ((ADCSRA & 0xF8) | (Config_Ptr->prescaler));
     f80:	a6 e2       	ldi	r26, 0x26	; 38
     f82:	b0 e0       	ldi	r27, 0x00	; 0
     f84:	e6 e2       	ldi	r30, 0x26	; 38
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	98 2f       	mov	r25, r24
     f8c:	98 7f       	andi	r25, 0xF8	; 248
     f8e:	e9 81       	ldd	r30, Y+1	; 0x01
     f90:	fa 81       	ldd	r31, Y+2	; 0x02
     f92:	81 81       	ldd	r24, Z+1	; 0x01
     f94:	89 2b       	or	r24, r25
     f96:	80 68       	ori	r24, 0x80	; 128
     f98:	8c 93       	st	X, r24

}
     f9a:	0f 90       	pop	r0
     f9c:	0f 90       	pop	r0
     f9e:	0f 90       	pop	r0
     fa0:	0f 90       	pop	r0
     fa2:	cf 91       	pop	r28
     fa4:	df 91       	pop	r29
     fa6:	08 95       	ret

00000fa8 <ADC_readChannel>:

uint16 ADC_readChannel(uint8 ch_num){
     fa8:	df 93       	push	r29
     faa:	cf 93       	push	r28
     fac:	0f 92       	push	r0
     fae:	cd b7       	in	r28, 0x3d	; 61
     fb0:	de b7       	in	r29, 0x3e	; 62
     fb2:	89 83       	std	Y+1, r24	; 0x01

	/* Choosing the correct channel by setting the channel number in MUX4:0 bits */
	ADMUX = (ADMUX & 0xE0)|(ch_num & 0x1F);
     fb4:	a7 e2       	ldi	r26, 0x27	; 39
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	e7 e2       	ldi	r30, 0x27	; 39
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	98 2f       	mov	r25, r24
     fc0:	90 7e       	andi	r25, 0xE0	; 224
     fc2:	89 81       	ldd	r24, Y+1	; 0x01
     fc4:	8f 71       	andi	r24, 0x1F	; 31
     fc6:	89 2b       	or	r24, r25
     fc8:	8c 93       	st	X, r24

	SET_BIT(ADCSRA , ADSC);	/* Start conversion write '1' to ADSC */
     fca:	a6 e2       	ldi	r26, 0x26	; 38
     fcc:	b0 e0       	ldi	r27, 0x00	; 0
     fce:	e6 e2       	ldi	r30, 0x26	; 38
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	80 81       	ld	r24, Z
     fd4:	80 64       	ori	r24, 0x40	; 64
     fd6:	8c 93       	st	X, r24

	while(BIT_IS_CLEAR(ADCSRA,ADIF));	/* Wait for conversion to complete, ADIF becomes '1' */
     fd8:	e6 e2       	ldi	r30, 0x26	; 38
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
     fde:	88 2f       	mov	r24, r24
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	80 71       	andi	r24, 0x10	; 16
     fe4:	90 70       	andi	r25, 0x00	; 0
     fe6:	00 97       	sbiw	r24, 0x00	; 0
     fe8:	b9 f3       	breq	.-18     	; 0xfd8 <ADC_readChannel+0x30>

	SET_BIT(ADCSRA,ADIF);	/* Clear ADIF by write '1' to it :) */
     fea:	a6 e2       	ldi	r26, 0x26	; 38
     fec:	b0 e0       	ldi	r27, 0x00	; 0
     fee:	e6 e2       	ldi	r30, 0x26	; 38
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	80 61       	ori	r24, 0x10	; 16
     ff6:	8c 93       	st	X, r24

	return ADC;	/* Read the digital value from the data register */
     ff8:	e4 e2       	ldi	r30, 0x24	; 36
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	80 81       	ld	r24, Z
     ffe:	91 81       	ldd	r25, Z+1	; 0x01
}
    1000:	0f 90       	pop	r0
    1002:	cf 91       	pop	r28
    1004:	df 91       	pop	r29
    1006:	08 95       	ret

00001008 <VOLTMETER_getReading>:


#include "voltmeter.h"


float VOLTMETER_getReading(ADS1015 *ads){
    1008:	df 93       	push	r29
    100a:	cf 93       	push	r28
    100c:	cd b7       	in	r28, 0x3d	; 61
    100e:	de b7       	in	r29, 0x3e	; 62
    1010:	2a 97       	sbiw	r28, 0x0a	; 10
    1012:	0f b6       	in	r0, 0x3f	; 63
    1014:	f8 94       	cli
    1016:	de bf       	out	0x3e, r29	; 62
    1018:	0f be       	out	0x3f, r0	; 63
    101a:	cd bf       	out	0x3d, r28	; 61
    101c:	9a 87       	std	Y+10, r25	; 0x0a
    101e:	89 87       	std	Y+9, r24	; 0x09
	float adc, volt;
	adc = ADS1015_readADC_Differential_0_1(ads);;
    1020:	89 85       	ldd	r24, Y+9	; 0x09
    1022:	9a 85       	ldd	r25, Y+10	; 0x0a
    1024:	0e 94 34 1e 	call	0x3c68	; 0x3c68 <ADS1015_readADC_Differential_0_1>
    1028:	aa 27       	eor	r26, r26
    102a:	97 fd       	sbrc	r25, 7
    102c:	a0 95       	com	r26
    102e:	ba 2f       	mov	r27, r26
    1030:	bc 01       	movw	r22, r24
    1032:	cd 01       	movw	r24, r26
    1034:	0e 94 2d 26 	call	0x4c5a	; 0x4c5a <__floatsisf>
    1038:	dc 01       	movw	r26, r24
    103a:	cb 01       	movw	r24, r22
    103c:	8d 83       	std	Y+5, r24	; 0x05
    103e:	9e 83       	std	Y+6, r25	; 0x06
    1040:	af 83       	std	Y+7, r26	; 0x07
    1042:	b8 87       	std	Y+8, r27	; 0x08
	volt = (adc*ADS_STEP_MV*VOLTMETER_RES_RATIO/1000);
    1044:	6d 81       	ldd	r22, Y+5	; 0x05
    1046:	7e 81       	ldd	r23, Y+6	; 0x06
    1048:	8f 81       	ldd	r24, Y+7	; 0x07
    104a:	98 85       	ldd	r25, Y+8	; 0x08
    104c:	20 e0       	ldi	r18, 0x00	; 0
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	40 e4       	ldi	r20, 0x40	; 64
    1052:	50 e4       	ldi	r21, 0x40	; 64
    1054:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__mulsf3>
    1058:	dc 01       	movw	r26, r24
    105a:	cb 01       	movw	r24, r22
    105c:	bc 01       	movw	r22, r24
    105e:	cd 01       	movw	r24, r26
    1060:	20 e0       	ldi	r18, 0x00	; 0
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	40 e3       	ldi	r20, 0x30	; 48
    1066:	51 e4       	ldi	r21, 0x41	; 65
    1068:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__mulsf3>
    106c:	dc 01       	movw	r26, r24
    106e:	cb 01       	movw	r24, r22
    1070:	bc 01       	movw	r22, r24
    1072:	cd 01       	movw	r24, r26
    1074:	20 e0       	ldi	r18, 0x00	; 0
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	4a e7       	ldi	r20, 0x7A	; 122
    107a:	54 e4       	ldi	r21, 0x44	; 68
    107c:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__divsf3>
    1080:	dc 01       	movw	r26, r24
    1082:	cb 01       	movw	r24, r22
    1084:	89 83       	std	Y+1, r24	; 0x01
    1086:	9a 83       	std	Y+2, r25	; 0x02
    1088:	ab 83       	std	Y+3, r26	; 0x03
    108a:	bc 83       	std	Y+4, r27	; 0x04
	return volt;
    108c:	89 81       	ldd	r24, Y+1	; 0x01
    108e:	9a 81       	ldd	r25, Y+2	; 0x02
    1090:	ab 81       	ldd	r26, Y+3	; 0x03
    1092:	bc 81       	ldd	r27, Y+4	; 0x04
}
    1094:	bc 01       	movw	r22, r24
    1096:	cd 01       	movw	r24, r26
    1098:	2a 96       	adiw	r28, 0x0a	; 10
    109a:	0f b6       	in	r0, 0x3f	; 63
    109c:	f8 94       	cli
    109e:	de bf       	out	0x3e, r29	; 62
    10a0:	0f be       	out	0x3f, r0	; 63
    10a2:	cd bf       	out	0x3d, r28	; 61
    10a4:	cf 91       	pop	r28
    10a6:	df 91       	pop	r29
    10a8:	08 95       	ret

000010aa <OHMMETER_getReading>:
 */

#include "ohmmeter.h"


float OHMMETER_getReading(ADS1015 *ads,uint8 * resUnit){
    10aa:	df 93       	push	r29
    10ac:	cf 93       	push	r28
    10ae:	cd b7       	in	r28, 0x3d	; 61
    10b0:	de b7       	in	r29, 0x3e	; 62
    10b2:	2c 97       	sbiw	r28, 0x0c	; 12
    10b4:	0f b6       	in	r0, 0x3f	; 63
    10b6:	f8 94       	cli
    10b8:	de bf       	out	0x3e, r29	; 62
    10ba:	0f be       	out	0x3f, r0	; 63
    10bc:	cd bf       	out	0x3d, r28	; 61
    10be:	9a 87       	std	Y+10, r25	; 0x0a
    10c0:	89 87       	std	Y+9, r24	; 0x09
    10c2:	7c 87       	std	Y+12, r23	; 0x0c
    10c4:	6b 87       	std	Y+11, r22	; 0x0b
	float resistance, adc2;
	GPIO_setupPinDirection(OHMMETER_RES_1_PORT_ID, OHMMETER_RES_1_PIN_ID, PIN_OUTPUT);
    10c6:	81 e0       	ldi	r24, 0x01	; 1
    10c8:	60 e0       	ldi	r22, 0x00	; 0
    10ca:	41 e0       	ldi	r20, 0x01	; 1
    10cc:	0e 94 38 04 	call	0x870	; 0x870 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(OHMMETER_RES_2_PORT_ID, OHMMETER_RES_2_PIN_ID, PIN_INPUT);
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	61 e0       	ldi	r22, 0x01	; 1
    10d4:	40 e0       	ldi	r20, 0x00	; 0
    10d6:	0e 94 38 04 	call	0x870	; 0x870 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(OHMMETER_RES_3_PORT_ID, OHMMETER_RES_3_PIN_ID, PIN_INPUT);
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	62 e0       	ldi	r22, 0x02	; 2
    10de:	40 e0       	ldi	r20, 0x00	; 0
    10e0:	0e 94 38 04 	call	0x870	; 0x870 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(OHMMETER_RES_4_PORT_ID, OHMMETER_RES_4_PIN_ID, PIN_INPUT);
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	63 e0       	ldi	r22, 0x03	; 3
    10e8:	40 e0       	ldi	r20, 0x00	; 0
    10ea:	0e 94 38 04 	call	0x870	; 0x870 <GPIO_setupPinDirection>
	GPIO_writePin(OHMMETER_RES_1_PORT_ID, OHMMETER_RES_1_PIN_ID, LOGIC_LOW);
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	60 e0       	ldi	r22, 0x00	; 0
    10f2:	40 e0       	ldi	r20, 0x00	; 0
    10f4:	0e 94 23 05 	call	0xa46	; 0xa46 <GPIO_writePin>
	adc2 = ADS1015_readADC_SingleEnded(ads, OHMMETER_ADC_CHANNEL);
    10f8:	89 85       	ldd	r24, Y+9	; 0x09
    10fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    10fc:	62 e0       	ldi	r22, 0x02	; 2
    10fe:	0e 94 34 1d 	call	0x3a68	; 0x3a68 <ADS1015_readADC_SingleEnded>
    1102:	cc 01       	movw	r24, r24
    1104:	a0 e0       	ldi	r26, 0x00	; 0
    1106:	b0 e0       	ldi	r27, 0x00	; 0
    1108:	bc 01       	movw	r22, r24
    110a:	cd 01       	movw	r24, r26
    110c:	0e 94 2b 26 	call	0x4c56	; 0x4c56 <__floatunsisf>
    1110:	dc 01       	movw	r26, r24
    1112:	cb 01       	movw	r24, r22
    1114:	89 83       	std	Y+1, r24	; 0x01
    1116:	9a 83       	std	Y+2, r25	; 0x02
    1118:	ab 83       	std	Y+3, r26	; 0x03
    111a:	bc 83       	std	Y+4, r27	; 0x04
	resistance = OHMMETER_RES_1_VALUE*((1666/adc2)-1);
    111c:	60 e0       	ldi	r22, 0x00	; 0
    111e:	70 e4       	ldi	r23, 0x40	; 64
    1120:	80 ed       	ldi	r24, 0xD0	; 208
    1122:	94 e4       	ldi	r25, 0x44	; 68
    1124:	29 81       	ldd	r18, Y+1	; 0x01
    1126:	3a 81       	ldd	r19, Y+2	; 0x02
    1128:	4b 81       	ldd	r20, Y+3	; 0x03
    112a:	5c 81       	ldd	r21, Y+4	; 0x04
    112c:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__divsf3>
    1130:	dc 01       	movw	r26, r24
    1132:	cb 01       	movw	r24, r22
    1134:	bc 01       	movw	r22, r24
    1136:	cd 01       	movw	r24, r26
    1138:	20 e0       	ldi	r18, 0x00	; 0
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	40 e8       	ldi	r20, 0x80	; 128
    113e:	5f e3       	ldi	r21, 0x3F	; 63
    1140:	0e 94 2e 25 	call	0x4a5c	; 0x4a5c <__subsf3>
    1144:	dc 01       	movw	r26, r24
    1146:	cb 01       	movw	r24, r22
    1148:	bc 01       	movw	r22, r24
    114a:	cd 01       	movw	r24, r26
    114c:	20 e0       	ldi	r18, 0x00	; 0
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	48 e4       	ldi	r20, 0x48	; 72
    1152:	53 e4       	ldi	r21, 0x43	; 67
    1154:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__mulsf3>
    1158:	dc 01       	movw	r26, r24
    115a:	cb 01       	movw	r24, r22
    115c:	8d 83       	std	Y+5, r24	; 0x05
    115e:	9e 83       	std	Y+6, r25	; 0x06
    1160:	af 83       	std	Y+7, r26	; 0x07
    1162:	b8 87       	std	Y+8, r27	; 0x08

	if(resistance < 1000){
    1164:	6d 81       	ldd	r22, Y+5	; 0x05
    1166:	7e 81       	ldd	r23, Y+6	; 0x06
    1168:	8f 81       	ldd	r24, Y+7	; 0x07
    116a:	98 85       	ldd	r25, Y+8	; 0x08
    116c:	20 e0       	ldi	r18, 0x00	; 0
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	4a e7       	ldi	r20, 0x7A	; 122
    1172:	54 e4       	ldi	r21, 0x44	; 68
    1174:	0e 94 93 25 	call	0x4b26	; 0x4b26 <__cmpsf2>
    1178:	88 23       	and	r24, r24
    117a:	24 f4       	brge	.+8      	; 0x1184 <OHMMETER_getReading+0xda>
		*resUnit = OHMS;
    117c:	eb 85       	ldd	r30, Y+11	; 0x0b
    117e:	fc 85       	ldd	r31, Y+12	; 0x0c
    1180:	10 82       	st	Z, r1
    1182:	34 c1       	rjmp	.+616    	; 0x13ec <OHMMETER_getReading+0x342>
	}
	else if(resistance < 2000){
    1184:	6d 81       	ldd	r22, Y+5	; 0x05
    1186:	7e 81       	ldd	r23, Y+6	; 0x06
    1188:	8f 81       	ldd	r24, Y+7	; 0x07
    118a:	98 85       	ldd	r25, Y+8	; 0x08
    118c:	20 e0       	ldi	r18, 0x00	; 0
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	4a ef       	ldi	r20, 0xFA	; 250
    1192:	54 e4       	ldi	r21, 0x44	; 68
    1194:	0e 94 93 25 	call	0x4b26	; 0x4b26 <__cmpsf2>
    1198:	88 23       	and	r24, r24
    119a:	0c f0       	brlt	.+2      	; 0x119e <OHMMETER_getReading+0xf4>
    119c:	52 c0       	rjmp	.+164    	; 0x1242 <OHMMETER_getReading+0x198>
		*resUnit = K_OHMS;
    119e:	eb 85       	ldd	r30, Y+11	; 0x0b
    11a0:	fc 85       	ldd	r31, Y+12	; 0x0c
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	80 83       	st	Z, r24
		GPIO_setupPinDirection(OHMMETER_RES_1_PORT_ID, OHMMETER_RES_1_PIN_ID, PIN_INPUT);
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	60 e0       	ldi	r22, 0x00	; 0
    11aa:	40 e0       	ldi	r20, 0x00	; 0
    11ac:	0e 94 38 04 	call	0x870	; 0x870 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(OHMMETER_RES_2_PORT_ID, OHMMETER_RES_2_PIN_ID, PIN_OUTPUT);
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	61 e0       	ldi	r22, 0x01	; 1
    11b4:	41 e0       	ldi	r20, 0x01	; 1
    11b6:	0e 94 38 04 	call	0x870	; 0x870 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(OHMMETER_RES_3_PORT_ID, OHMMETER_RES_3_PIN_ID, PIN_INPUT);
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	62 e0       	ldi	r22, 0x02	; 2
    11be:	40 e0       	ldi	r20, 0x00	; 0
    11c0:	0e 94 38 04 	call	0x870	; 0x870 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(OHMMETER_RES_4_PORT_ID, OHMMETER_RES_4_PIN_ID, PIN_INPUT);
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	63 e0       	ldi	r22, 0x03	; 3
    11c8:	40 e0       	ldi	r20, 0x00	; 0
    11ca:	0e 94 38 04 	call	0x870	; 0x870 <GPIO_setupPinDirection>
		GPIO_writePin(OHMMETER_RES_2_PORT_ID, OHMMETER_RES_2_PIN_ID, LOGIC_LOW);
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	61 e0       	ldi	r22, 0x01	; 1
    11d2:	40 e0       	ldi	r20, 0x00	; 0
    11d4:	0e 94 23 05 	call	0xa46	; 0xa46 <GPIO_writePin>
		adc2 = ADS1015_readADC_SingleEnded(ads, OHMMETER_ADC_CHANNEL);
    11d8:	89 85       	ldd	r24, Y+9	; 0x09
    11da:	9a 85       	ldd	r25, Y+10	; 0x0a
    11dc:	62 e0       	ldi	r22, 0x02	; 2
    11de:	0e 94 34 1d 	call	0x3a68	; 0x3a68 <ADS1015_readADC_SingleEnded>
    11e2:	cc 01       	movw	r24, r24
    11e4:	a0 e0       	ldi	r26, 0x00	; 0
    11e6:	b0 e0       	ldi	r27, 0x00	; 0
    11e8:	bc 01       	movw	r22, r24
    11ea:	cd 01       	movw	r24, r26
    11ec:	0e 94 2b 26 	call	0x4c56	; 0x4c56 <__floatunsisf>
    11f0:	dc 01       	movw	r26, r24
    11f2:	cb 01       	movw	r24, r22
    11f4:	89 83       	std	Y+1, r24	; 0x01
    11f6:	9a 83       	std	Y+2, r25	; 0x02
    11f8:	ab 83       	std	Y+3, r26	; 0x03
    11fa:	bc 83       	std	Y+4, r27	; 0x04
		resistance = OHMMETER_RES_2_VALUE*((1666/adc2)-1);	}
    11fc:	60 e0       	ldi	r22, 0x00	; 0
    11fe:	70 e4       	ldi	r23, 0x40	; 64
    1200:	80 ed       	ldi	r24, 0xD0	; 208
    1202:	94 e4       	ldi	r25, 0x44	; 68
    1204:	29 81       	ldd	r18, Y+1	; 0x01
    1206:	3a 81       	ldd	r19, Y+2	; 0x02
    1208:	4b 81       	ldd	r20, Y+3	; 0x03
    120a:	5c 81       	ldd	r21, Y+4	; 0x04
    120c:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__divsf3>
    1210:	dc 01       	movw	r26, r24
    1212:	cb 01       	movw	r24, r22
    1214:	bc 01       	movw	r22, r24
    1216:	cd 01       	movw	r24, r26
    1218:	20 e0       	ldi	r18, 0x00	; 0
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	40 e8       	ldi	r20, 0x80	; 128
    121e:	5f e3       	ldi	r21, 0x3F	; 63
    1220:	0e 94 2e 25 	call	0x4a5c	; 0x4a5c <__subsf3>
    1224:	dc 01       	movw	r26, r24
    1226:	cb 01       	movw	r24, r22
    1228:	9c 01       	movw	r18, r24
    122a:	ad 01       	movw	r20, r26
    122c:	ca 01       	movw	r24, r20
    122e:	b9 01       	movw	r22, r18
    1230:	0e 94 2f 25 	call	0x4a5e	; 0x4a5e <__addsf3>
    1234:	dc 01       	movw	r26, r24
    1236:	cb 01       	movw	r24, r22
    1238:	8d 83       	std	Y+5, r24	; 0x05
    123a:	9e 83       	std	Y+6, r25	; 0x06
    123c:	af 83       	std	Y+7, r26	; 0x07
    123e:	b8 87       	std	Y+8, r27	; 0x08
    1240:	d5 c0       	rjmp	.+426    	; 0x13ec <OHMMETER_getReading+0x342>
	else if(resistance < 20000){
    1242:	6d 81       	ldd	r22, Y+5	; 0x05
    1244:	7e 81       	ldd	r23, Y+6	; 0x06
    1246:	8f 81       	ldd	r24, Y+7	; 0x07
    1248:	98 85       	ldd	r25, Y+8	; 0x08
    124a:	20 e0       	ldi	r18, 0x00	; 0
    124c:	30 e4       	ldi	r19, 0x40	; 64
    124e:	4c e9       	ldi	r20, 0x9C	; 156
    1250:	56 e4       	ldi	r21, 0x46	; 70
    1252:	0e 94 93 25 	call	0x4b26	; 0x4b26 <__cmpsf2>
    1256:	88 23       	and	r24, r24
    1258:	0c f0       	brlt	.+2      	; 0x125c <OHMMETER_getReading+0x1b2>
    125a:	54 c0       	rjmp	.+168    	; 0x1304 <OHMMETER_getReading+0x25a>
		*resUnit = K_OHMS;
    125c:	eb 85       	ldd	r30, Y+11	; 0x0b
    125e:	fc 85       	ldd	r31, Y+12	; 0x0c
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	80 83       	st	Z, r24
		GPIO_setupPinDirection(OHMMETER_RES_1_PORT_ID, OHMMETER_RES_1_PIN_ID, PIN_INPUT);
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	60 e0       	ldi	r22, 0x00	; 0
    1268:	40 e0       	ldi	r20, 0x00	; 0
    126a:	0e 94 38 04 	call	0x870	; 0x870 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(OHMMETER_RES_2_PORT_ID, OHMMETER_RES_2_PIN_ID, PIN_INPUT);
    126e:	81 e0       	ldi	r24, 0x01	; 1
    1270:	61 e0       	ldi	r22, 0x01	; 1
    1272:	40 e0       	ldi	r20, 0x00	; 0
    1274:	0e 94 38 04 	call	0x870	; 0x870 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(OHMMETER_RES_3_PORT_ID, OHMMETER_RES_3_PIN_ID, PIN_OUTPUT);
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	62 e0       	ldi	r22, 0x02	; 2
    127c:	41 e0       	ldi	r20, 0x01	; 1
    127e:	0e 94 38 04 	call	0x870	; 0x870 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(OHMMETER_RES_4_PORT_ID, OHMMETER_RES_4_PIN_ID, PIN_INPUT);
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	63 e0       	ldi	r22, 0x03	; 3
    1286:	40 e0       	ldi	r20, 0x00	; 0
    1288:	0e 94 38 04 	call	0x870	; 0x870 <GPIO_setupPinDirection>
		GPIO_writePin(OHMMETER_RES_3_PORT_ID, OHMMETER_RES_3_PIN_ID, LOGIC_LOW);
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	62 e0       	ldi	r22, 0x02	; 2
    1290:	40 e0       	ldi	r20, 0x00	; 0
    1292:	0e 94 23 05 	call	0xa46	; 0xa46 <GPIO_writePin>
		adc2 = ADS1015_readADC_SingleEnded(ads, OHMMETER_ADC_CHANNEL);
    1296:	89 85       	ldd	r24, Y+9	; 0x09
    1298:	9a 85       	ldd	r25, Y+10	; 0x0a
    129a:	62 e0       	ldi	r22, 0x02	; 2
    129c:	0e 94 34 1d 	call	0x3a68	; 0x3a68 <ADS1015_readADC_SingleEnded>
    12a0:	cc 01       	movw	r24, r24
    12a2:	a0 e0       	ldi	r26, 0x00	; 0
    12a4:	b0 e0       	ldi	r27, 0x00	; 0
    12a6:	bc 01       	movw	r22, r24
    12a8:	cd 01       	movw	r24, r26
    12aa:	0e 94 2b 26 	call	0x4c56	; 0x4c56 <__floatunsisf>
    12ae:	dc 01       	movw	r26, r24
    12b0:	cb 01       	movw	r24, r22
    12b2:	89 83       	std	Y+1, r24	; 0x01
    12b4:	9a 83       	std	Y+2, r25	; 0x02
    12b6:	ab 83       	std	Y+3, r26	; 0x03
    12b8:	bc 83       	std	Y+4, r27	; 0x04
		resistance = OHMMETER_RES_3_VALUE*((1666/adc2)-1);	}
    12ba:	60 e0       	ldi	r22, 0x00	; 0
    12bc:	70 e4       	ldi	r23, 0x40	; 64
    12be:	80 ed       	ldi	r24, 0xD0	; 208
    12c0:	94 e4       	ldi	r25, 0x44	; 68
    12c2:	29 81       	ldd	r18, Y+1	; 0x01
    12c4:	3a 81       	ldd	r19, Y+2	; 0x02
    12c6:	4b 81       	ldd	r20, Y+3	; 0x03
    12c8:	5c 81       	ldd	r21, Y+4	; 0x04
    12ca:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__divsf3>
    12ce:	dc 01       	movw	r26, r24
    12d0:	cb 01       	movw	r24, r22
    12d2:	bc 01       	movw	r22, r24
    12d4:	cd 01       	movw	r24, r26
    12d6:	20 e0       	ldi	r18, 0x00	; 0
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	40 e8       	ldi	r20, 0x80	; 128
    12dc:	5f e3       	ldi	r21, 0x3F	; 63
    12de:	0e 94 2e 25 	call	0x4a5c	; 0x4a5c <__subsf3>
    12e2:	dc 01       	movw	r26, r24
    12e4:	cb 01       	movw	r24, r22
    12e6:	bc 01       	movw	r22, r24
    12e8:	cd 01       	movw	r24, r26
    12ea:	20 e0       	ldi	r18, 0x00	; 0
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	40 ea       	ldi	r20, 0xA0	; 160
    12f0:	51 e4       	ldi	r21, 0x41	; 65
    12f2:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__mulsf3>
    12f6:	dc 01       	movw	r26, r24
    12f8:	cb 01       	movw	r24, r22
    12fa:	8d 83       	std	Y+5, r24	; 0x05
    12fc:	9e 83       	std	Y+6, r25	; 0x06
    12fe:	af 83       	std	Y+7, r26	; 0x07
    1300:	b8 87       	std	Y+8, r27	; 0x08
    1302:	74 c0       	rjmp	.+232    	; 0x13ec <OHMMETER_getReading+0x342>
	else{
		GPIO_setupPinDirection(OHMMETER_RES_1_PORT_ID, OHMMETER_RES_1_PIN_ID, PIN_INPUT);
    1304:	81 e0       	ldi	r24, 0x01	; 1
    1306:	60 e0       	ldi	r22, 0x00	; 0
    1308:	40 e0       	ldi	r20, 0x00	; 0
    130a:	0e 94 38 04 	call	0x870	; 0x870 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(OHMMETER_RES_2_PORT_ID, OHMMETER_RES_2_PIN_ID, PIN_INPUT);
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	61 e0       	ldi	r22, 0x01	; 1
    1312:	40 e0       	ldi	r20, 0x00	; 0
    1314:	0e 94 38 04 	call	0x870	; 0x870 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(OHMMETER_RES_3_PORT_ID, OHMMETER_RES_3_PIN_ID, PIN_INPUT);
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	62 e0       	ldi	r22, 0x02	; 2
    131c:	40 e0       	ldi	r20, 0x00	; 0
    131e:	0e 94 38 04 	call	0x870	; 0x870 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(OHMMETER_RES_4_PORT_ID, OHMMETER_RES_4_PIN_ID, PIN_OUTPUT);
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	63 e0       	ldi	r22, 0x03	; 3
    1326:	41 e0       	ldi	r20, 0x01	; 1
    1328:	0e 94 38 04 	call	0x870	; 0x870 <GPIO_setupPinDirection>
		GPIO_writePin(OHMMETER_RES_4_PORT_ID, OHMMETER_RES_4_PIN_ID, LOGIC_LOW);
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	63 e0       	ldi	r22, 0x03	; 3
    1330:	40 e0       	ldi	r20, 0x00	; 0
    1332:	0e 94 23 05 	call	0xa46	; 0xa46 <GPIO_writePin>
		adc2 = ADS1015_readADC_SingleEnded(ads, OHMMETER_ADC_CHANNEL);
    1336:	89 85       	ldd	r24, Y+9	; 0x09
    1338:	9a 85       	ldd	r25, Y+10	; 0x0a
    133a:	62 e0       	ldi	r22, 0x02	; 2
    133c:	0e 94 34 1d 	call	0x3a68	; 0x3a68 <ADS1015_readADC_SingleEnded>
    1340:	cc 01       	movw	r24, r24
    1342:	a0 e0       	ldi	r26, 0x00	; 0
    1344:	b0 e0       	ldi	r27, 0x00	; 0
    1346:	bc 01       	movw	r22, r24
    1348:	cd 01       	movw	r24, r26
    134a:	0e 94 2b 26 	call	0x4c56	; 0x4c56 <__floatunsisf>
    134e:	dc 01       	movw	r26, r24
    1350:	cb 01       	movw	r24, r22
    1352:	89 83       	std	Y+1, r24	; 0x01
    1354:	9a 83       	std	Y+2, r25	; 0x02
    1356:	ab 83       	std	Y+3, r26	; 0x03
    1358:	bc 83       	std	Y+4, r27	; 0x04
		resistance = OHMMETER_RES_4_VALUE*((1666/adc2)-1);		if(resistance > 1000){
    135a:	60 e0       	ldi	r22, 0x00	; 0
    135c:	70 e4       	ldi	r23, 0x40	; 64
    135e:	80 ed       	ldi	r24, 0xD0	; 208
    1360:	94 e4       	ldi	r25, 0x44	; 68
    1362:	29 81       	ldd	r18, Y+1	; 0x01
    1364:	3a 81       	ldd	r19, Y+2	; 0x02
    1366:	4b 81       	ldd	r20, Y+3	; 0x03
    1368:	5c 81       	ldd	r21, Y+4	; 0x04
    136a:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__divsf3>
    136e:	dc 01       	movw	r26, r24
    1370:	cb 01       	movw	r24, r22
    1372:	bc 01       	movw	r22, r24
    1374:	cd 01       	movw	r24, r26
    1376:	20 e0       	ldi	r18, 0x00	; 0
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	40 e8       	ldi	r20, 0x80	; 128
    137c:	5f e3       	ldi	r21, 0x3F	; 63
    137e:	0e 94 2e 25 	call	0x4a5c	; 0x4a5c <__subsf3>
    1382:	dc 01       	movw	r26, r24
    1384:	cb 01       	movw	r24, r22
    1386:	bc 01       	movw	r22, r24
    1388:	cd 01       	movw	r24, r26
    138a:	20 e0       	ldi	r18, 0x00	; 0
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	4b ee       	ldi	r20, 0xEB	; 235
    1390:	53 e4       	ldi	r21, 0x43	; 67
    1392:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__mulsf3>
    1396:	dc 01       	movw	r26, r24
    1398:	cb 01       	movw	r24, r22
    139a:	8d 83       	std	Y+5, r24	; 0x05
    139c:	9e 83       	std	Y+6, r25	; 0x06
    139e:	af 83       	std	Y+7, r26	; 0x07
    13a0:	b8 87       	std	Y+8, r27	; 0x08
    13a2:	6d 81       	ldd	r22, Y+5	; 0x05
    13a4:	7e 81       	ldd	r23, Y+6	; 0x06
    13a6:	8f 81       	ldd	r24, Y+7	; 0x07
    13a8:	98 85       	ldd	r25, Y+8	; 0x08
    13aa:	20 e0       	ldi	r18, 0x00	; 0
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	4a e7       	ldi	r20, 0x7A	; 122
    13b0:	54 e4       	ldi	r21, 0x44	; 68
    13b2:	0e 94 dd 26 	call	0x4dba	; 0x4dba <__gesf2>
    13b6:	18 16       	cp	r1, r24
    13b8:	ac f4       	brge	.+42     	; 0x13e4 <OHMMETER_getReading+0x33a>
			resistance /= 1000;
    13ba:	6d 81       	ldd	r22, Y+5	; 0x05
    13bc:	7e 81       	ldd	r23, Y+6	; 0x06
    13be:	8f 81       	ldd	r24, Y+7	; 0x07
    13c0:	98 85       	ldd	r25, Y+8	; 0x08
    13c2:	20 e0       	ldi	r18, 0x00	; 0
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	4a e7       	ldi	r20, 0x7A	; 122
    13c8:	54 e4       	ldi	r21, 0x44	; 68
    13ca:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__divsf3>
    13ce:	dc 01       	movw	r26, r24
    13d0:	cb 01       	movw	r24, r22
    13d2:	8d 83       	std	Y+5, r24	; 0x05
    13d4:	9e 83       	std	Y+6, r25	; 0x06
    13d6:	af 83       	std	Y+7, r26	; 0x07
    13d8:	b8 87       	std	Y+8, r27	; 0x08
			*resUnit = M_OHMS;
    13da:	eb 85       	ldd	r30, Y+11	; 0x0b
    13dc:	fc 85       	ldd	r31, Y+12	; 0x0c
    13de:	82 e0       	ldi	r24, 0x02	; 2
    13e0:	80 83       	st	Z, r24
    13e2:	04 c0       	rjmp	.+8      	; 0x13ec <OHMMETER_getReading+0x342>
		}
		else{
			*resUnit = K_OHMS;
    13e4:	eb 85       	ldd	r30, Y+11	; 0x0b
    13e6:	fc 85       	ldd	r31, Y+12	; 0x0c
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	80 83       	st	Z, r24
		}
	}

	return resistance;
    13ec:	8d 81       	ldd	r24, Y+5	; 0x05
    13ee:	9e 81       	ldd	r25, Y+6	; 0x06
    13f0:	af 81       	ldd	r26, Y+7	; 0x07
    13f2:	b8 85       	ldd	r27, Y+8	; 0x08
}
    13f4:	bc 01       	movw	r22, r24
    13f6:	cd 01       	movw	r24, r26
    13f8:	2c 96       	adiw	r28, 0x0c	; 12
    13fa:	0f b6       	in	r0, 0x3f	; 63
    13fc:	f8 94       	cli
    13fe:	de bf       	out	0x3e, r29	; 62
    1400:	0f be       	out	0x3f, r0	; 63
    1402:	cd bf       	out	0x3d, r28	; 61
    1404:	cf 91       	pop	r28
    1406:	df 91       	pop	r29
    1408:	08 95       	ret

0000140a <MODE_SELECTOR_run>:
 */


#include "mode_selector.h"

void MODE_SELECTOR_run(Mode_type * currentMode, Mode_type * previousMode){
    140a:	df 93       	push	r29
    140c:	cf 93       	push	r28
    140e:	cd b7       	in	r28, 0x3d	; 61
    1410:	de b7       	in	r29, 0x3e	; 62
    1412:	28 97       	sbiw	r28, 0x08	; 8
    1414:	0f b6       	in	r0, 0x3f	; 63
    1416:	f8 94       	cli
    1418:	de bf       	out	0x3e, r29	; 62
    141a:	0f be       	out	0x3f, r0	; 63
    141c:	cd bf       	out	0x3d, r28	; 61
    141e:	9c 83       	std	Y+4, r25	; 0x04
    1420:	8b 83       	std	Y+3, r24	; 0x03
    1422:	7e 83       	std	Y+6, r23	; 0x06
    1424:	6d 83       	std	Y+5, r22	; 0x05
	uint16 adc_value;
	adc_value = ADC_readChannel(0);
    1426:	80 e0       	ldi	r24, 0x00	; 0
    1428:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <ADC_readChannel>
    142c:	9a 83       	std	Y+2, r25	; 0x02
    142e:	89 83       	std	Y+1, r24	; 0x01
	if(adc_value > 900){
    1430:	89 81       	ldd	r24, Y+1	; 0x01
    1432:	9a 81       	ldd	r25, Y+2	; 0x02
    1434:	23 e0       	ldi	r18, 0x03	; 3
    1436:	85 38       	cpi	r24, 0x85	; 133
    1438:	92 07       	cpc	r25, r18
    143a:	20 f0       	brcs	.+8      	; 0x1444 <MODE_SELECTOR_run+0x3a>
		*currentMode = OHMMETER_MODE;
    143c:	eb 81       	ldd	r30, Y+3	; 0x03
    143e:	fc 81       	ldd	r31, Y+4	; 0x04
    1440:	10 82       	st	Z, r1
    1442:	25 c0       	rjmp	.+74     	; 0x148e <MODE_SELECTOR_run+0x84>

	}
	else if(adc_value > 700) {
    1444:	89 81       	ldd	r24, Y+1	; 0x01
    1446:	9a 81       	ldd	r25, Y+2	; 0x02
    1448:	32 e0       	ldi	r19, 0x02	; 2
    144a:	8d 3b       	cpi	r24, 0xBD	; 189
    144c:	93 07       	cpc	r25, r19
    144e:	28 f0       	brcs	.+10     	; 0x145a <MODE_SELECTOR_run+0x50>
		*currentMode = VOLTMETER_MODE;
    1450:	eb 81       	ldd	r30, Y+3	; 0x03
    1452:	fc 81       	ldd	r31, Y+4	; 0x04
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	80 83       	st	Z, r24
    1458:	1a c0       	rjmp	.+52     	; 0x148e <MODE_SELECTOR_run+0x84>

	}
	else if (adc_value > 500){
    145a:	89 81       	ldd	r24, Y+1	; 0x01
    145c:	9a 81       	ldd	r25, Y+2	; 0x02
    145e:	21 e0       	ldi	r18, 0x01	; 1
    1460:	85 3f       	cpi	r24, 0xF5	; 245
    1462:	92 07       	cpc	r25, r18
    1464:	28 f0       	brcs	.+10     	; 0x1470 <MODE_SELECTOR_run+0x66>
		*currentMode = CAPMETER_MODE;
    1466:	eb 81       	ldd	r30, Y+3	; 0x03
    1468:	fc 81       	ldd	r31, Y+4	; 0x04
    146a:	82 e0       	ldi	r24, 0x02	; 2
    146c:	80 83       	st	Z, r24
    146e:	0f c0       	rjmp	.+30     	; 0x148e <MODE_SELECTOR_run+0x84>

	}
	else if (adc_value > 300){
    1470:	89 81       	ldd	r24, Y+1	; 0x01
    1472:	9a 81       	ldd	r25, Y+2	; 0x02
    1474:	31 e0       	ldi	r19, 0x01	; 1
    1476:	8d 32       	cpi	r24, 0x2D	; 45
    1478:	93 07       	cpc	r25, r19
    147a:	28 f0       	brcs	.+10     	; 0x1486 <MODE_SELECTOR_run+0x7c>
		*currentMode = INDUCTOMETER_MODE;
    147c:	eb 81       	ldd	r30, Y+3	; 0x03
    147e:	fc 81       	ldd	r31, Y+4	; 0x04
    1480:	83 e0       	ldi	r24, 0x03	; 3
    1482:	80 83       	st	Z, r24
    1484:	04 c0       	rjmp	.+8      	; 0x148e <MODE_SELECTOR_run+0x84>

	}
	else{
		*currentMode = CURRENTMETER_MODE;
    1486:	eb 81       	ldd	r30, Y+3	; 0x03
    1488:	fc 81       	ldd	r31, Y+4	; 0x04
    148a:	84 e0       	ldi	r24, 0x04	; 4
    148c:	80 83       	st	Z, r24

	}

	if(*currentMode != *previousMode){
    148e:	eb 81       	ldd	r30, Y+3	; 0x03
    1490:	fc 81       	ldd	r31, Y+4	; 0x04
    1492:	90 81       	ld	r25, Z
    1494:	ed 81       	ldd	r30, Y+5	; 0x05
    1496:	fe 81       	ldd	r31, Y+6	; 0x06
    1498:	80 81       	ld	r24, Z
    149a:	98 17       	cp	r25, r24
    149c:	09 f4       	brne	.+2      	; 0x14a0 <MODE_SELECTOR_run+0x96>
    149e:	46 c0       	rjmp	.+140    	; 0x152c <MODE_SELECTOR_run+0x122>
		*previousMode = *currentMode;
    14a0:	eb 81       	ldd	r30, Y+3	; 0x03
    14a2:	fc 81       	ldd	r31, Y+4	; 0x04
    14a4:	80 81       	ld	r24, Z
    14a6:	ed 81       	ldd	r30, Y+5	; 0x05
    14a8:	fe 81       	ldd	r31, Y+6	; 0x06
    14aa:	80 83       	st	Z, r24
		LCD_clearScreen();
    14ac:	0e 94 14 15 	call	0x2a28	; 0x2a28 <LCD_clearScreen>
		switch(*currentMode){
    14b0:	eb 81       	ldd	r30, Y+3	; 0x03
    14b2:	fc 81       	ldd	r31, Y+4	; 0x04
    14b4:	80 81       	ld	r24, Z
    14b6:	28 2f       	mov	r18, r24
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	38 87       	std	Y+8, r19	; 0x08
    14bc:	2f 83       	std	Y+7, r18	; 0x07
    14be:	8f 81       	ldd	r24, Y+7	; 0x07
    14c0:	98 85       	ldd	r25, Y+8	; 0x08
    14c2:	82 30       	cpi	r24, 0x02	; 2
    14c4:	91 05       	cpc	r25, r1
    14c6:	21 f1       	breq	.+72     	; 0x1510 <MODE_SELECTOR_run+0x106>
    14c8:	2f 81       	ldd	r18, Y+7	; 0x07
    14ca:	38 85       	ldd	r19, Y+8	; 0x08
    14cc:	23 30       	cpi	r18, 0x03	; 3
    14ce:	31 05       	cpc	r19, r1
    14d0:	54 f4       	brge	.+20     	; 0x14e6 <MODE_SELECTOR_run+0xdc>
    14d2:	8f 81       	ldd	r24, Y+7	; 0x07
    14d4:	98 85       	ldd	r25, Y+8	; 0x08
    14d6:	00 97       	sbiw	r24, 0x00	; 0
    14d8:	89 f0       	breq	.+34     	; 0x14fc <MODE_SELECTOR_run+0xf2>
    14da:	2f 81       	ldd	r18, Y+7	; 0x07
    14dc:	38 85       	ldd	r19, Y+8	; 0x08
    14de:	21 30       	cpi	r18, 0x01	; 1
    14e0:	31 05       	cpc	r19, r1
    14e2:	89 f0       	breq	.+34     	; 0x1506 <MODE_SELECTOR_run+0xfc>
    14e4:	23 c0       	rjmp	.+70     	; 0x152c <MODE_SELECTOR_run+0x122>
    14e6:	8f 81       	ldd	r24, Y+7	; 0x07
    14e8:	98 85       	ldd	r25, Y+8	; 0x08
    14ea:	83 30       	cpi	r24, 0x03	; 3
    14ec:	91 05       	cpc	r25, r1
    14ee:	a9 f0       	breq	.+42     	; 0x151a <MODE_SELECTOR_run+0x110>
    14f0:	2f 81       	ldd	r18, Y+7	; 0x07
    14f2:	38 85       	ldd	r19, Y+8	; 0x08
    14f4:	24 30       	cpi	r18, 0x04	; 4
    14f6:	31 05       	cpc	r19, r1
    14f8:	a9 f0       	breq	.+42     	; 0x1524 <MODE_SELECTOR_run+0x11a>
    14fa:	18 c0       	rjmp	.+48     	; 0x152c <MODE_SELECTOR_run+0x122>
		case OHMMETER_MODE:
			LCD_displayString("   Resistance");
    14fc:	80 e6       	ldi	r24, 0x60	; 96
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	0e 94 90 14 	call	0x2920	; 0x2920 <LCD_displayString>
    1504:	13 c0       	rjmp	.+38     	; 0x152c <MODE_SELECTOR_run+0x122>
			break;
		case VOLTMETER_MODE:
			LCD_displayString("    Voltage");
    1506:	8e e6       	ldi	r24, 0x6E	; 110
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	0e 94 90 14 	call	0x2920	; 0x2920 <LCD_displayString>
    150e:	0e c0       	rjmp	.+28     	; 0x152c <MODE_SELECTOR_run+0x122>
			break;
		case CAPMETER_MODE:
			LCD_displayString("   Capacitance");
    1510:	8a e7       	ldi	r24, 0x7A	; 122
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	0e 94 90 14 	call	0x2920	; 0x2920 <LCD_displayString>
    1518:	09 c0       	rjmp	.+18     	; 0x152c <MODE_SELECTOR_run+0x122>
			break;
		case INDUCTOMETER_MODE:
			LCD_displayString("   Inductance");
    151a:	89 e8       	ldi	r24, 0x89	; 137
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	0e 94 90 14 	call	0x2920	; 0x2920 <LCD_displayString>
    1522:	04 c0       	rjmp	.+8      	; 0x152c <MODE_SELECTOR_run+0x122>
			break;
		case CURRENTMETER_MODE:
			LCD_displayString("     Current");
    1524:	87 e9       	ldi	r24, 0x97	; 151
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	0e 94 90 14 	call	0x2920	; 0x2920 <LCD_displayString>
		case NO_MODE:
			/* Do Nothing .. */
			break;
		}
	}
}
    152c:	28 96       	adiw	r28, 0x08	; 8
    152e:	0f b6       	in	r0, 0x3f	; 63
    1530:	f8 94       	cli
    1532:	de bf       	out	0x3e, r29	; 62
    1534:	0f be       	out	0x3f, r0	; 63
    1536:	cd bf       	out	0x3d, r28	; 61
    1538:	cf 91       	pop	r28
    153a:	df 91       	pop	r29
    153c:	08 95       	ret

0000153e <LM35_getTemperature>:
/*
 * Description :
 -> Function responsible for calculate the temperature from the ADC digital value.
 */
uint8 LM35_getTemperature(void)
{
    153e:	df 93       	push	r29
    1540:	cf 93       	push	r28
    1542:	00 d0       	rcall	.+0      	; 0x1544 <LM35_getTemperature+0x6>
    1544:	0f 92       	push	r0
    1546:	cd b7       	in	r28, 0x3d	; 61
    1548:	de b7       	in	r29, 0x3e	; 62
	uint8 temp_value = 0;
    154a:	1b 82       	std	Y+3, r1	; 0x03

	uint16 adc_value = 0;
    154c:	1a 82       	std	Y+2, r1	; 0x02
    154e:	19 82       	std	Y+1, r1	; 0x01

	/* Read ADC channel where the temperature sensor is connected */
	adc_value = ADC_readChannel(SENSOR_CHANNEL_ID);
    1550:	82 e0       	ldi	r24, 0x02	; 2
    1552:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <ADC_readChannel>
    1556:	9a 83       	std	Y+2, r25	; 0x02
    1558:	89 83       	std	Y+1, r24	; 0x01

	/* Calculate the temperature from the ADC value*/
	temp_value = (uint8)(((float32)adc_value*SENSOR_MAX_TEMPERATURE*ADC_RefVoltValue)/(ADC_MAXIMUM_VALUE*SENSOR_MAX_VOLT_VALUE));
    155a:	89 81       	ldd	r24, Y+1	; 0x01
    155c:	9a 81       	ldd	r25, Y+2	; 0x02
    155e:	cc 01       	movw	r24, r24
    1560:	a0 e0       	ldi	r26, 0x00	; 0
    1562:	b0 e0       	ldi	r27, 0x00	; 0
    1564:	bc 01       	movw	r22, r24
    1566:	cd 01       	movw	r24, r26
    1568:	0e 94 2b 26 	call	0x4c56	; 0x4c56 <__floatunsisf>
    156c:	dc 01       	movw	r26, r24
    156e:	cb 01       	movw	r24, r22
    1570:	bc 01       	movw	r22, r24
    1572:	cd 01       	movw	r24, r26
    1574:	20 e0       	ldi	r18, 0x00	; 0
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	46 e1       	ldi	r20, 0x16	; 22
    157a:	53 e4       	ldi	r21, 0x43	; 67
    157c:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__mulsf3>
    1580:	dc 01       	movw	r26, r24
    1582:	cb 01       	movw	r24, r22
    1584:	20 91 7d 01 	lds	r18, 0x017D
    1588:	30 91 7e 01 	lds	r19, 0x017E
    158c:	40 91 7f 01 	lds	r20, 0x017F
    1590:	50 91 80 01 	lds	r21, 0x0180
    1594:	bc 01       	movw	r22, r24
    1596:	cd 01       	movw	r24, r26
    1598:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__mulsf3>
    159c:	dc 01       	movw	r26, r24
    159e:	cb 01       	movw	r24, r22
    15a0:	bc 01       	movw	r22, r24
    15a2:	cd 01       	movw	r24, r26
    15a4:	20 e0       	ldi	r18, 0x00	; 0
    15a6:	30 ed       	ldi	r19, 0xD0	; 208
    15a8:	4f eb       	ldi	r20, 0xBF	; 191
    15aa:	54 e4       	ldi	r21, 0x44	; 68
    15ac:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__divsf3>
    15b0:	dc 01       	movw	r26, r24
    15b2:	cb 01       	movw	r24, r22
    15b4:	bc 01       	movw	r22, r24
    15b6:	cd 01       	movw	r24, r26
    15b8:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <__fixunssfsi>
    15bc:	dc 01       	movw	r26, r24
    15be:	cb 01       	movw	r24, r22
    15c0:	8b 83       	std	Y+3, r24	; 0x03

	return temp_value;
    15c2:	8b 81       	ldd	r24, Y+3	; 0x03
}
    15c4:	0f 90       	pop	r0
    15c6:	0f 90       	pop	r0
    15c8:	0f 90       	pop	r0
    15ca:	cf 91       	pop	r28
    15cc:	df 91       	pop	r29
    15ce:	08 95       	ret

000015d0 <LCD_init>:
 -> Initialize the LCD:
  	  1. Setup the LCD pins directions by use the GPIO driver.
  	  2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    15d0:	df 93       	push	r29
    15d2:	cf 93       	push	r28
    15d4:	cd b7       	in	r28, 0x3d	; 61
    15d6:	de b7       	in	r29, 0x3e	; 62
    15d8:	2e 97       	sbiw	r28, 0x0e	; 14
    15da:	0f b6       	in	r0, 0x3f	; 63
    15dc:	f8 94       	cli
    15de:	de bf       	out	0x3e, r29	; 62
    15e0:	0f be       	out	0x3f, r0	; 63
    15e2:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    15e4:	82 e0       	ldi	r24, 0x02	; 2
    15e6:	66 e0       	ldi	r22, 0x06	; 6
    15e8:	41 e0       	ldi	r20, 0x01	; 1
    15ea:	0e 94 38 04 	call	0x870	; 0x870 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    15ee:	82 e0       	ldi	r24, 0x02	; 2
    15f0:	67 e0       	ldi	r22, 0x07	; 7
    15f2:	41 e0       	ldi	r20, 0x01	; 1
    15f4:	0e 94 38 04 	call	0x870	; 0x870 <GPIO_setupPinDirection>
    15f8:	80 e0       	ldi	r24, 0x00	; 0
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	a0 ea       	ldi	r26, 0xA0	; 160
    15fe:	b1 e4       	ldi	r27, 0x41	; 65
    1600:	8b 87       	std	Y+11, r24	; 0x0b
    1602:	9c 87       	std	Y+12, r25	; 0x0c
    1604:	ad 87       	std	Y+13, r26	; 0x0d
    1606:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1608:	6b 85       	ldd	r22, Y+11	; 0x0b
    160a:	7c 85       	ldd	r23, Y+12	; 0x0c
    160c:	8d 85       	ldd	r24, Y+13	; 0x0d
    160e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1610:	20 e0       	ldi	r18, 0x00	; 0
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	4a e7       	ldi	r20, 0x7A	; 122
    1616:	55 e4       	ldi	r21, 0x45	; 69
    1618:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__mulsf3>
    161c:	dc 01       	movw	r26, r24
    161e:	cb 01       	movw	r24, r22
    1620:	8f 83       	std	Y+7, r24	; 0x07
    1622:	98 87       	std	Y+8, r25	; 0x08
    1624:	a9 87       	std	Y+9, r26	; 0x09
    1626:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1628:	6f 81       	ldd	r22, Y+7	; 0x07
    162a:	78 85       	ldd	r23, Y+8	; 0x08
    162c:	89 85       	ldd	r24, Y+9	; 0x09
    162e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1630:	20 e0       	ldi	r18, 0x00	; 0
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	40 e8       	ldi	r20, 0x80	; 128
    1636:	5f e3       	ldi	r21, 0x3F	; 63
    1638:	0e 94 93 25 	call	0x4b26	; 0x4b26 <__cmpsf2>
    163c:	88 23       	and	r24, r24
    163e:	2c f4       	brge	.+10     	; 0x164a <LCD_init+0x7a>
		__ticks = 1;
    1640:	81 e0       	ldi	r24, 0x01	; 1
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	9e 83       	std	Y+6, r25	; 0x06
    1646:	8d 83       	std	Y+5, r24	; 0x05
    1648:	3f c0       	rjmp	.+126    	; 0x16c8 <LCD_init+0xf8>
	else if (__tmp > 65535)
    164a:	6f 81       	ldd	r22, Y+7	; 0x07
    164c:	78 85       	ldd	r23, Y+8	; 0x08
    164e:	89 85       	ldd	r24, Y+9	; 0x09
    1650:	9a 85       	ldd	r25, Y+10	; 0x0a
    1652:	20 e0       	ldi	r18, 0x00	; 0
    1654:	3f ef       	ldi	r19, 0xFF	; 255
    1656:	4f e7       	ldi	r20, 0x7F	; 127
    1658:	57 e4       	ldi	r21, 0x47	; 71
    165a:	0e 94 dd 26 	call	0x4dba	; 0x4dba <__gesf2>
    165e:	18 16       	cp	r1, r24
    1660:	4c f5       	brge	.+82     	; 0x16b4 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1662:	6b 85       	ldd	r22, Y+11	; 0x0b
    1664:	7c 85       	ldd	r23, Y+12	; 0x0c
    1666:	8d 85       	ldd	r24, Y+13	; 0x0d
    1668:	9e 85       	ldd	r25, Y+14	; 0x0e
    166a:	20 e0       	ldi	r18, 0x00	; 0
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	40 e2       	ldi	r20, 0x20	; 32
    1670:	51 e4       	ldi	r21, 0x41	; 65
    1672:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__mulsf3>
    1676:	dc 01       	movw	r26, r24
    1678:	cb 01       	movw	r24, r22
    167a:	bc 01       	movw	r22, r24
    167c:	cd 01       	movw	r24, r26
    167e:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <__fixunssfsi>
    1682:	dc 01       	movw	r26, r24
    1684:	cb 01       	movw	r24, r22
    1686:	9e 83       	std	Y+6, r25	; 0x06
    1688:	8d 83       	std	Y+5, r24	; 0x05
    168a:	0f c0       	rjmp	.+30     	; 0x16aa <LCD_init+0xda>
    168c:	80 e9       	ldi	r24, 0x90	; 144
    168e:	91 e0       	ldi	r25, 0x01	; 1
    1690:	9c 83       	std	Y+4, r25	; 0x04
    1692:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1694:	8b 81       	ldd	r24, Y+3	; 0x03
    1696:	9c 81       	ldd	r25, Y+4	; 0x04
    1698:	01 97       	sbiw	r24, 0x01	; 1
    169a:	f1 f7       	brne	.-4      	; 0x1698 <LCD_init+0xc8>
    169c:	9c 83       	std	Y+4, r25	; 0x04
    169e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16a0:	8d 81       	ldd	r24, Y+5	; 0x05
    16a2:	9e 81       	ldd	r25, Y+6	; 0x06
    16a4:	01 97       	sbiw	r24, 0x01	; 1
    16a6:	9e 83       	std	Y+6, r25	; 0x06
    16a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16aa:	8d 81       	ldd	r24, Y+5	; 0x05
    16ac:	9e 81       	ldd	r25, Y+6	; 0x06
    16ae:	00 97       	sbiw	r24, 0x00	; 0
    16b0:	69 f7       	brne	.-38     	; 0x168c <LCD_init+0xbc>
    16b2:	14 c0       	rjmp	.+40     	; 0x16dc <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16b4:	6f 81       	ldd	r22, Y+7	; 0x07
    16b6:	78 85       	ldd	r23, Y+8	; 0x08
    16b8:	89 85       	ldd	r24, Y+9	; 0x09
    16ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    16bc:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <__fixunssfsi>
    16c0:	dc 01       	movw	r26, r24
    16c2:	cb 01       	movw	r24, r22
    16c4:	9e 83       	std	Y+6, r25	; 0x06
    16c6:	8d 83       	std	Y+5, r24	; 0x05
    16c8:	8d 81       	ldd	r24, Y+5	; 0x05
    16ca:	9e 81       	ldd	r25, Y+6	; 0x06
    16cc:	9a 83       	std	Y+2, r25	; 0x02
    16ce:	89 83       	std	Y+1, r24	; 0x01
    16d0:	89 81       	ldd	r24, Y+1	; 0x01
    16d2:	9a 81       	ldd	r25, Y+2	; 0x02
    16d4:	01 97       	sbiw	r24, 0x01	; 1
    16d6:	f1 f7       	brne	.-4      	; 0x16d4 <LCD_init+0x104>
    16d8:	9a 83       	std	Y+2, r25	; 0x02
    16da:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    16dc:	82 e0       	ldi	r24, 0x02	; 2
    16de:	62 e0       	ldi	r22, 0x02	; 2
    16e0:	41 e0       	ldi	r20, 0x01	; 1
    16e2:	0e 94 38 04 	call	0x870	; 0x870 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    16e6:	82 e0       	ldi	r24, 0x02	; 2
    16e8:	63 e0       	ldi	r22, 0x03	; 3
    16ea:	41 e0       	ldi	r20, 0x01	; 1
    16ec:	0e 94 38 04 	call	0x870	; 0x870 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    16f0:	82 e0       	ldi	r24, 0x02	; 2
    16f2:	64 e0       	ldi	r22, 0x04	; 4
    16f4:	41 e0       	ldi	r20, 0x01	; 1
    16f6:	0e 94 38 04 	call	0x870	; 0x870 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    16fa:	82 e0       	ldi	r24, 0x02	; 2
    16fc:	65 e0       	ldi	r22, 0x05	; 5
    16fe:	41 e0       	ldi	r20, 0x01	; 1
    1700:	0e 94 38 04 	call	0x870	; 0x870 <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    1704:	83 e3       	ldi	r24, 0x33	; 51
    1706:	0e 94 9a 0b 	call	0x1734	; 0x1734 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    170a:	82 e3       	ldi	r24, 0x32	; 50
    170c:	0e 94 9a 0b 	call	0x1734	; 0x1734 <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    1710:	88 e2       	ldi	r24, 0x28	; 40
    1712:	0e 94 9a 0b 	call	0x1734	; 0x1734 <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1716:	8c e0       	ldi	r24, 0x0C	; 12
    1718:	0e 94 9a 0b 	call	0x1734	; 0x1734 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	0e 94 9a 0b 	call	0x1734	; 0x1734 <LCD_sendCommand>
}
    1722:	2e 96       	adiw	r28, 0x0e	; 14
    1724:	0f b6       	in	r0, 0x3f	; 63
    1726:	f8 94       	cli
    1728:	de bf       	out	0x3e, r29	; 62
    172a:	0f be       	out	0x3f, r0	; 63
    172c:	cd bf       	out	0x3d, r28	; 61
    172e:	cf 91       	pop	r28
    1730:	df 91       	pop	r29
    1732:	08 95       	ret

00001734 <LCD_sendCommand>:
/*
 * Description :
 -> Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1734:	0f 93       	push	r16
    1736:	1f 93       	push	r17
    1738:	df 93       	push	r29
    173a:	cf 93       	push	r28
    173c:	cd b7       	in	r28, 0x3d	; 61
    173e:	de b7       	in	r29, 0x3e	; 62
    1740:	c3 56       	subi	r28, 0x63	; 99
    1742:	d0 40       	sbci	r29, 0x00	; 0
    1744:	0f b6       	in	r0, 0x3f	; 63
    1746:	f8 94       	cli
    1748:	de bf       	out	0x3e, r29	; 62
    174a:	0f be       	out	0x3f, r0	; 63
    174c:	cd bf       	out	0x3d, r28	; 61
    174e:	fe 01       	movw	r30, r28
    1750:	ed 59       	subi	r30, 0x9D	; 157
    1752:	ff 4f       	sbci	r31, 0xFF	; 255
    1754:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1756:	82 e0       	ldi	r24, 0x02	; 2
    1758:	66 e0       	ldi	r22, 0x06	; 6
    175a:	40 e0       	ldi	r20, 0x00	; 0
    175c:	0e 94 23 05 	call	0xa46	; 0xa46 <GPIO_writePin>
    1760:	fe 01       	movw	r30, r28
    1762:	e1 5a       	subi	r30, 0xA1	; 161
    1764:	ff 4f       	sbci	r31, 0xFF	; 255
    1766:	80 e0       	ldi	r24, 0x00	; 0
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	a0 e8       	ldi	r26, 0x80	; 128
    176c:	bf e3       	ldi	r27, 0x3F	; 63
    176e:	80 83       	st	Z, r24
    1770:	91 83       	std	Z+1, r25	; 0x01
    1772:	a2 83       	std	Z+2, r26	; 0x02
    1774:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1776:	8e 01       	movw	r16, r28
    1778:	05 5a       	subi	r16, 0xA5	; 165
    177a:	1f 4f       	sbci	r17, 0xFF	; 255
    177c:	fe 01       	movw	r30, r28
    177e:	e1 5a       	subi	r30, 0xA1	; 161
    1780:	ff 4f       	sbci	r31, 0xFF	; 255
    1782:	60 81       	ld	r22, Z
    1784:	71 81       	ldd	r23, Z+1	; 0x01
    1786:	82 81       	ldd	r24, Z+2	; 0x02
    1788:	93 81       	ldd	r25, Z+3	; 0x03
    178a:	20 e0       	ldi	r18, 0x00	; 0
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	4a e7       	ldi	r20, 0x7A	; 122
    1790:	55 e4       	ldi	r21, 0x45	; 69
    1792:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__mulsf3>
    1796:	dc 01       	movw	r26, r24
    1798:	cb 01       	movw	r24, r22
    179a:	f8 01       	movw	r30, r16
    179c:	80 83       	st	Z, r24
    179e:	91 83       	std	Z+1, r25	; 0x01
    17a0:	a2 83       	std	Z+2, r26	; 0x02
    17a2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    17a4:	fe 01       	movw	r30, r28
    17a6:	e5 5a       	subi	r30, 0xA5	; 165
    17a8:	ff 4f       	sbci	r31, 0xFF	; 255
    17aa:	60 81       	ld	r22, Z
    17ac:	71 81       	ldd	r23, Z+1	; 0x01
    17ae:	82 81       	ldd	r24, Z+2	; 0x02
    17b0:	93 81       	ldd	r25, Z+3	; 0x03
    17b2:	20 e0       	ldi	r18, 0x00	; 0
    17b4:	30 e0       	ldi	r19, 0x00	; 0
    17b6:	40 e8       	ldi	r20, 0x80	; 128
    17b8:	5f e3       	ldi	r21, 0x3F	; 63
    17ba:	0e 94 93 25 	call	0x4b26	; 0x4b26 <__cmpsf2>
    17be:	88 23       	and	r24, r24
    17c0:	44 f4       	brge	.+16     	; 0x17d2 <LCD_sendCommand+0x9e>
		__ticks = 1;
    17c2:	fe 01       	movw	r30, r28
    17c4:	e7 5a       	subi	r30, 0xA7	; 167
    17c6:	ff 4f       	sbci	r31, 0xFF	; 255
    17c8:	81 e0       	ldi	r24, 0x01	; 1
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	91 83       	std	Z+1, r25	; 0x01
    17ce:	80 83       	st	Z, r24
    17d0:	64 c0       	rjmp	.+200    	; 0x189a <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    17d2:	fe 01       	movw	r30, r28
    17d4:	e5 5a       	subi	r30, 0xA5	; 165
    17d6:	ff 4f       	sbci	r31, 0xFF	; 255
    17d8:	60 81       	ld	r22, Z
    17da:	71 81       	ldd	r23, Z+1	; 0x01
    17dc:	82 81       	ldd	r24, Z+2	; 0x02
    17de:	93 81       	ldd	r25, Z+3	; 0x03
    17e0:	20 e0       	ldi	r18, 0x00	; 0
    17e2:	3f ef       	ldi	r19, 0xFF	; 255
    17e4:	4f e7       	ldi	r20, 0x7F	; 127
    17e6:	57 e4       	ldi	r21, 0x47	; 71
    17e8:	0e 94 dd 26 	call	0x4dba	; 0x4dba <__gesf2>
    17ec:	18 16       	cp	r1, r24
    17ee:	0c f0       	brlt	.+2      	; 0x17f2 <LCD_sendCommand+0xbe>
    17f0:	43 c0       	rjmp	.+134    	; 0x1878 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17f2:	fe 01       	movw	r30, r28
    17f4:	e1 5a       	subi	r30, 0xA1	; 161
    17f6:	ff 4f       	sbci	r31, 0xFF	; 255
    17f8:	60 81       	ld	r22, Z
    17fa:	71 81       	ldd	r23, Z+1	; 0x01
    17fc:	82 81       	ldd	r24, Z+2	; 0x02
    17fe:	93 81       	ldd	r25, Z+3	; 0x03
    1800:	20 e0       	ldi	r18, 0x00	; 0
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	40 e2       	ldi	r20, 0x20	; 32
    1806:	51 e4       	ldi	r21, 0x41	; 65
    1808:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__mulsf3>
    180c:	dc 01       	movw	r26, r24
    180e:	cb 01       	movw	r24, r22
    1810:	8e 01       	movw	r16, r28
    1812:	07 5a       	subi	r16, 0xA7	; 167
    1814:	1f 4f       	sbci	r17, 0xFF	; 255
    1816:	bc 01       	movw	r22, r24
    1818:	cd 01       	movw	r24, r26
    181a:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <__fixunssfsi>
    181e:	dc 01       	movw	r26, r24
    1820:	cb 01       	movw	r24, r22
    1822:	f8 01       	movw	r30, r16
    1824:	91 83       	std	Z+1, r25	; 0x01
    1826:	80 83       	st	Z, r24
    1828:	1f c0       	rjmp	.+62     	; 0x1868 <LCD_sendCommand+0x134>
    182a:	fe 01       	movw	r30, r28
    182c:	e9 5a       	subi	r30, 0xA9	; 169
    182e:	ff 4f       	sbci	r31, 0xFF	; 255
    1830:	80 e9       	ldi	r24, 0x90	; 144
    1832:	91 e0       	ldi	r25, 0x01	; 1
    1834:	91 83       	std	Z+1, r25	; 0x01
    1836:	80 83       	st	Z, r24
    1838:	fe 01       	movw	r30, r28
    183a:	e9 5a       	subi	r30, 0xA9	; 169
    183c:	ff 4f       	sbci	r31, 0xFF	; 255
    183e:	80 81       	ld	r24, Z
    1840:	91 81       	ldd	r25, Z+1	; 0x01
    1842:	01 97       	sbiw	r24, 0x01	; 1
    1844:	f1 f7       	brne	.-4      	; 0x1842 <LCD_sendCommand+0x10e>
    1846:	fe 01       	movw	r30, r28
    1848:	e9 5a       	subi	r30, 0xA9	; 169
    184a:	ff 4f       	sbci	r31, 0xFF	; 255
    184c:	91 83       	std	Z+1, r25	; 0x01
    184e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1850:	de 01       	movw	r26, r28
    1852:	a7 5a       	subi	r26, 0xA7	; 167
    1854:	bf 4f       	sbci	r27, 0xFF	; 255
    1856:	fe 01       	movw	r30, r28
    1858:	e7 5a       	subi	r30, 0xA7	; 167
    185a:	ff 4f       	sbci	r31, 0xFF	; 255
    185c:	80 81       	ld	r24, Z
    185e:	91 81       	ldd	r25, Z+1	; 0x01
    1860:	01 97       	sbiw	r24, 0x01	; 1
    1862:	11 96       	adiw	r26, 0x01	; 1
    1864:	9c 93       	st	X, r25
    1866:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1868:	fe 01       	movw	r30, r28
    186a:	e7 5a       	subi	r30, 0xA7	; 167
    186c:	ff 4f       	sbci	r31, 0xFF	; 255
    186e:	80 81       	ld	r24, Z
    1870:	91 81       	ldd	r25, Z+1	; 0x01
    1872:	00 97       	sbiw	r24, 0x00	; 0
    1874:	d1 f6       	brne	.-76     	; 0x182a <LCD_sendCommand+0xf6>
    1876:	27 c0       	rjmp	.+78     	; 0x18c6 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1878:	8e 01       	movw	r16, r28
    187a:	07 5a       	subi	r16, 0xA7	; 167
    187c:	1f 4f       	sbci	r17, 0xFF	; 255
    187e:	fe 01       	movw	r30, r28
    1880:	e5 5a       	subi	r30, 0xA5	; 165
    1882:	ff 4f       	sbci	r31, 0xFF	; 255
    1884:	60 81       	ld	r22, Z
    1886:	71 81       	ldd	r23, Z+1	; 0x01
    1888:	82 81       	ldd	r24, Z+2	; 0x02
    188a:	93 81       	ldd	r25, Z+3	; 0x03
    188c:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <__fixunssfsi>
    1890:	dc 01       	movw	r26, r24
    1892:	cb 01       	movw	r24, r22
    1894:	f8 01       	movw	r30, r16
    1896:	91 83       	std	Z+1, r25	; 0x01
    1898:	80 83       	st	Z, r24
    189a:	de 01       	movw	r26, r28
    189c:	ab 5a       	subi	r26, 0xAB	; 171
    189e:	bf 4f       	sbci	r27, 0xFF	; 255
    18a0:	fe 01       	movw	r30, r28
    18a2:	e7 5a       	subi	r30, 0xA7	; 167
    18a4:	ff 4f       	sbci	r31, 0xFF	; 255
    18a6:	80 81       	ld	r24, Z
    18a8:	91 81       	ldd	r25, Z+1	; 0x01
    18aa:	8d 93       	st	X+, r24
    18ac:	9c 93       	st	X, r25
    18ae:	fe 01       	movw	r30, r28
    18b0:	eb 5a       	subi	r30, 0xAB	; 171
    18b2:	ff 4f       	sbci	r31, 0xFF	; 255
    18b4:	80 81       	ld	r24, Z
    18b6:	91 81       	ldd	r25, Z+1	; 0x01
    18b8:	01 97       	sbiw	r24, 0x01	; 1
    18ba:	f1 f7       	brne	.-4      	; 0x18b8 <LCD_sendCommand+0x184>
    18bc:	fe 01       	movw	r30, r28
    18be:	eb 5a       	subi	r30, 0xAB	; 171
    18c0:	ff 4f       	sbci	r31, 0xFF	; 255
    18c2:	91 83       	std	Z+1, r25	; 0x01
    18c4:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    18c6:	82 e0       	ldi	r24, 0x02	; 2
    18c8:	67 e0       	ldi	r22, 0x07	; 7
    18ca:	41 e0       	ldi	r20, 0x01	; 1
    18cc:	0e 94 23 05 	call	0xa46	; 0xa46 <GPIO_writePin>
    18d0:	fe 01       	movw	r30, r28
    18d2:	ef 5a       	subi	r30, 0xAF	; 175
    18d4:	ff 4f       	sbci	r31, 0xFF	; 255
    18d6:	80 e0       	ldi	r24, 0x00	; 0
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	a0 e8       	ldi	r26, 0x80	; 128
    18dc:	bf e3       	ldi	r27, 0x3F	; 63
    18de:	80 83       	st	Z, r24
    18e0:	91 83       	std	Z+1, r25	; 0x01
    18e2:	a2 83       	std	Z+2, r26	; 0x02
    18e4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18e6:	8e 01       	movw	r16, r28
    18e8:	03 5b       	subi	r16, 0xB3	; 179
    18ea:	1f 4f       	sbci	r17, 0xFF	; 255
    18ec:	fe 01       	movw	r30, r28
    18ee:	ef 5a       	subi	r30, 0xAF	; 175
    18f0:	ff 4f       	sbci	r31, 0xFF	; 255
    18f2:	60 81       	ld	r22, Z
    18f4:	71 81       	ldd	r23, Z+1	; 0x01
    18f6:	82 81       	ldd	r24, Z+2	; 0x02
    18f8:	93 81       	ldd	r25, Z+3	; 0x03
    18fa:	20 e0       	ldi	r18, 0x00	; 0
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	4a e7       	ldi	r20, 0x7A	; 122
    1900:	55 e4       	ldi	r21, 0x45	; 69
    1902:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__mulsf3>
    1906:	dc 01       	movw	r26, r24
    1908:	cb 01       	movw	r24, r22
    190a:	f8 01       	movw	r30, r16
    190c:	80 83       	st	Z, r24
    190e:	91 83       	std	Z+1, r25	; 0x01
    1910:	a2 83       	std	Z+2, r26	; 0x02
    1912:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1914:	fe 01       	movw	r30, r28
    1916:	e3 5b       	subi	r30, 0xB3	; 179
    1918:	ff 4f       	sbci	r31, 0xFF	; 255
    191a:	60 81       	ld	r22, Z
    191c:	71 81       	ldd	r23, Z+1	; 0x01
    191e:	82 81       	ldd	r24, Z+2	; 0x02
    1920:	93 81       	ldd	r25, Z+3	; 0x03
    1922:	20 e0       	ldi	r18, 0x00	; 0
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	40 e8       	ldi	r20, 0x80	; 128
    1928:	5f e3       	ldi	r21, 0x3F	; 63
    192a:	0e 94 93 25 	call	0x4b26	; 0x4b26 <__cmpsf2>
    192e:	88 23       	and	r24, r24
    1930:	44 f4       	brge	.+16     	; 0x1942 <LCD_sendCommand+0x20e>
		__ticks = 1;
    1932:	fe 01       	movw	r30, r28
    1934:	e5 5b       	subi	r30, 0xB5	; 181
    1936:	ff 4f       	sbci	r31, 0xFF	; 255
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	91 83       	std	Z+1, r25	; 0x01
    193e:	80 83       	st	Z, r24
    1940:	64 c0       	rjmp	.+200    	; 0x1a0a <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1942:	fe 01       	movw	r30, r28
    1944:	e3 5b       	subi	r30, 0xB3	; 179
    1946:	ff 4f       	sbci	r31, 0xFF	; 255
    1948:	60 81       	ld	r22, Z
    194a:	71 81       	ldd	r23, Z+1	; 0x01
    194c:	82 81       	ldd	r24, Z+2	; 0x02
    194e:	93 81       	ldd	r25, Z+3	; 0x03
    1950:	20 e0       	ldi	r18, 0x00	; 0
    1952:	3f ef       	ldi	r19, 0xFF	; 255
    1954:	4f e7       	ldi	r20, 0x7F	; 127
    1956:	57 e4       	ldi	r21, 0x47	; 71
    1958:	0e 94 dd 26 	call	0x4dba	; 0x4dba <__gesf2>
    195c:	18 16       	cp	r1, r24
    195e:	0c f0       	brlt	.+2      	; 0x1962 <LCD_sendCommand+0x22e>
    1960:	43 c0       	rjmp	.+134    	; 0x19e8 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1962:	fe 01       	movw	r30, r28
    1964:	ef 5a       	subi	r30, 0xAF	; 175
    1966:	ff 4f       	sbci	r31, 0xFF	; 255
    1968:	60 81       	ld	r22, Z
    196a:	71 81       	ldd	r23, Z+1	; 0x01
    196c:	82 81       	ldd	r24, Z+2	; 0x02
    196e:	93 81       	ldd	r25, Z+3	; 0x03
    1970:	20 e0       	ldi	r18, 0x00	; 0
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	40 e2       	ldi	r20, 0x20	; 32
    1976:	51 e4       	ldi	r21, 0x41	; 65
    1978:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__mulsf3>
    197c:	dc 01       	movw	r26, r24
    197e:	cb 01       	movw	r24, r22
    1980:	8e 01       	movw	r16, r28
    1982:	05 5b       	subi	r16, 0xB5	; 181
    1984:	1f 4f       	sbci	r17, 0xFF	; 255
    1986:	bc 01       	movw	r22, r24
    1988:	cd 01       	movw	r24, r26
    198a:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <__fixunssfsi>
    198e:	dc 01       	movw	r26, r24
    1990:	cb 01       	movw	r24, r22
    1992:	f8 01       	movw	r30, r16
    1994:	91 83       	std	Z+1, r25	; 0x01
    1996:	80 83       	st	Z, r24
    1998:	1f c0       	rjmp	.+62     	; 0x19d8 <LCD_sendCommand+0x2a4>
    199a:	fe 01       	movw	r30, r28
    199c:	e7 5b       	subi	r30, 0xB7	; 183
    199e:	ff 4f       	sbci	r31, 0xFF	; 255
    19a0:	80 e9       	ldi	r24, 0x90	; 144
    19a2:	91 e0       	ldi	r25, 0x01	; 1
    19a4:	91 83       	std	Z+1, r25	; 0x01
    19a6:	80 83       	st	Z, r24
    19a8:	fe 01       	movw	r30, r28
    19aa:	e7 5b       	subi	r30, 0xB7	; 183
    19ac:	ff 4f       	sbci	r31, 0xFF	; 255
    19ae:	80 81       	ld	r24, Z
    19b0:	91 81       	ldd	r25, Z+1	; 0x01
    19b2:	01 97       	sbiw	r24, 0x01	; 1
    19b4:	f1 f7       	brne	.-4      	; 0x19b2 <LCD_sendCommand+0x27e>
    19b6:	fe 01       	movw	r30, r28
    19b8:	e7 5b       	subi	r30, 0xB7	; 183
    19ba:	ff 4f       	sbci	r31, 0xFF	; 255
    19bc:	91 83       	std	Z+1, r25	; 0x01
    19be:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19c0:	de 01       	movw	r26, r28
    19c2:	a5 5b       	subi	r26, 0xB5	; 181
    19c4:	bf 4f       	sbci	r27, 0xFF	; 255
    19c6:	fe 01       	movw	r30, r28
    19c8:	e5 5b       	subi	r30, 0xB5	; 181
    19ca:	ff 4f       	sbci	r31, 0xFF	; 255
    19cc:	80 81       	ld	r24, Z
    19ce:	91 81       	ldd	r25, Z+1	; 0x01
    19d0:	01 97       	sbiw	r24, 0x01	; 1
    19d2:	11 96       	adiw	r26, 0x01	; 1
    19d4:	9c 93       	st	X, r25
    19d6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19d8:	fe 01       	movw	r30, r28
    19da:	e5 5b       	subi	r30, 0xB5	; 181
    19dc:	ff 4f       	sbci	r31, 0xFF	; 255
    19de:	80 81       	ld	r24, Z
    19e0:	91 81       	ldd	r25, Z+1	; 0x01
    19e2:	00 97       	sbiw	r24, 0x00	; 0
    19e4:	d1 f6       	brne	.-76     	; 0x199a <LCD_sendCommand+0x266>
    19e6:	27 c0       	rjmp	.+78     	; 0x1a36 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19e8:	8e 01       	movw	r16, r28
    19ea:	05 5b       	subi	r16, 0xB5	; 181
    19ec:	1f 4f       	sbci	r17, 0xFF	; 255
    19ee:	fe 01       	movw	r30, r28
    19f0:	e3 5b       	subi	r30, 0xB3	; 179
    19f2:	ff 4f       	sbci	r31, 0xFF	; 255
    19f4:	60 81       	ld	r22, Z
    19f6:	71 81       	ldd	r23, Z+1	; 0x01
    19f8:	82 81       	ldd	r24, Z+2	; 0x02
    19fa:	93 81       	ldd	r25, Z+3	; 0x03
    19fc:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <__fixunssfsi>
    1a00:	dc 01       	movw	r26, r24
    1a02:	cb 01       	movw	r24, r22
    1a04:	f8 01       	movw	r30, r16
    1a06:	91 83       	std	Z+1, r25	; 0x01
    1a08:	80 83       	st	Z, r24
    1a0a:	de 01       	movw	r26, r28
    1a0c:	a9 5b       	subi	r26, 0xB9	; 185
    1a0e:	bf 4f       	sbci	r27, 0xFF	; 255
    1a10:	fe 01       	movw	r30, r28
    1a12:	e5 5b       	subi	r30, 0xB5	; 181
    1a14:	ff 4f       	sbci	r31, 0xFF	; 255
    1a16:	80 81       	ld	r24, Z
    1a18:	91 81       	ldd	r25, Z+1	; 0x01
    1a1a:	8d 93       	st	X+, r24
    1a1c:	9c 93       	st	X, r25
    1a1e:	fe 01       	movw	r30, r28
    1a20:	e9 5b       	subi	r30, 0xB9	; 185
    1a22:	ff 4f       	sbci	r31, 0xFF	; 255
    1a24:	80 81       	ld	r24, Z
    1a26:	91 81       	ldd	r25, Z+1	; 0x01
    1a28:	01 97       	sbiw	r24, 0x01	; 1
    1a2a:	f1 f7       	brne	.-4      	; 0x1a28 <LCD_sendCommand+0x2f4>
    1a2c:	fe 01       	movw	r30, r28
    1a2e:	e9 5b       	subi	r30, 0xB9	; 185
    1a30:	ff 4f       	sbci	r31, 0xFF	; 255
    1a32:	91 83       	std	Z+1, r25	; 0x01
    1a34:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    1a36:	fe 01       	movw	r30, r28
    1a38:	ed 59       	subi	r30, 0x9D	; 157
    1a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3c:	80 81       	ld	r24, Z
    1a3e:	88 2f       	mov	r24, r24
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	80 71       	andi	r24, 0x10	; 16
    1a44:	90 70       	andi	r25, 0x00	; 0
    1a46:	95 95       	asr	r25
    1a48:	87 95       	ror	r24
    1a4a:	95 95       	asr	r25
    1a4c:	87 95       	ror	r24
    1a4e:	95 95       	asr	r25
    1a50:	87 95       	ror	r24
    1a52:	95 95       	asr	r25
    1a54:	87 95       	ror	r24
    1a56:	98 2f       	mov	r25, r24
    1a58:	82 e0       	ldi	r24, 0x02	; 2
    1a5a:	62 e0       	ldi	r22, 0x02	; 2
    1a5c:	49 2f       	mov	r20, r25
    1a5e:	0e 94 23 05 	call	0xa46	; 0xa46 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    1a62:	fe 01       	movw	r30, r28
    1a64:	ed 59       	subi	r30, 0x9D	; 157
    1a66:	ff 4f       	sbci	r31, 0xFF	; 255
    1a68:	80 81       	ld	r24, Z
    1a6a:	88 2f       	mov	r24, r24
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	80 72       	andi	r24, 0x20	; 32
    1a70:	90 70       	andi	r25, 0x00	; 0
    1a72:	95 95       	asr	r25
    1a74:	87 95       	ror	r24
    1a76:	95 95       	asr	r25
    1a78:	87 95       	ror	r24
    1a7a:	95 95       	asr	r25
    1a7c:	87 95       	ror	r24
    1a7e:	95 95       	asr	r25
    1a80:	87 95       	ror	r24
    1a82:	95 95       	asr	r25
    1a84:	87 95       	ror	r24
    1a86:	98 2f       	mov	r25, r24
    1a88:	82 e0       	ldi	r24, 0x02	; 2
    1a8a:	63 e0       	ldi	r22, 0x03	; 3
    1a8c:	49 2f       	mov	r20, r25
    1a8e:	0e 94 23 05 	call	0xa46	; 0xa46 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    1a92:	fe 01       	movw	r30, r28
    1a94:	ed 59       	subi	r30, 0x9D	; 157
    1a96:	ff 4f       	sbci	r31, 0xFF	; 255
    1a98:	80 81       	ld	r24, Z
    1a9a:	88 2f       	mov	r24, r24
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	80 74       	andi	r24, 0x40	; 64
    1aa0:	90 70       	andi	r25, 0x00	; 0
    1aa2:	08 2e       	mov	r0, r24
    1aa4:	89 2f       	mov	r24, r25
    1aa6:	00 0c       	add	r0, r0
    1aa8:	88 1f       	adc	r24, r24
    1aaa:	99 0b       	sbc	r25, r25
    1aac:	00 0c       	add	r0, r0
    1aae:	88 1f       	adc	r24, r24
    1ab0:	99 1f       	adc	r25, r25
    1ab2:	98 2f       	mov	r25, r24
    1ab4:	82 e0       	ldi	r24, 0x02	; 2
    1ab6:	64 e0       	ldi	r22, 0x04	; 4
    1ab8:	49 2f       	mov	r20, r25
    1aba:	0e 94 23 05 	call	0xa46	; 0xa46 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    1abe:	fe 01       	movw	r30, r28
    1ac0:	ed 59       	subi	r30, 0x9D	; 157
    1ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac4:	80 81       	ld	r24, Z
    1ac6:	98 2f       	mov	r25, r24
    1ac8:	99 1f       	adc	r25, r25
    1aca:	99 27       	eor	r25, r25
    1acc:	99 1f       	adc	r25, r25
    1ace:	82 e0       	ldi	r24, 0x02	; 2
    1ad0:	65 e0       	ldi	r22, 0x05	; 5
    1ad2:	49 2f       	mov	r20, r25
    1ad4:	0e 94 23 05 	call	0xa46	; 0xa46 <GPIO_writePin>
    1ad8:	fe 01       	movw	r30, r28
    1ada:	ed 5b       	subi	r30, 0xBD	; 189
    1adc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ade:	80 e0       	ldi	r24, 0x00	; 0
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	a0 e8       	ldi	r26, 0x80	; 128
    1ae4:	bf e3       	ldi	r27, 0x3F	; 63
    1ae6:	80 83       	st	Z, r24
    1ae8:	91 83       	std	Z+1, r25	; 0x01
    1aea:	a2 83       	std	Z+2, r26	; 0x02
    1aec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aee:	8e 01       	movw	r16, r28
    1af0:	01 5c       	subi	r16, 0xC1	; 193
    1af2:	1f 4f       	sbci	r17, 0xFF	; 255
    1af4:	fe 01       	movw	r30, r28
    1af6:	ed 5b       	subi	r30, 0xBD	; 189
    1af8:	ff 4f       	sbci	r31, 0xFF	; 255
    1afa:	60 81       	ld	r22, Z
    1afc:	71 81       	ldd	r23, Z+1	; 0x01
    1afe:	82 81       	ldd	r24, Z+2	; 0x02
    1b00:	93 81       	ldd	r25, Z+3	; 0x03
    1b02:	20 e0       	ldi	r18, 0x00	; 0
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	4a e7       	ldi	r20, 0x7A	; 122
    1b08:	55 e4       	ldi	r21, 0x45	; 69
    1b0a:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__mulsf3>
    1b0e:	dc 01       	movw	r26, r24
    1b10:	cb 01       	movw	r24, r22
    1b12:	f8 01       	movw	r30, r16
    1b14:	80 83       	st	Z, r24
    1b16:	91 83       	std	Z+1, r25	; 0x01
    1b18:	a2 83       	std	Z+2, r26	; 0x02
    1b1a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b1c:	fe 01       	movw	r30, r28
    1b1e:	ff 96       	adiw	r30, 0x3f	; 63
    1b20:	60 81       	ld	r22, Z
    1b22:	71 81       	ldd	r23, Z+1	; 0x01
    1b24:	82 81       	ldd	r24, Z+2	; 0x02
    1b26:	93 81       	ldd	r25, Z+3	; 0x03
    1b28:	20 e0       	ldi	r18, 0x00	; 0
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	40 e8       	ldi	r20, 0x80	; 128
    1b2e:	5f e3       	ldi	r21, 0x3F	; 63
    1b30:	0e 94 93 25 	call	0x4b26	; 0x4b26 <__cmpsf2>
    1b34:	88 23       	and	r24, r24
    1b36:	2c f4       	brge	.+10     	; 0x1b42 <LCD_sendCommand+0x40e>
		__ticks = 1;
    1b38:	81 e0       	ldi	r24, 0x01	; 1
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	9e af       	std	Y+62, r25	; 0x3e
    1b3e:	8d af       	std	Y+61, r24	; 0x3d
    1b40:	46 c0       	rjmp	.+140    	; 0x1bce <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    1b42:	fe 01       	movw	r30, r28
    1b44:	ff 96       	adiw	r30, 0x3f	; 63
    1b46:	60 81       	ld	r22, Z
    1b48:	71 81       	ldd	r23, Z+1	; 0x01
    1b4a:	82 81       	ldd	r24, Z+2	; 0x02
    1b4c:	93 81       	ldd	r25, Z+3	; 0x03
    1b4e:	20 e0       	ldi	r18, 0x00	; 0
    1b50:	3f ef       	ldi	r19, 0xFF	; 255
    1b52:	4f e7       	ldi	r20, 0x7F	; 127
    1b54:	57 e4       	ldi	r21, 0x47	; 71
    1b56:	0e 94 dd 26 	call	0x4dba	; 0x4dba <__gesf2>
    1b5a:	18 16       	cp	r1, r24
    1b5c:	64 f5       	brge	.+88     	; 0x1bb6 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b5e:	fe 01       	movw	r30, r28
    1b60:	ed 5b       	subi	r30, 0xBD	; 189
    1b62:	ff 4f       	sbci	r31, 0xFF	; 255
    1b64:	60 81       	ld	r22, Z
    1b66:	71 81       	ldd	r23, Z+1	; 0x01
    1b68:	82 81       	ldd	r24, Z+2	; 0x02
    1b6a:	93 81       	ldd	r25, Z+3	; 0x03
    1b6c:	20 e0       	ldi	r18, 0x00	; 0
    1b6e:	30 e0       	ldi	r19, 0x00	; 0
    1b70:	40 e2       	ldi	r20, 0x20	; 32
    1b72:	51 e4       	ldi	r21, 0x41	; 65
    1b74:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__mulsf3>
    1b78:	dc 01       	movw	r26, r24
    1b7a:	cb 01       	movw	r24, r22
    1b7c:	bc 01       	movw	r22, r24
    1b7e:	cd 01       	movw	r24, r26
    1b80:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <__fixunssfsi>
    1b84:	dc 01       	movw	r26, r24
    1b86:	cb 01       	movw	r24, r22
    1b88:	9e af       	std	Y+62, r25	; 0x3e
    1b8a:	8d af       	std	Y+61, r24	; 0x3d
    1b8c:	0f c0       	rjmp	.+30     	; 0x1bac <LCD_sendCommand+0x478>
    1b8e:	80 e9       	ldi	r24, 0x90	; 144
    1b90:	91 e0       	ldi	r25, 0x01	; 1
    1b92:	9c af       	std	Y+60, r25	; 0x3c
    1b94:	8b af       	std	Y+59, r24	; 0x3b
    1b96:	8b ad       	ldd	r24, Y+59	; 0x3b
    1b98:	9c ad       	ldd	r25, Y+60	; 0x3c
    1b9a:	01 97       	sbiw	r24, 0x01	; 1
    1b9c:	f1 f7       	brne	.-4      	; 0x1b9a <LCD_sendCommand+0x466>
    1b9e:	9c af       	std	Y+60, r25	; 0x3c
    1ba0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ba2:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ba4:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ba6:	01 97       	sbiw	r24, 0x01	; 1
    1ba8:	9e af       	std	Y+62, r25	; 0x3e
    1baa:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bac:	8d ad       	ldd	r24, Y+61	; 0x3d
    1bae:	9e ad       	ldd	r25, Y+62	; 0x3e
    1bb0:	00 97       	sbiw	r24, 0x00	; 0
    1bb2:	69 f7       	brne	.-38     	; 0x1b8e <LCD_sendCommand+0x45a>
    1bb4:	16 c0       	rjmp	.+44     	; 0x1be2 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bb6:	fe 01       	movw	r30, r28
    1bb8:	ff 96       	adiw	r30, 0x3f	; 63
    1bba:	60 81       	ld	r22, Z
    1bbc:	71 81       	ldd	r23, Z+1	; 0x01
    1bbe:	82 81       	ldd	r24, Z+2	; 0x02
    1bc0:	93 81       	ldd	r25, Z+3	; 0x03
    1bc2:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <__fixunssfsi>
    1bc6:	dc 01       	movw	r26, r24
    1bc8:	cb 01       	movw	r24, r22
    1bca:	9e af       	std	Y+62, r25	; 0x3e
    1bcc:	8d af       	std	Y+61, r24	; 0x3d
    1bce:	8d ad       	ldd	r24, Y+61	; 0x3d
    1bd0:	9e ad       	ldd	r25, Y+62	; 0x3e
    1bd2:	9a af       	std	Y+58, r25	; 0x3a
    1bd4:	89 af       	std	Y+57, r24	; 0x39
    1bd6:	89 ad       	ldd	r24, Y+57	; 0x39
    1bd8:	9a ad       	ldd	r25, Y+58	; 0x3a
    1bda:	01 97       	sbiw	r24, 0x01	; 1
    1bdc:	f1 f7       	brne	.-4      	; 0x1bda <LCD_sendCommand+0x4a6>
    1bde:	9a af       	std	Y+58, r25	; 0x3a
    1be0:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1be2:	82 e0       	ldi	r24, 0x02	; 2
    1be4:	67 e0       	ldi	r22, 0x07	; 7
    1be6:	40 e0       	ldi	r20, 0x00	; 0
    1be8:	0e 94 23 05 	call	0xa46	; 0xa46 <GPIO_writePin>
    1bec:	80 e0       	ldi	r24, 0x00	; 0
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	a0 e8       	ldi	r26, 0x80	; 128
    1bf2:	bf e3       	ldi	r27, 0x3F	; 63
    1bf4:	8d ab       	std	Y+53, r24	; 0x35
    1bf6:	9e ab       	std	Y+54, r25	; 0x36
    1bf8:	af ab       	std	Y+55, r26	; 0x37
    1bfa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bfc:	6d a9       	ldd	r22, Y+53	; 0x35
    1bfe:	7e a9       	ldd	r23, Y+54	; 0x36
    1c00:	8f a9       	ldd	r24, Y+55	; 0x37
    1c02:	98 ad       	ldd	r25, Y+56	; 0x38
    1c04:	20 e0       	ldi	r18, 0x00	; 0
    1c06:	30 e0       	ldi	r19, 0x00	; 0
    1c08:	4a e7       	ldi	r20, 0x7A	; 122
    1c0a:	55 e4       	ldi	r21, 0x45	; 69
    1c0c:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__mulsf3>
    1c10:	dc 01       	movw	r26, r24
    1c12:	cb 01       	movw	r24, r22
    1c14:	89 ab       	std	Y+49, r24	; 0x31
    1c16:	9a ab       	std	Y+50, r25	; 0x32
    1c18:	ab ab       	std	Y+51, r26	; 0x33
    1c1a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c1c:	69 a9       	ldd	r22, Y+49	; 0x31
    1c1e:	7a a9       	ldd	r23, Y+50	; 0x32
    1c20:	8b a9       	ldd	r24, Y+51	; 0x33
    1c22:	9c a9       	ldd	r25, Y+52	; 0x34
    1c24:	20 e0       	ldi	r18, 0x00	; 0
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	40 e8       	ldi	r20, 0x80	; 128
    1c2a:	5f e3       	ldi	r21, 0x3F	; 63
    1c2c:	0e 94 93 25 	call	0x4b26	; 0x4b26 <__cmpsf2>
    1c30:	88 23       	and	r24, r24
    1c32:	2c f4       	brge	.+10     	; 0x1c3e <LCD_sendCommand+0x50a>
		__ticks = 1;
    1c34:	81 e0       	ldi	r24, 0x01	; 1
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	98 ab       	std	Y+48, r25	; 0x30
    1c3a:	8f a7       	std	Y+47, r24	; 0x2f
    1c3c:	3f c0       	rjmp	.+126    	; 0x1cbc <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    1c3e:	69 a9       	ldd	r22, Y+49	; 0x31
    1c40:	7a a9       	ldd	r23, Y+50	; 0x32
    1c42:	8b a9       	ldd	r24, Y+51	; 0x33
    1c44:	9c a9       	ldd	r25, Y+52	; 0x34
    1c46:	20 e0       	ldi	r18, 0x00	; 0
    1c48:	3f ef       	ldi	r19, 0xFF	; 255
    1c4a:	4f e7       	ldi	r20, 0x7F	; 127
    1c4c:	57 e4       	ldi	r21, 0x47	; 71
    1c4e:	0e 94 dd 26 	call	0x4dba	; 0x4dba <__gesf2>
    1c52:	18 16       	cp	r1, r24
    1c54:	4c f5       	brge	.+82     	; 0x1ca8 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c56:	6d a9       	ldd	r22, Y+53	; 0x35
    1c58:	7e a9       	ldd	r23, Y+54	; 0x36
    1c5a:	8f a9       	ldd	r24, Y+55	; 0x37
    1c5c:	98 ad       	ldd	r25, Y+56	; 0x38
    1c5e:	20 e0       	ldi	r18, 0x00	; 0
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	40 e2       	ldi	r20, 0x20	; 32
    1c64:	51 e4       	ldi	r21, 0x41	; 65
    1c66:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__mulsf3>
    1c6a:	dc 01       	movw	r26, r24
    1c6c:	cb 01       	movw	r24, r22
    1c6e:	bc 01       	movw	r22, r24
    1c70:	cd 01       	movw	r24, r26
    1c72:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <__fixunssfsi>
    1c76:	dc 01       	movw	r26, r24
    1c78:	cb 01       	movw	r24, r22
    1c7a:	98 ab       	std	Y+48, r25	; 0x30
    1c7c:	8f a7       	std	Y+47, r24	; 0x2f
    1c7e:	0f c0       	rjmp	.+30     	; 0x1c9e <LCD_sendCommand+0x56a>
    1c80:	80 e9       	ldi	r24, 0x90	; 144
    1c82:	91 e0       	ldi	r25, 0x01	; 1
    1c84:	9e a7       	std	Y+46, r25	; 0x2e
    1c86:	8d a7       	std	Y+45, r24	; 0x2d
    1c88:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c8a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c8c:	01 97       	sbiw	r24, 0x01	; 1
    1c8e:	f1 f7       	brne	.-4      	; 0x1c8c <LCD_sendCommand+0x558>
    1c90:	9e a7       	std	Y+46, r25	; 0x2e
    1c92:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c94:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c96:	98 a9       	ldd	r25, Y+48	; 0x30
    1c98:	01 97       	sbiw	r24, 0x01	; 1
    1c9a:	98 ab       	std	Y+48, r25	; 0x30
    1c9c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c9e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ca0:	98 a9       	ldd	r25, Y+48	; 0x30
    1ca2:	00 97       	sbiw	r24, 0x00	; 0
    1ca4:	69 f7       	brne	.-38     	; 0x1c80 <LCD_sendCommand+0x54c>
    1ca6:	14 c0       	rjmp	.+40     	; 0x1cd0 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ca8:	69 a9       	ldd	r22, Y+49	; 0x31
    1caa:	7a a9       	ldd	r23, Y+50	; 0x32
    1cac:	8b a9       	ldd	r24, Y+51	; 0x33
    1cae:	9c a9       	ldd	r25, Y+52	; 0x34
    1cb0:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <__fixunssfsi>
    1cb4:	dc 01       	movw	r26, r24
    1cb6:	cb 01       	movw	r24, r22
    1cb8:	98 ab       	std	Y+48, r25	; 0x30
    1cba:	8f a7       	std	Y+47, r24	; 0x2f
    1cbc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cbe:	98 a9       	ldd	r25, Y+48	; 0x30
    1cc0:	9c a7       	std	Y+44, r25	; 0x2c
    1cc2:	8b a7       	std	Y+43, r24	; 0x2b
    1cc4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1cc6:	9c a5       	ldd	r25, Y+44	; 0x2c
    1cc8:	01 97       	sbiw	r24, 0x01	; 1
    1cca:	f1 f7       	brne	.-4      	; 0x1cc8 <LCD_sendCommand+0x594>
    1ccc:	9c a7       	std	Y+44, r25	; 0x2c
    1cce:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1cd0:	82 e0       	ldi	r24, 0x02	; 2
    1cd2:	67 e0       	ldi	r22, 0x07	; 7
    1cd4:	41 e0       	ldi	r20, 0x01	; 1
    1cd6:	0e 94 23 05 	call	0xa46	; 0xa46 <GPIO_writePin>
    1cda:	80 e0       	ldi	r24, 0x00	; 0
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	a0 e8       	ldi	r26, 0x80	; 128
    1ce0:	bf e3       	ldi	r27, 0x3F	; 63
    1ce2:	8f a3       	std	Y+39, r24	; 0x27
    1ce4:	98 a7       	std	Y+40, r25	; 0x28
    1ce6:	a9 a7       	std	Y+41, r26	; 0x29
    1ce8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cea:	6f a1       	ldd	r22, Y+39	; 0x27
    1cec:	78 a5       	ldd	r23, Y+40	; 0x28
    1cee:	89 a5       	ldd	r24, Y+41	; 0x29
    1cf0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cf2:	20 e0       	ldi	r18, 0x00	; 0
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	4a e7       	ldi	r20, 0x7A	; 122
    1cf8:	55 e4       	ldi	r21, 0x45	; 69
    1cfa:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__mulsf3>
    1cfe:	dc 01       	movw	r26, r24
    1d00:	cb 01       	movw	r24, r22
    1d02:	8b a3       	std	Y+35, r24	; 0x23
    1d04:	9c a3       	std	Y+36, r25	; 0x24
    1d06:	ad a3       	std	Y+37, r26	; 0x25
    1d08:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d0a:	6b a1       	ldd	r22, Y+35	; 0x23
    1d0c:	7c a1       	ldd	r23, Y+36	; 0x24
    1d0e:	8d a1       	ldd	r24, Y+37	; 0x25
    1d10:	9e a1       	ldd	r25, Y+38	; 0x26
    1d12:	20 e0       	ldi	r18, 0x00	; 0
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	40 e8       	ldi	r20, 0x80	; 128
    1d18:	5f e3       	ldi	r21, 0x3F	; 63
    1d1a:	0e 94 93 25 	call	0x4b26	; 0x4b26 <__cmpsf2>
    1d1e:	88 23       	and	r24, r24
    1d20:	2c f4       	brge	.+10     	; 0x1d2c <LCD_sendCommand+0x5f8>
		__ticks = 1;
    1d22:	81 e0       	ldi	r24, 0x01	; 1
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	9a a3       	std	Y+34, r25	; 0x22
    1d28:	89 a3       	std	Y+33, r24	; 0x21
    1d2a:	3f c0       	rjmp	.+126    	; 0x1daa <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    1d2c:	6b a1       	ldd	r22, Y+35	; 0x23
    1d2e:	7c a1       	ldd	r23, Y+36	; 0x24
    1d30:	8d a1       	ldd	r24, Y+37	; 0x25
    1d32:	9e a1       	ldd	r25, Y+38	; 0x26
    1d34:	20 e0       	ldi	r18, 0x00	; 0
    1d36:	3f ef       	ldi	r19, 0xFF	; 255
    1d38:	4f e7       	ldi	r20, 0x7F	; 127
    1d3a:	57 e4       	ldi	r21, 0x47	; 71
    1d3c:	0e 94 dd 26 	call	0x4dba	; 0x4dba <__gesf2>
    1d40:	18 16       	cp	r1, r24
    1d42:	4c f5       	brge	.+82     	; 0x1d96 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d44:	6f a1       	ldd	r22, Y+39	; 0x27
    1d46:	78 a5       	ldd	r23, Y+40	; 0x28
    1d48:	89 a5       	ldd	r24, Y+41	; 0x29
    1d4a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d4c:	20 e0       	ldi	r18, 0x00	; 0
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	40 e2       	ldi	r20, 0x20	; 32
    1d52:	51 e4       	ldi	r21, 0x41	; 65
    1d54:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__mulsf3>
    1d58:	dc 01       	movw	r26, r24
    1d5a:	cb 01       	movw	r24, r22
    1d5c:	bc 01       	movw	r22, r24
    1d5e:	cd 01       	movw	r24, r26
    1d60:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <__fixunssfsi>
    1d64:	dc 01       	movw	r26, r24
    1d66:	cb 01       	movw	r24, r22
    1d68:	9a a3       	std	Y+34, r25	; 0x22
    1d6a:	89 a3       	std	Y+33, r24	; 0x21
    1d6c:	0f c0       	rjmp	.+30     	; 0x1d8c <LCD_sendCommand+0x658>
    1d6e:	80 e9       	ldi	r24, 0x90	; 144
    1d70:	91 e0       	ldi	r25, 0x01	; 1
    1d72:	98 a3       	std	Y+32, r25	; 0x20
    1d74:	8f 8f       	std	Y+31, r24	; 0x1f
    1d76:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d78:	98 a1       	ldd	r25, Y+32	; 0x20
    1d7a:	01 97       	sbiw	r24, 0x01	; 1
    1d7c:	f1 f7       	brne	.-4      	; 0x1d7a <LCD_sendCommand+0x646>
    1d7e:	98 a3       	std	Y+32, r25	; 0x20
    1d80:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d82:	89 a1       	ldd	r24, Y+33	; 0x21
    1d84:	9a a1       	ldd	r25, Y+34	; 0x22
    1d86:	01 97       	sbiw	r24, 0x01	; 1
    1d88:	9a a3       	std	Y+34, r25	; 0x22
    1d8a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d8c:	89 a1       	ldd	r24, Y+33	; 0x21
    1d8e:	9a a1       	ldd	r25, Y+34	; 0x22
    1d90:	00 97       	sbiw	r24, 0x00	; 0
    1d92:	69 f7       	brne	.-38     	; 0x1d6e <LCD_sendCommand+0x63a>
    1d94:	14 c0       	rjmp	.+40     	; 0x1dbe <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d96:	6b a1       	ldd	r22, Y+35	; 0x23
    1d98:	7c a1       	ldd	r23, Y+36	; 0x24
    1d9a:	8d a1       	ldd	r24, Y+37	; 0x25
    1d9c:	9e a1       	ldd	r25, Y+38	; 0x26
    1d9e:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <__fixunssfsi>
    1da2:	dc 01       	movw	r26, r24
    1da4:	cb 01       	movw	r24, r22
    1da6:	9a a3       	std	Y+34, r25	; 0x22
    1da8:	89 a3       	std	Y+33, r24	; 0x21
    1daa:	89 a1       	ldd	r24, Y+33	; 0x21
    1dac:	9a a1       	ldd	r25, Y+34	; 0x22
    1dae:	9e 8f       	std	Y+30, r25	; 0x1e
    1db0:	8d 8f       	std	Y+29, r24	; 0x1d
    1db2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1db4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1db6:	01 97       	sbiw	r24, 0x01	; 1
    1db8:	f1 f7       	brne	.-4      	; 0x1db6 <LCD_sendCommand+0x682>
    1dba:	9e 8f       	std	Y+30, r25	; 0x1e
    1dbc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    1dbe:	fe 01       	movw	r30, r28
    1dc0:	ed 59       	subi	r30, 0x9D	; 157
    1dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc4:	80 81       	ld	r24, Z
    1dc6:	98 2f       	mov	r25, r24
    1dc8:	91 70       	andi	r25, 0x01	; 1
    1dca:	82 e0       	ldi	r24, 0x02	; 2
    1dcc:	62 e0       	ldi	r22, 0x02	; 2
    1dce:	49 2f       	mov	r20, r25
    1dd0:	0e 94 23 05 	call	0xa46	; 0xa46 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    1dd4:	fe 01       	movw	r30, r28
    1dd6:	ed 59       	subi	r30, 0x9D	; 157
    1dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dda:	80 81       	ld	r24, Z
    1ddc:	88 2f       	mov	r24, r24
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	82 70       	andi	r24, 0x02	; 2
    1de2:	90 70       	andi	r25, 0x00	; 0
    1de4:	95 95       	asr	r25
    1de6:	87 95       	ror	r24
    1de8:	98 2f       	mov	r25, r24
    1dea:	82 e0       	ldi	r24, 0x02	; 2
    1dec:	63 e0       	ldi	r22, 0x03	; 3
    1dee:	49 2f       	mov	r20, r25
    1df0:	0e 94 23 05 	call	0xa46	; 0xa46 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    1df4:	fe 01       	movw	r30, r28
    1df6:	ed 59       	subi	r30, 0x9D	; 157
    1df8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfa:	80 81       	ld	r24, Z
    1dfc:	88 2f       	mov	r24, r24
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	84 70       	andi	r24, 0x04	; 4
    1e02:	90 70       	andi	r25, 0x00	; 0
    1e04:	95 95       	asr	r25
    1e06:	87 95       	ror	r24
    1e08:	95 95       	asr	r25
    1e0a:	87 95       	ror	r24
    1e0c:	98 2f       	mov	r25, r24
    1e0e:	82 e0       	ldi	r24, 0x02	; 2
    1e10:	64 e0       	ldi	r22, 0x04	; 4
    1e12:	49 2f       	mov	r20, r25
    1e14:	0e 94 23 05 	call	0xa46	; 0xa46 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    1e18:	fe 01       	movw	r30, r28
    1e1a:	ed 59       	subi	r30, 0x9D	; 157
    1e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1e:	80 81       	ld	r24, Z
    1e20:	88 2f       	mov	r24, r24
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	88 70       	andi	r24, 0x08	; 8
    1e26:	90 70       	andi	r25, 0x00	; 0
    1e28:	95 95       	asr	r25
    1e2a:	87 95       	ror	r24
    1e2c:	95 95       	asr	r25
    1e2e:	87 95       	ror	r24
    1e30:	95 95       	asr	r25
    1e32:	87 95       	ror	r24
    1e34:	98 2f       	mov	r25, r24
    1e36:	82 e0       	ldi	r24, 0x02	; 2
    1e38:	65 e0       	ldi	r22, 0x05	; 5
    1e3a:	49 2f       	mov	r20, r25
    1e3c:	0e 94 23 05 	call	0xa46	; 0xa46 <GPIO_writePin>
    1e40:	80 e0       	ldi	r24, 0x00	; 0
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	a0 e8       	ldi	r26, 0x80	; 128
    1e46:	bf e3       	ldi	r27, 0x3F	; 63
    1e48:	89 8f       	std	Y+25, r24	; 0x19
    1e4a:	9a 8f       	std	Y+26, r25	; 0x1a
    1e4c:	ab 8f       	std	Y+27, r26	; 0x1b
    1e4e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e50:	69 8d       	ldd	r22, Y+25	; 0x19
    1e52:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e54:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e56:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e58:	20 e0       	ldi	r18, 0x00	; 0
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	4a e7       	ldi	r20, 0x7A	; 122
    1e5e:	55 e4       	ldi	r21, 0x45	; 69
    1e60:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__mulsf3>
    1e64:	dc 01       	movw	r26, r24
    1e66:	cb 01       	movw	r24, r22
    1e68:	8d 8b       	std	Y+21, r24	; 0x15
    1e6a:	9e 8b       	std	Y+22, r25	; 0x16
    1e6c:	af 8b       	std	Y+23, r26	; 0x17
    1e6e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e70:	6d 89       	ldd	r22, Y+21	; 0x15
    1e72:	7e 89       	ldd	r23, Y+22	; 0x16
    1e74:	8f 89       	ldd	r24, Y+23	; 0x17
    1e76:	98 8d       	ldd	r25, Y+24	; 0x18
    1e78:	20 e0       	ldi	r18, 0x00	; 0
    1e7a:	30 e0       	ldi	r19, 0x00	; 0
    1e7c:	40 e8       	ldi	r20, 0x80	; 128
    1e7e:	5f e3       	ldi	r21, 0x3F	; 63
    1e80:	0e 94 93 25 	call	0x4b26	; 0x4b26 <__cmpsf2>
    1e84:	88 23       	and	r24, r24
    1e86:	2c f4       	brge	.+10     	; 0x1e92 <LCD_sendCommand+0x75e>
		__ticks = 1;
    1e88:	81 e0       	ldi	r24, 0x01	; 1
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	9c 8b       	std	Y+20, r25	; 0x14
    1e8e:	8b 8b       	std	Y+19, r24	; 0x13
    1e90:	3f c0       	rjmp	.+126    	; 0x1f10 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    1e92:	6d 89       	ldd	r22, Y+21	; 0x15
    1e94:	7e 89       	ldd	r23, Y+22	; 0x16
    1e96:	8f 89       	ldd	r24, Y+23	; 0x17
    1e98:	98 8d       	ldd	r25, Y+24	; 0x18
    1e9a:	20 e0       	ldi	r18, 0x00	; 0
    1e9c:	3f ef       	ldi	r19, 0xFF	; 255
    1e9e:	4f e7       	ldi	r20, 0x7F	; 127
    1ea0:	57 e4       	ldi	r21, 0x47	; 71
    1ea2:	0e 94 dd 26 	call	0x4dba	; 0x4dba <__gesf2>
    1ea6:	18 16       	cp	r1, r24
    1ea8:	4c f5       	brge	.+82     	; 0x1efc <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eaa:	69 8d       	ldd	r22, Y+25	; 0x19
    1eac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1eae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1eb0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1eb2:	20 e0       	ldi	r18, 0x00	; 0
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	40 e2       	ldi	r20, 0x20	; 32
    1eb8:	51 e4       	ldi	r21, 0x41	; 65
    1eba:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__mulsf3>
    1ebe:	dc 01       	movw	r26, r24
    1ec0:	cb 01       	movw	r24, r22
    1ec2:	bc 01       	movw	r22, r24
    1ec4:	cd 01       	movw	r24, r26
    1ec6:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <__fixunssfsi>
    1eca:	dc 01       	movw	r26, r24
    1ecc:	cb 01       	movw	r24, r22
    1ece:	9c 8b       	std	Y+20, r25	; 0x14
    1ed0:	8b 8b       	std	Y+19, r24	; 0x13
    1ed2:	0f c0       	rjmp	.+30     	; 0x1ef2 <LCD_sendCommand+0x7be>
    1ed4:	80 e9       	ldi	r24, 0x90	; 144
    1ed6:	91 e0       	ldi	r25, 0x01	; 1
    1ed8:	9a 8b       	std	Y+18, r25	; 0x12
    1eda:	89 8b       	std	Y+17, r24	; 0x11
    1edc:	89 89       	ldd	r24, Y+17	; 0x11
    1ede:	9a 89       	ldd	r25, Y+18	; 0x12
    1ee0:	01 97       	sbiw	r24, 0x01	; 1
    1ee2:	f1 f7       	brne	.-4      	; 0x1ee0 <LCD_sendCommand+0x7ac>
    1ee4:	9a 8b       	std	Y+18, r25	; 0x12
    1ee6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ee8:	8b 89       	ldd	r24, Y+19	; 0x13
    1eea:	9c 89       	ldd	r25, Y+20	; 0x14
    1eec:	01 97       	sbiw	r24, 0x01	; 1
    1eee:	9c 8b       	std	Y+20, r25	; 0x14
    1ef0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ef2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ef4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ef6:	00 97       	sbiw	r24, 0x00	; 0
    1ef8:	69 f7       	brne	.-38     	; 0x1ed4 <LCD_sendCommand+0x7a0>
    1efa:	14 c0       	rjmp	.+40     	; 0x1f24 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1efc:	6d 89       	ldd	r22, Y+21	; 0x15
    1efe:	7e 89       	ldd	r23, Y+22	; 0x16
    1f00:	8f 89       	ldd	r24, Y+23	; 0x17
    1f02:	98 8d       	ldd	r25, Y+24	; 0x18
    1f04:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <__fixunssfsi>
    1f08:	dc 01       	movw	r26, r24
    1f0a:	cb 01       	movw	r24, r22
    1f0c:	9c 8b       	std	Y+20, r25	; 0x14
    1f0e:	8b 8b       	std	Y+19, r24	; 0x13
    1f10:	8b 89       	ldd	r24, Y+19	; 0x13
    1f12:	9c 89       	ldd	r25, Y+20	; 0x14
    1f14:	98 8b       	std	Y+16, r25	; 0x10
    1f16:	8f 87       	std	Y+15, r24	; 0x0f
    1f18:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f1a:	98 89       	ldd	r25, Y+16	; 0x10
    1f1c:	01 97       	sbiw	r24, 0x01	; 1
    1f1e:	f1 f7       	brne	.-4      	; 0x1f1c <LCD_sendCommand+0x7e8>
    1f20:	98 8b       	std	Y+16, r25	; 0x10
    1f22:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1f24:	82 e0       	ldi	r24, 0x02	; 2
    1f26:	67 e0       	ldi	r22, 0x07	; 7
    1f28:	40 e0       	ldi	r20, 0x00	; 0
    1f2a:	0e 94 23 05 	call	0xa46	; 0xa46 <GPIO_writePin>
    1f2e:	80 e0       	ldi	r24, 0x00	; 0
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	a0 e8       	ldi	r26, 0x80	; 128
    1f34:	bf e3       	ldi	r27, 0x3F	; 63
    1f36:	8b 87       	std	Y+11, r24	; 0x0b
    1f38:	9c 87       	std	Y+12, r25	; 0x0c
    1f3a:	ad 87       	std	Y+13, r26	; 0x0d
    1f3c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f3e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f40:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f42:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f44:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f46:	20 e0       	ldi	r18, 0x00	; 0
    1f48:	30 e0       	ldi	r19, 0x00	; 0
    1f4a:	4a e7       	ldi	r20, 0x7A	; 122
    1f4c:	55 e4       	ldi	r21, 0x45	; 69
    1f4e:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__mulsf3>
    1f52:	dc 01       	movw	r26, r24
    1f54:	cb 01       	movw	r24, r22
    1f56:	8f 83       	std	Y+7, r24	; 0x07
    1f58:	98 87       	std	Y+8, r25	; 0x08
    1f5a:	a9 87       	std	Y+9, r26	; 0x09
    1f5c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f5e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f60:	78 85       	ldd	r23, Y+8	; 0x08
    1f62:	89 85       	ldd	r24, Y+9	; 0x09
    1f64:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f66:	20 e0       	ldi	r18, 0x00	; 0
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	40 e8       	ldi	r20, 0x80	; 128
    1f6c:	5f e3       	ldi	r21, 0x3F	; 63
    1f6e:	0e 94 93 25 	call	0x4b26	; 0x4b26 <__cmpsf2>
    1f72:	88 23       	and	r24, r24
    1f74:	2c f4       	brge	.+10     	; 0x1f80 <LCD_sendCommand+0x84c>
		__ticks = 1;
    1f76:	81 e0       	ldi	r24, 0x01	; 1
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	9e 83       	std	Y+6, r25	; 0x06
    1f7c:	8d 83       	std	Y+5, r24	; 0x05
    1f7e:	3f c0       	rjmp	.+126    	; 0x1ffe <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    1f80:	6f 81       	ldd	r22, Y+7	; 0x07
    1f82:	78 85       	ldd	r23, Y+8	; 0x08
    1f84:	89 85       	ldd	r24, Y+9	; 0x09
    1f86:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f88:	20 e0       	ldi	r18, 0x00	; 0
    1f8a:	3f ef       	ldi	r19, 0xFF	; 255
    1f8c:	4f e7       	ldi	r20, 0x7F	; 127
    1f8e:	57 e4       	ldi	r21, 0x47	; 71
    1f90:	0e 94 dd 26 	call	0x4dba	; 0x4dba <__gesf2>
    1f94:	18 16       	cp	r1, r24
    1f96:	4c f5       	brge	.+82     	; 0x1fea <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f98:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f9a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fa0:	20 e0       	ldi	r18, 0x00	; 0
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	40 e2       	ldi	r20, 0x20	; 32
    1fa6:	51 e4       	ldi	r21, 0x41	; 65
    1fa8:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__mulsf3>
    1fac:	dc 01       	movw	r26, r24
    1fae:	cb 01       	movw	r24, r22
    1fb0:	bc 01       	movw	r22, r24
    1fb2:	cd 01       	movw	r24, r26
    1fb4:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <__fixunssfsi>
    1fb8:	dc 01       	movw	r26, r24
    1fba:	cb 01       	movw	r24, r22
    1fbc:	9e 83       	std	Y+6, r25	; 0x06
    1fbe:	8d 83       	std	Y+5, r24	; 0x05
    1fc0:	0f c0       	rjmp	.+30     	; 0x1fe0 <LCD_sendCommand+0x8ac>
    1fc2:	80 e9       	ldi	r24, 0x90	; 144
    1fc4:	91 e0       	ldi	r25, 0x01	; 1
    1fc6:	9c 83       	std	Y+4, r25	; 0x04
    1fc8:	8b 83       	std	Y+3, r24	; 0x03
    1fca:	8b 81       	ldd	r24, Y+3	; 0x03
    1fcc:	9c 81       	ldd	r25, Y+4	; 0x04
    1fce:	01 97       	sbiw	r24, 0x01	; 1
    1fd0:	f1 f7       	brne	.-4      	; 0x1fce <LCD_sendCommand+0x89a>
    1fd2:	9c 83       	std	Y+4, r25	; 0x04
    1fd4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fd6:	8d 81       	ldd	r24, Y+5	; 0x05
    1fd8:	9e 81       	ldd	r25, Y+6	; 0x06
    1fda:	01 97       	sbiw	r24, 0x01	; 1
    1fdc:	9e 83       	std	Y+6, r25	; 0x06
    1fde:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fe0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe2:	9e 81       	ldd	r25, Y+6	; 0x06
    1fe4:	00 97       	sbiw	r24, 0x00	; 0
    1fe6:	69 f7       	brne	.-38     	; 0x1fc2 <LCD_sendCommand+0x88e>
    1fe8:	14 c0       	rjmp	.+40     	; 0x2012 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fea:	6f 81       	ldd	r22, Y+7	; 0x07
    1fec:	78 85       	ldd	r23, Y+8	; 0x08
    1fee:	89 85       	ldd	r24, Y+9	; 0x09
    1ff0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ff2:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <__fixunssfsi>
    1ff6:	dc 01       	movw	r26, r24
    1ff8:	cb 01       	movw	r24, r22
    1ffa:	9e 83       	std	Y+6, r25	; 0x06
    1ffc:	8d 83       	std	Y+5, r24	; 0x05
    1ffe:	8d 81       	ldd	r24, Y+5	; 0x05
    2000:	9e 81       	ldd	r25, Y+6	; 0x06
    2002:	9a 83       	std	Y+2, r25	; 0x02
    2004:	89 83       	std	Y+1, r24	; 0x01
    2006:	89 81       	ldd	r24, Y+1	; 0x01
    2008:	9a 81       	ldd	r25, Y+2	; 0x02
    200a:	01 97       	sbiw	r24, 0x01	; 1
    200c:	f1 f7       	brne	.-4      	; 0x200a <LCD_sendCommand+0x8d6>
    200e:	9a 83       	std	Y+2, r25	; 0x02
    2010:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2012:	cd 59       	subi	r28, 0x9D	; 157
    2014:	df 4f       	sbci	r29, 0xFF	; 255
    2016:	0f b6       	in	r0, 0x3f	; 63
    2018:	f8 94       	cli
    201a:	de bf       	out	0x3e, r29	; 62
    201c:	0f be       	out	0x3f, r0	; 63
    201e:	cd bf       	out	0x3d, r28	; 61
    2020:	cf 91       	pop	r28
    2022:	df 91       	pop	r29
    2024:	1f 91       	pop	r17
    2026:	0f 91       	pop	r16
    2028:	08 95       	ret

0000202a <LCD_displayCharacter>:
/*
 * Description :
 -> Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    202a:	0f 93       	push	r16
    202c:	1f 93       	push	r17
    202e:	df 93       	push	r29
    2030:	cf 93       	push	r28
    2032:	cd b7       	in	r28, 0x3d	; 61
    2034:	de b7       	in	r29, 0x3e	; 62
    2036:	c3 56       	subi	r28, 0x63	; 99
    2038:	d0 40       	sbci	r29, 0x00	; 0
    203a:	0f b6       	in	r0, 0x3f	; 63
    203c:	f8 94       	cli
    203e:	de bf       	out	0x3e, r29	; 62
    2040:	0f be       	out	0x3f, r0	; 63
    2042:	cd bf       	out	0x3d, r28	; 61
    2044:	fe 01       	movw	r30, r28
    2046:	ed 59       	subi	r30, 0x9D	; 157
    2048:	ff 4f       	sbci	r31, 0xFF	; 255
    204a:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    204c:	82 e0       	ldi	r24, 0x02	; 2
    204e:	66 e0       	ldi	r22, 0x06	; 6
    2050:	41 e0       	ldi	r20, 0x01	; 1
    2052:	0e 94 23 05 	call	0xa46	; 0xa46 <GPIO_writePin>
    2056:	fe 01       	movw	r30, r28
    2058:	e1 5a       	subi	r30, 0xA1	; 161
    205a:	ff 4f       	sbci	r31, 0xFF	; 255
    205c:	80 e0       	ldi	r24, 0x00	; 0
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	a0 e8       	ldi	r26, 0x80	; 128
    2062:	bf e3       	ldi	r27, 0x3F	; 63
    2064:	80 83       	st	Z, r24
    2066:	91 83       	std	Z+1, r25	; 0x01
    2068:	a2 83       	std	Z+2, r26	; 0x02
    206a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    206c:	8e 01       	movw	r16, r28
    206e:	05 5a       	subi	r16, 0xA5	; 165
    2070:	1f 4f       	sbci	r17, 0xFF	; 255
    2072:	fe 01       	movw	r30, r28
    2074:	e1 5a       	subi	r30, 0xA1	; 161
    2076:	ff 4f       	sbci	r31, 0xFF	; 255
    2078:	60 81       	ld	r22, Z
    207a:	71 81       	ldd	r23, Z+1	; 0x01
    207c:	82 81       	ldd	r24, Z+2	; 0x02
    207e:	93 81       	ldd	r25, Z+3	; 0x03
    2080:	20 e0       	ldi	r18, 0x00	; 0
    2082:	30 e0       	ldi	r19, 0x00	; 0
    2084:	4a e7       	ldi	r20, 0x7A	; 122
    2086:	55 e4       	ldi	r21, 0x45	; 69
    2088:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__mulsf3>
    208c:	dc 01       	movw	r26, r24
    208e:	cb 01       	movw	r24, r22
    2090:	f8 01       	movw	r30, r16
    2092:	80 83       	st	Z, r24
    2094:	91 83       	std	Z+1, r25	; 0x01
    2096:	a2 83       	std	Z+2, r26	; 0x02
    2098:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    209a:	fe 01       	movw	r30, r28
    209c:	e5 5a       	subi	r30, 0xA5	; 165
    209e:	ff 4f       	sbci	r31, 0xFF	; 255
    20a0:	60 81       	ld	r22, Z
    20a2:	71 81       	ldd	r23, Z+1	; 0x01
    20a4:	82 81       	ldd	r24, Z+2	; 0x02
    20a6:	93 81       	ldd	r25, Z+3	; 0x03
    20a8:	20 e0       	ldi	r18, 0x00	; 0
    20aa:	30 e0       	ldi	r19, 0x00	; 0
    20ac:	40 e8       	ldi	r20, 0x80	; 128
    20ae:	5f e3       	ldi	r21, 0x3F	; 63
    20b0:	0e 94 93 25 	call	0x4b26	; 0x4b26 <__cmpsf2>
    20b4:	88 23       	and	r24, r24
    20b6:	44 f4       	brge	.+16     	; 0x20c8 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    20b8:	fe 01       	movw	r30, r28
    20ba:	e7 5a       	subi	r30, 0xA7	; 167
    20bc:	ff 4f       	sbci	r31, 0xFF	; 255
    20be:	81 e0       	ldi	r24, 0x01	; 1
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	91 83       	std	Z+1, r25	; 0x01
    20c4:	80 83       	st	Z, r24
    20c6:	64 c0       	rjmp	.+200    	; 0x2190 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    20c8:	fe 01       	movw	r30, r28
    20ca:	e5 5a       	subi	r30, 0xA5	; 165
    20cc:	ff 4f       	sbci	r31, 0xFF	; 255
    20ce:	60 81       	ld	r22, Z
    20d0:	71 81       	ldd	r23, Z+1	; 0x01
    20d2:	82 81       	ldd	r24, Z+2	; 0x02
    20d4:	93 81       	ldd	r25, Z+3	; 0x03
    20d6:	20 e0       	ldi	r18, 0x00	; 0
    20d8:	3f ef       	ldi	r19, 0xFF	; 255
    20da:	4f e7       	ldi	r20, 0x7F	; 127
    20dc:	57 e4       	ldi	r21, 0x47	; 71
    20de:	0e 94 dd 26 	call	0x4dba	; 0x4dba <__gesf2>
    20e2:	18 16       	cp	r1, r24
    20e4:	0c f0       	brlt	.+2      	; 0x20e8 <LCD_displayCharacter+0xbe>
    20e6:	43 c0       	rjmp	.+134    	; 0x216e <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20e8:	fe 01       	movw	r30, r28
    20ea:	e1 5a       	subi	r30, 0xA1	; 161
    20ec:	ff 4f       	sbci	r31, 0xFF	; 255
    20ee:	60 81       	ld	r22, Z
    20f0:	71 81       	ldd	r23, Z+1	; 0x01
    20f2:	82 81       	ldd	r24, Z+2	; 0x02
    20f4:	93 81       	ldd	r25, Z+3	; 0x03
    20f6:	20 e0       	ldi	r18, 0x00	; 0
    20f8:	30 e0       	ldi	r19, 0x00	; 0
    20fa:	40 e2       	ldi	r20, 0x20	; 32
    20fc:	51 e4       	ldi	r21, 0x41	; 65
    20fe:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__mulsf3>
    2102:	dc 01       	movw	r26, r24
    2104:	cb 01       	movw	r24, r22
    2106:	8e 01       	movw	r16, r28
    2108:	07 5a       	subi	r16, 0xA7	; 167
    210a:	1f 4f       	sbci	r17, 0xFF	; 255
    210c:	bc 01       	movw	r22, r24
    210e:	cd 01       	movw	r24, r26
    2110:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <__fixunssfsi>
    2114:	dc 01       	movw	r26, r24
    2116:	cb 01       	movw	r24, r22
    2118:	f8 01       	movw	r30, r16
    211a:	91 83       	std	Z+1, r25	; 0x01
    211c:	80 83       	st	Z, r24
    211e:	1f c0       	rjmp	.+62     	; 0x215e <LCD_displayCharacter+0x134>
    2120:	fe 01       	movw	r30, r28
    2122:	e9 5a       	subi	r30, 0xA9	; 169
    2124:	ff 4f       	sbci	r31, 0xFF	; 255
    2126:	80 e9       	ldi	r24, 0x90	; 144
    2128:	91 e0       	ldi	r25, 0x01	; 1
    212a:	91 83       	std	Z+1, r25	; 0x01
    212c:	80 83       	st	Z, r24
    212e:	fe 01       	movw	r30, r28
    2130:	e9 5a       	subi	r30, 0xA9	; 169
    2132:	ff 4f       	sbci	r31, 0xFF	; 255
    2134:	80 81       	ld	r24, Z
    2136:	91 81       	ldd	r25, Z+1	; 0x01
    2138:	01 97       	sbiw	r24, 0x01	; 1
    213a:	f1 f7       	brne	.-4      	; 0x2138 <LCD_displayCharacter+0x10e>
    213c:	fe 01       	movw	r30, r28
    213e:	e9 5a       	subi	r30, 0xA9	; 169
    2140:	ff 4f       	sbci	r31, 0xFF	; 255
    2142:	91 83       	std	Z+1, r25	; 0x01
    2144:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2146:	de 01       	movw	r26, r28
    2148:	a7 5a       	subi	r26, 0xA7	; 167
    214a:	bf 4f       	sbci	r27, 0xFF	; 255
    214c:	fe 01       	movw	r30, r28
    214e:	e7 5a       	subi	r30, 0xA7	; 167
    2150:	ff 4f       	sbci	r31, 0xFF	; 255
    2152:	80 81       	ld	r24, Z
    2154:	91 81       	ldd	r25, Z+1	; 0x01
    2156:	01 97       	sbiw	r24, 0x01	; 1
    2158:	11 96       	adiw	r26, 0x01	; 1
    215a:	9c 93       	st	X, r25
    215c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    215e:	fe 01       	movw	r30, r28
    2160:	e7 5a       	subi	r30, 0xA7	; 167
    2162:	ff 4f       	sbci	r31, 0xFF	; 255
    2164:	80 81       	ld	r24, Z
    2166:	91 81       	ldd	r25, Z+1	; 0x01
    2168:	00 97       	sbiw	r24, 0x00	; 0
    216a:	d1 f6       	brne	.-76     	; 0x2120 <LCD_displayCharacter+0xf6>
    216c:	27 c0       	rjmp	.+78     	; 0x21bc <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    216e:	8e 01       	movw	r16, r28
    2170:	07 5a       	subi	r16, 0xA7	; 167
    2172:	1f 4f       	sbci	r17, 0xFF	; 255
    2174:	fe 01       	movw	r30, r28
    2176:	e5 5a       	subi	r30, 0xA5	; 165
    2178:	ff 4f       	sbci	r31, 0xFF	; 255
    217a:	60 81       	ld	r22, Z
    217c:	71 81       	ldd	r23, Z+1	; 0x01
    217e:	82 81       	ldd	r24, Z+2	; 0x02
    2180:	93 81       	ldd	r25, Z+3	; 0x03
    2182:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <__fixunssfsi>
    2186:	dc 01       	movw	r26, r24
    2188:	cb 01       	movw	r24, r22
    218a:	f8 01       	movw	r30, r16
    218c:	91 83       	std	Z+1, r25	; 0x01
    218e:	80 83       	st	Z, r24
    2190:	de 01       	movw	r26, r28
    2192:	ab 5a       	subi	r26, 0xAB	; 171
    2194:	bf 4f       	sbci	r27, 0xFF	; 255
    2196:	fe 01       	movw	r30, r28
    2198:	e7 5a       	subi	r30, 0xA7	; 167
    219a:	ff 4f       	sbci	r31, 0xFF	; 255
    219c:	80 81       	ld	r24, Z
    219e:	91 81       	ldd	r25, Z+1	; 0x01
    21a0:	8d 93       	st	X+, r24
    21a2:	9c 93       	st	X, r25
    21a4:	fe 01       	movw	r30, r28
    21a6:	eb 5a       	subi	r30, 0xAB	; 171
    21a8:	ff 4f       	sbci	r31, 0xFF	; 255
    21aa:	80 81       	ld	r24, Z
    21ac:	91 81       	ldd	r25, Z+1	; 0x01
    21ae:	01 97       	sbiw	r24, 0x01	; 1
    21b0:	f1 f7       	brne	.-4      	; 0x21ae <LCD_displayCharacter+0x184>
    21b2:	fe 01       	movw	r30, r28
    21b4:	eb 5a       	subi	r30, 0xAB	; 171
    21b6:	ff 4f       	sbci	r31, 0xFF	; 255
    21b8:	91 83       	std	Z+1, r25	; 0x01
    21ba:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    21bc:	82 e0       	ldi	r24, 0x02	; 2
    21be:	67 e0       	ldi	r22, 0x07	; 7
    21c0:	41 e0       	ldi	r20, 0x01	; 1
    21c2:	0e 94 23 05 	call	0xa46	; 0xa46 <GPIO_writePin>
    21c6:	fe 01       	movw	r30, r28
    21c8:	ef 5a       	subi	r30, 0xAF	; 175
    21ca:	ff 4f       	sbci	r31, 0xFF	; 255
    21cc:	80 e0       	ldi	r24, 0x00	; 0
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	a0 e8       	ldi	r26, 0x80	; 128
    21d2:	bf e3       	ldi	r27, 0x3F	; 63
    21d4:	80 83       	st	Z, r24
    21d6:	91 83       	std	Z+1, r25	; 0x01
    21d8:	a2 83       	std	Z+2, r26	; 0x02
    21da:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21dc:	8e 01       	movw	r16, r28
    21de:	03 5b       	subi	r16, 0xB3	; 179
    21e0:	1f 4f       	sbci	r17, 0xFF	; 255
    21e2:	fe 01       	movw	r30, r28
    21e4:	ef 5a       	subi	r30, 0xAF	; 175
    21e6:	ff 4f       	sbci	r31, 0xFF	; 255
    21e8:	60 81       	ld	r22, Z
    21ea:	71 81       	ldd	r23, Z+1	; 0x01
    21ec:	82 81       	ldd	r24, Z+2	; 0x02
    21ee:	93 81       	ldd	r25, Z+3	; 0x03
    21f0:	20 e0       	ldi	r18, 0x00	; 0
    21f2:	30 e0       	ldi	r19, 0x00	; 0
    21f4:	4a e7       	ldi	r20, 0x7A	; 122
    21f6:	55 e4       	ldi	r21, 0x45	; 69
    21f8:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__mulsf3>
    21fc:	dc 01       	movw	r26, r24
    21fe:	cb 01       	movw	r24, r22
    2200:	f8 01       	movw	r30, r16
    2202:	80 83       	st	Z, r24
    2204:	91 83       	std	Z+1, r25	; 0x01
    2206:	a2 83       	std	Z+2, r26	; 0x02
    2208:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    220a:	fe 01       	movw	r30, r28
    220c:	e3 5b       	subi	r30, 0xB3	; 179
    220e:	ff 4f       	sbci	r31, 0xFF	; 255
    2210:	60 81       	ld	r22, Z
    2212:	71 81       	ldd	r23, Z+1	; 0x01
    2214:	82 81       	ldd	r24, Z+2	; 0x02
    2216:	93 81       	ldd	r25, Z+3	; 0x03
    2218:	20 e0       	ldi	r18, 0x00	; 0
    221a:	30 e0       	ldi	r19, 0x00	; 0
    221c:	40 e8       	ldi	r20, 0x80	; 128
    221e:	5f e3       	ldi	r21, 0x3F	; 63
    2220:	0e 94 93 25 	call	0x4b26	; 0x4b26 <__cmpsf2>
    2224:	88 23       	and	r24, r24
    2226:	44 f4       	brge	.+16     	; 0x2238 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    2228:	fe 01       	movw	r30, r28
    222a:	e5 5b       	subi	r30, 0xB5	; 181
    222c:	ff 4f       	sbci	r31, 0xFF	; 255
    222e:	81 e0       	ldi	r24, 0x01	; 1
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	91 83       	std	Z+1, r25	; 0x01
    2234:	80 83       	st	Z, r24
    2236:	64 c0       	rjmp	.+200    	; 0x2300 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    2238:	fe 01       	movw	r30, r28
    223a:	e3 5b       	subi	r30, 0xB3	; 179
    223c:	ff 4f       	sbci	r31, 0xFF	; 255
    223e:	60 81       	ld	r22, Z
    2240:	71 81       	ldd	r23, Z+1	; 0x01
    2242:	82 81       	ldd	r24, Z+2	; 0x02
    2244:	93 81       	ldd	r25, Z+3	; 0x03
    2246:	20 e0       	ldi	r18, 0x00	; 0
    2248:	3f ef       	ldi	r19, 0xFF	; 255
    224a:	4f e7       	ldi	r20, 0x7F	; 127
    224c:	57 e4       	ldi	r21, 0x47	; 71
    224e:	0e 94 dd 26 	call	0x4dba	; 0x4dba <__gesf2>
    2252:	18 16       	cp	r1, r24
    2254:	0c f0       	brlt	.+2      	; 0x2258 <LCD_displayCharacter+0x22e>
    2256:	43 c0       	rjmp	.+134    	; 0x22de <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2258:	fe 01       	movw	r30, r28
    225a:	ef 5a       	subi	r30, 0xAF	; 175
    225c:	ff 4f       	sbci	r31, 0xFF	; 255
    225e:	60 81       	ld	r22, Z
    2260:	71 81       	ldd	r23, Z+1	; 0x01
    2262:	82 81       	ldd	r24, Z+2	; 0x02
    2264:	93 81       	ldd	r25, Z+3	; 0x03
    2266:	20 e0       	ldi	r18, 0x00	; 0
    2268:	30 e0       	ldi	r19, 0x00	; 0
    226a:	40 e2       	ldi	r20, 0x20	; 32
    226c:	51 e4       	ldi	r21, 0x41	; 65
    226e:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__mulsf3>
    2272:	dc 01       	movw	r26, r24
    2274:	cb 01       	movw	r24, r22
    2276:	8e 01       	movw	r16, r28
    2278:	05 5b       	subi	r16, 0xB5	; 181
    227a:	1f 4f       	sbci	r17, 0xFF	; 255
    227c:	bc 01       	movw	r22, r24
    227e:	cd 01       	movw	r24, r26
    2280:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <__fixunssfsi>
    2284:	dc 01       	movw	r26, r24
    2286:	cb 01       	movw	r24, r22
    2288:	f8 01       	movw	r30, r16
    228a:	91 83       	std	Z+1, r25	; 0x01
    228c:	80 83       	st	Z, r24
    228e:	1f c0       	rjmp	.+62     	; 0x22ce <LCD_displayCharacter+0x2a4>
    2290:	fe 01       	movw	r30, r28
    2292:	e7 5b       	subi	r30, 0xB7	; 183
    2294:	ff 4f       	sbci	r31, 0xFF	; 255
    2296:	80 e9       	ldi	r24, 0x90	; 144
    2298:	91 e0       	ldi	r25, 0x01	; 1
    229a:	91 83       	std	Z+1, r25	; 0x01
    229c:	80 83       	st	Z, r24
    229e:	fe 01       	movw	r30, r28
    22a0:	e7 5b       	subi	r30, 0xB7	; 183
    22a2:	ff 4f       	sbci	r31, 0xFF	; 255
    22a4:	80 81       	ld	r24, Z
    22a6:	91 81       	ldd	r25, Z+1	; 0x01
    22a8:	01 97       	sbiw	r24, 0x01	; 1
    22aa:	f1 f7       	brne	.-4      	; 0x22a8 <LCD_displayCharacter+0x27e>
    22ac:	fe 01       	movw	r30, r28
    22ae:	e7 5b       	subi	r30, 0xB7	; 183
    22b0:	ff 4f       	sbci	r31, 0xFF	; 255
    22b2:	91 83       	std	Z+1, r25	; 0x01
    22b4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22b6:	de 01       	movw	r26, r28
    22b8:	a5 5b       	subi	r26, 0xB5	; 181
    22ba:	bf 4f       	sbci	r27, 0xFF	; 255
    22bc:	fe 01       	movw	r30, r28
    22be:	e5 5b       	subi	r30, 0xB5	; 181
    22c0:	ff 4f       	sbci	r31, 0xFF	; 255
    22c2:	80 81       	ld	r24, Z
    22c4:	91 81       	ldd	r25, Z+1	; 0x01
    22c6:	01 97       	sbiw	r24, 0x01	; 1
    22c8:	11 96       	adiw	r26, 0x01	; 1
    22ca:	9c 93       	st	X, r25
    22cc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ce:	fe 01       	movw	r30, r28
    22d0:	e5 5b       	subi	r30, 0xB5	; 181
    22d2:	ff 4f       	sbci	r31, 0xFF	; 255
    22d4:	80 81       	ld	r24, Z
    22d6:	91 81       	ldd	r25, Z+1	; 0x01
    22d8:	00 97       	sbiw	r24, 0x00	; 0
    22da:	d1 f6       	brne	.-76     	; 0x2290 <LCD_displayCharacter+0x266>
    22dc:	27 c0       	rjmp	.+78     	; 0x232c <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22de:	8e 01       	movw	r16, r28
    22e0:	05 5b       	subi	r16, 0xB5	; 181
    22e2:	1f 4f       	sbci	r17, 0xFF	; 255
    22e4:	fe 01       	movw	r30, r28
    22e6:	e3 5b       	subi	r30, 0xB3	; 179
    22e8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ea:	60 81       	ld	r22, Z
    22ec:	71 81       	ldd	r23, Z+1	; 0x01
    22ee:	82 81       	ldd	r24, Z+2	; 0x02
    22f0:	93 81       	ldd	r25, Z+3	; 0x03
    22f2:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <__fixunssfsi>
    22f6:	dc 01       	movw	r26, r24
    22f8:	cb 01       	movw	r24, r22
    22fa:	f8 01       	movw	r30, r16
    22fc:	91 83       	std	Z+1, r25	; 0x01
    22fe:	80 83       	st	Z, r24
    2300:	de 01       	movw	r26, r28
    2302:	a9 5b       	subi	r26, 0xB9	; 185
    2304:	bf 4f       	sbci	r27, 0xFF	; 255
    2306:	fe 01       	movw	r30, r28
    2308:	e5 5b       	subi	r30, 0xB5	; 181
    230a:	ff 4f       	sbci	r31, 0xFF	; 255
    230c:	80 81       	ld	r24, Z
    230e:	91 81       	ldd	r25, Z+1	; 0x01
    2310:	8d 93       	st	X+, r24
    2312:	9c 93       	st	X, r25
    2314:	fe 01       	movw	r30, r28
    2316:	e9 5b       	subi	r30, 0xB9	; 185
    2318:	ff 4f       	sbci	r31, 0xFF	; 255
    231a:	80 81       	ld	r24, Z
    231c:	91 81       	ldd	r25, Z+1	; 0x01
    231e:	01 97       	sbiw	r24, 0x01	; 1
    2320:	f1 f7       	brne	.-4      	; 0x231e <LCD_displayCharacter+0x2f4>
    2322:	fe 01       	movw	r30, r28
    2324:	e9 5b       	subi	r30, 0xB9	; 185
    2326:	ff 4f       	sbci	r31, 0xFF	; 255
    2328:	91 83       	std	Z+1, r25	; 0x01
    232a:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    232c:	fe 01       	movw	r30, r28
    232e:	ed 59       	subi	r30, 0x9D	; 157
    2330:	ff 4f       	sbci	r31, 0xFF	; 255
    2332:	80 81       	ld	r24, Z
    2334:	88 2f       	mov	r24, r24
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	80 71       	andi	r24, 0x10	; 16
    233a:	90 70       	andi	r25, 0x00	; 0
    233c:	95 95       	asr	r25
    233e:	87 95       	ror	r24
    2340:	95 95       	asr	r25
    2342:	87 95       	ror	r24
    2344:	95 95       	asr	r25
    2346:	87 95       	ror	r24
    2348:	95 95       	asr	r25
    234a:	87 95       	ror	r24
    234c:	98 2f       	mov	r25, r24
    234e:	82 e0       	ldi	r24, 0x02	; 2
    2350:	62 e0       	ldi	r22, 0x02	; 2
    2352:	49 2f       	mov	r20, r25
    2354:	0e 94 23 05 	call	0xa46	; 0xa46 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    2358:	fe 01       	movw	r30, r28
    235a:	ed 59       	subi	r30, 0x9D	; 157
    235c:	ff 4f       	sbci	r31, 0xFF	; 255
    235e:	80 81       	ld	r24, Z
    2360:	88 2f       	mov	r24, r24
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	80 72       	andi	r24, 0x20	; 32
    2366:	90 70       	andi	r25, 0x00	; 0
    2368:	95 95       	asr	r25
    236a:	87 95       	ror	r24
    236c:	95 95       	asr	r25
    236e:	87 95       	ror	r24
    2370:	95 95       	asr	r25
    2372:	87 95       	ror	r24
    2374:	95 95       	asr	r25
    2376:	87 95       	ror	r24
    2378:	95 95       	asr	r25
    237a:	87 95       	ror	r24
    237c:	98 2f       	mov	r25, r24
    237e:	82 e0       	ldi	r24, 0x02	; 2
    2380:	63 e0       	ldi	r22, 0x03	; 3
    2382:	49 2f       	mov	r20, r25
    2384:	0e 94 23 05 	call	0xa46	; 0xa46 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    2388:	fe 01       	movw	r30, r28
    238a:	ed 59       	subi	r30, 0x9D	; 157
    238c:	ff 4f       	sbci	r31, 0xFF	; 255
    238e:	80 81       	ld	r24, Z
    2390:	88 2f       	mov	r24, r24
    2392:	90 e0       	ldi	r25, 0x00	; 0
    2394:	80 74       	andi	r24, 0x40	; 64
    2396:	90 70       	andi	r25, 0x00	; 0
    2398:	08 2e       	mov	r0, r24
    239a:	89 2f       	mov	r24, r25
    239c:	00 0c       	add	r0, r0
    239e:	88 1f       	adc	r24, r24
    23a0:	99 0b       	sbc	r25, r25
    23a2:	00 0c       	add	r0, r0
    23a4:	88 1f       	adc	r24, r24
    23a6:	99 1f       	adc	r25, r25
    23a8:	98 2f       	mov	r25, r24
    23aa:	82 e0       	ldi	r24, 0x02	; 2
    23ac:	64 e0       	ldi	r22, 0x04	; 4
    23ae:	49 2f       	mov	r20, r25
    23b0:	0e 94 23 05 	call	0xa46	; 0xa46 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    23b4:	fe 01       	movw	r30, r28
    23b6:	ed 59       	subi	r30, 0x9D	; 157
    23b8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ba:	80 81       	ld	r24, Z
    23bc:	98 2f       	mov	r25, r24
    23be:	99 1f       	adc	r25, r25
    23c0:	99 27       	eor	r25, r25
    23c2:	99 1f       	adc	r25, r25
    23c4:	82 e0       	ldi	r24, 0x02	; 2
    23c6:	65 e0       	ldi	r22, 0x05	; 5
    23c8:	49 2f       	mov	r20, r25
    23ca:	0e 94 23 05 	call	0xa46	; 0xa46 <GPIO_writePin>
    23ce:	fe 01       	movw	r30, r28
    23d0:	ed 5b       	subi	r30, 0xBD	; 189
    23d2:	ff 4f       	sbci	r31, 0xFF	; 255
    23d4:	80 e0       	ldi	r24, 0x00	; 0
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	a0 e8       	ldi	r26, 0x80	; 128
    23da:	bf e3       	ldi	r27, 0x3F	; 63
    23dc:	80 83       	st	Z, r24
    23de:	91 83       	std	Z+1, r25	; 0x01
    23e0:	a2 83       	std	Z+2, r26	; 0x02
    23e2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23e4:	8e 01       	movw	r16, r28
    23e6:	01 5c       	subi	r16, 0xC1	; 193
    23e8:	1f 4f       	sbci	r17, 0xFF	; 255
    23ea:	fe 01       	movw	r30, r28
    23ec:	ed 5b       	subi	r30, 0xBD	; 189
    23ee:	ff 4f       	sbci	r31, 0xFF	; 255
    23f0:	60 81       	ld	r22, Z
    23f2:	71 81       	ldd	r23, Z+1	; 0x01
    23f4:	82 81       	ldd	r24, Z+2	; 0x02
    23f6:	93 81       	ldd	r25, Z+3	; 0x03
    23f8:	20 e0       	ldi	r18, 0x00	; 0
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	4a e7       	ldi	r20, 0x7A	; 122
    23fe:	55 e4       	ldi	r21, 0x45	; 69
    2400:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__mulsf3>
    2404:	dc 01       	movw	r26, r24
    2406:	cb 01       	movw	r24, r22
    2408:	f8 01       	movw	r30, r16
    240a:	80 83       	st	Z, r24
    240c:	91 83       	std	Z+1, r25	; 0x01
    240e:	a2 83       	std	Z+2, r26	; 0x02
    2410:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2412:	fe 01       	movw	r30, r28
    2414:	ff 96       	adiw	r30, 0x3f	; 63
    2416:	60 81       	ld	r22, Z
    2418:	71 81       	ldd	r23, Z+1	; 0x01
    241a:	82 81       	ldd	r24, Z+2	; 0x02
    241c:	93 81       	ldd	r25, Z+3	; 0x03
    241e:	20 e0       	ldi	r18, 0x00	; 0
    2420:	30 e0       	ldi	r19, 0x00	; 0
    2422:	40 e8       	ldi	r20, 0x80	; 128
    2424:	5f e3       	ldi	r21, 0x3F	; 63
    2426:	0e 94 93 25 	call	0x4b26	; 0x4b26 <__cmpsf2>
    242a:	88 23       	and	r24, r24
    242c:	2c f4       	brge	.+10     	; 0x2438 <LCD_displayCharacter+0x40e>
		__ticks = 1;
    242e:	81 e0       	ldi	r24, 0x01	; 1
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	9e af       	std	Y+62, r25	; 0x3e
    2434:	8d af       	std	Y+61, r24	; 0x3d
    2436:	46 c0       	rjmp	.+140    	; 0x24c4 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    2438:	fe 01       	movw	r30, r28
    243a:	ff 96       	adiw	r30, 0x3f	; 63
    243c:	60 81       	ld	r22, Z
    243e:	71 81       	ldd	r23, Z+1	; 0x01
    2440:	82 81       	ldd	r24, Z+2	; 0x02
    2442:	93 81       	ldd	r25, Z+3	; 0x03
    2444:	20 e0       	ldi	r18, 0x00	; 0
    2446:	3f ef       	ldi	r19, 0xFF	; 255
    2448:	4f e7       	ldi	r20, 0x7F	; 127
    244a:	57 e4       	ldi	r21, 0x47	; 71
    244c:	0e 94 dd 26 	call	0x4dba	; 0x4dba <__gesf2>
    2450:	18 16       	cp	r1, r24
    2452:	64 f5       	brge	.+88     	; 0x24ac <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2454:	fe 01       	movw	r30, r28
    2456:	ed 5b       	subi	r30, 0xBD	; 189
    2458:	ff 4f       	sbci	r31, 0xFF	; 255
    245a:	60 81       	ld	r22, Z
    245c:	71 81       	ldd	r23, Z+1	; 0x01
    245e:	82 81       	ldd	r24, Z+2	; 0x02
    2460:	93 81       	ldd	r25, Z+3	; 0x03
    2462:	20 e0       	ldi	r18, 0x00	; 0
    2464:	30 e0       	ldi	r19, 0x00	; 0
    2466:	40 e2       	ldi	r20, 0x20	; 32
    2468:	51 e4       	ldi	r21, 0x41	; 65
    246a:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__mulsf3>
    246e:	dc 01       	movw	r26, r24
    2470:	cb 01       	movw	r24, r22
    2472:	bc 01       	movw	r22, r24
    2474:	cd 01       	movw	r24, r26
    2476:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <__fixunssfsi>
    247a:	dc 01       	movw	r26, r24
    247c:	cb 01       	movw	r24, r22
    247e:	9e af       	std	Y+62, r25	; 0x3e
    2480:	8d af       	std	Y+61, r24	; 0x3d
    2482:	0f c0       	rjmp	.+30     	; 0x24a2 <LCD_displayCharacter+0x478>
    2484:	80 e9       	ldi	r24, 0x90	; 144
    2486:	91 e0       	ldi	r25, 0x01	; 1
    2488:	9c af       	std	Y+60, r25	; 0x3c
    248a:	8b af       	std	Y+59, r24	; 0x3b
    248c:	8b ad       	ldd	r24, Y+59	; 0x3b
    248e:	9c ad       	ldd	r25, Y+60	; 0x3c
    2490:	01 97       	sbiw	r24, 0x01	; 1
    2492:	f1 f7       	brne	.-4      	; 0x2490 <LCD_displayCharacter+0x466>
    2494:	9c af       	std	Y+60, r25	; 0x3c
    2496:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2498:	8d ad       	ldd	r24, Y+61	; 0x3d
    249a:	9e ad       	ldd	r25, Y+62	; 0x3e
    249c:	01 97       	sbiw	r24, 0x01	; 1
    249e:	9e af       	std	Y+62, r25	; 0x3e
    24a0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24a2:	8d ad       	ldd	r24, Y+61	; 0x3d
    24a4:	9e ad       	ldd	r25, Y+62	; 0x3e
    24a6:	00 97       	sbiw	r24, 0x00	; 0
    24a8:	69 f7       	brne	.-38     	; 0x2484 <LCD_displayCharacter+0x45a>
    24aa:	16 c0       	rjmp	.+44     	; 0x24d8 <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ac:	fe 01       	movw	r30, r28
    24ae:	ff 96       	adiw	r30, 0x3f	; 63
    24b0:	60 81       	ld	r22, Z
    24b2:	71 81       	ldd	r23, Z+1	; 0x01
    24b4:	82 81       	ldd	r24, Z+2	; 0x02
    24b6:	93 81       	ldd	r25, Z+3	; 0x03
    24b8:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <__fixunssfsi>
    24bc:	dc 01       	movw	r26, r24
    24be:	cb 01       	movw	r24, r22
    24c0:	9e af       	std	Y+62, r25	; 0x3e
    24c2:	8d af       	std	Y+61, r24	; 0x3d
    24c4:	8d ad       	ldd	r24, Y+61	; 0x3d
    24c6:	9e ad       	ldd	r25, Y+62	; 0x3e
    24c8:	9a af       	std	Y+58, r25	; 0x3a
    24ca:	89 af       	std	Y+57, r24	; 0x39
    24cc:	89 ad       	ldd	r24, Y+57	; 0x39
    24ce:	9a ad       	ldd	r25, Y+58	; 0x3a
    24d0:	01 97       	sbiw	r24, 0x01	; 1
    24d2:	f1 f7       	brne	.-4      	; 0x24d0 <LCD_displayCharacter+0x4a6>
    24d4:	9a af       	std	Y+58, r25	; 0x3a
    24d6:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    24d8:	82 e0       	ldi	r24, 0x02	; 2
    24da:	67 e0       	ldi	r22, 0x07	; 7
    24dc:	40 e0       	ldi	r20, 0x00	; 0
    24de:	0e 94 23 05 	call	0xa46	; 0xa46 <GPIO_writePin>
    24e2:	80 e0       	ldi	r24, 0x00	; 0
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	a0 e8       	ldi	r26, 0x80	; 128
    24e8:	bf e3       	ldi	r27, 0x3F	; 63
    24ea:	8d ab       	std	Y+53, r24	; 0x35
    24ec:	9e ab       	std	Y+54, r25	; 0x36
    24ee:	af ab       	std	Y+55, r26	; 0x37
    24f0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24f2:	6d a9       	ldd	r22, Y+53	; 0x35
    24f4:	7e a9       	ldd	r23, Y+54	; 0x36
    24f6:	8f a9       	ldd	r24, Y+55	; 0x37
    24f8:	98 ad       	ldd	r25, Y+56	; 0x38
    24fa:	20 e0       	ldi	r18, 0x00	; 0
    24fc:	30 e0       	ldi	r19, 0x00	; 0
    24fe:	4a e7       	ldi	r20, 0x7A	; 122
    2500:	55 e4       	ldi	r21, 0x45	; 69
    2502:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__mulsf3>
    2506:	dc 01       	movw	r26, r24
    2508:	cb 01       	movw	r24, r22
    250a:	89 ab       	std	Y+49, r24	; 0x31
    250c:	9a ab       	std	Y+50, r25	; 0x32
    250e:	ab ab       	std	Y+51, r26	; 0x33
    2510:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2512:	69 a9       	ldd	r22, Y+49	; 0x31
    2514:	7a a9       	ldd	r23, Y+50	; 0x32
    2516:	8b a9       	ldd	r24, Y+51	; 0x33
    2518:	9c a9       	ldd	r25, Y+52	; 0x34
    251a:	20 e0       	ldi	r18, 0x00	; 0
    251c:	30 e0       	ldi	r19, 0x00	; 0
    251e:	40 e8       	ldi	r20, 0x80	; 128
    2520:	5f e3       	ldi	r21, 0x3F	; 63
    2522:	0e 94 93 25 	call	0x4b26	; 0x4b26 <__cmpsf2>
    2526:	88 23       	and	r24, r24
    2528:	2c f4       	brge	.+10     	; 0x2534 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    252a:	81 e0       	ldi	r24, 0x01	; 1
    252c:	90 e0       	ldi	r25, 0x00	; 0
    252e:	98 ab       	std	Y+48, r25	; 0x30
    2530:	8f a7       	std	Y+47, r24	; 0x2f
    2532:	3f c0       	rjmp	.+126    	; 0x25b2 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    2534:	69 a9       	ldd	r22, Y+49	; 0x31
    2536:	7a a9       	ldd	r23, Y+50	; 0x32
    2538:	8b a9       	ldd	r24, Y+51	; 0x33
    253a:	9c a9       	ldd	r25, Y+52	; 0x34
    253c:	20 e0       	ldi	r18, 0x00	; 0
    253e:	3f ef       	ldi	r19, 0xFF	; 255
    2540:	4f e7       	ldi	r20, 0x7F	; 127
    2542:	57 e4       	ldi	r21, 0x47	; 71
    2544:	0e 94 dd 26 	call	0x4dba	; 0x4dba <__gesf2>
    2548:	18 16       	cp	r1, r24
    254a:	4c f5       	brge	.+82     	; 0x259e <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    254c:	6d a9       	ldd	r22, Y+53	; 0x35
    254e:	7e a9       	ldd	r23, Y+54	; 0x36
    2550:	8f a9       	ldd	r24, Y+55	; 0x37
    2552:	98 ad       	ldd	r25, Y+56	; 0x38
    2554:	20 e0       	ldi	r18, 0x00	; 0
    2556:	30 e0       	ldi	r19, 0x00	; 0
    2558:	40 e2       	ldi	r20, 0x20	; 32
    255a:	51 e4       	ldi	r21, 0x41	; 65
    255c:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__mulsf3>
    2560:	dc 01       	movw	r26, r24
    2562:	cb 01       	movw	r24, r22
    2564:	bc 01       	movw	r22, r24
    2566:	cd 01       	movw	r24, r26
    2568:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <__fixunssfsi>
    256c:	dc 01       	movw	r26, r24
    256e:	cb 01       	movw	r24, r22
    2570:	98 ab       	std	Y+48, r25	; 0x30
    2572:	8f a7       	std	Y+47, r24	; 0x2f
    2574:	0f c0       	rjmp	.+30     	; 0x2594 <LCD_displayCharacter+0x56a>
    2576:	80 e9       	ldi	r24, 0x90	; 144
    2578:	91 e0       	ldi	r25, 0x01	; 1
    257a:	9e a7       	std	Y+46, r25	; 0x2e
    257c:	8d a7       	std	Y+45, r24	; 0x2d
    257e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2580:	9e a5       	ldd	r25, Y+46	; 0x2e
    2582:	01 97       	sbiw	r24, 0x01	; 1
    2584:	f1 f7       	brne	.-4      	; 0x2582 <LCD_displayCharacter+0x558>
    2586:	9e a7       	std	Y+46, r25	; 0x2e
    2588:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    258a:	8f a5       	ldd	r24, Y+47	; 0x2f
    258c:	98 a9       	ldd	r25, Y+48	; 0x30
    258e:	01 97       	sbiw	r24, 0x01	; 1
    2590:	98 ab       	std	Y+48, r25	; 0x30
    2592:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2594:	8f a5       	ldd	r24, Y+47	; 0x2f
    2596:	98 a9       	ldd	r25, Y+48	; 0x30
    2598:	00 97       	sbiw	r24, 0x00	; 0
    259a:	69 f7       	brne	.-38     	; 0x2576 <LCD_displayCharacter+0x54c>
    259c:	14 c0       	rjmp	.+40     	; 0x25c6 <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    259e:	69 a9       	ldd	r22, Y+49	; 0x31
    25a0:	7a a9       	ldd	r23, Y+50	; 0x32
    25a2:	8b a9       	ldd	r24, Y+51	; 0x33
    25a4:	9c a9       	ldd	r25, Y+52	; 0x34
    25a6:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <__fixunssfsi>
    25aa:	dc 01       	movw	r26, r24
    25ac:	cb 01       	movw	r24, r22
    25ae:	98 ab       	std	Y+48, r25	; 0x30
    25b0:	8f a7       	std	Y+47, r24	; 0x2f
    25b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    25b4:	98 a9       	ldd	r25, Y+48	; 0x30
    25b6:	9c a7       	std	Y+44, r25	; 0x2c
    25b8:	8b a7       	std	Y+43, r24	; 0x2b
    25ba:	8b a5       	ldd	r24, Y+43	; 0x2b
    25bc:	9c a5       	ldd	r25, Y+44	; 0x2c
    25be:	01 97       	sbiw	r24, 0x01	; 1
    25c0:	f1 f7       	brne	.-4      	; 0x25be <LCD_displayCharacter+0x594>
    25c2:	9c a7       	std	Y+44, r25	; 0x2c
    25c4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    25c6:	82 e0       	ldi	r24, 0x02	; 2
    25c8:	67 e0       	ldi	r22, 0x07	; 7
    25ca:	41 e0       	ldi	r20, 0x01	; 1
    25cc:	0e 94 23 05 	call	0xa46	; 0xa46 <GPIO_writePin>
    25d0:	80 e0       	ldi	r24, 0x00	; 0
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	a0 e8       	ldi	r26, 0x80	; 128
    25d6:	bf e3       	ldi	r27, 0x3F	; 63
    25d8:	8f a3       	std	Y+39, r24	; 0x27
    25da:	98 a7       	std	Y+40, r25	; 0x28
    25dc:	a9 a7       	std	Y+41, r26	; 0x29
    25de:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25e0:	6f a1       	ldd	r22, Y+39	; 0x27
    25e2:	78 a5       	ldd	r23, Y+40	; 0x28
    25e4:	89 a5       	ldd	r24, Y+41	; 0x29
    25e6:	9a a5       	ldd	r25, Y+42	; 0x2a
    25e8:	20 e0       	ldi	r18, 0x00	; 0
    25ea:	30 e0       	ldi	r19, 0x00	; 0
    25ec:	4a e7       	ldi	r20, 0x7A	; 122
    25ee:	55 e4       	ldi	r21, 0x45	; 69
    25f0:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__mulsf3>
    25f4:	dc 01       	movw	r26, r24
    25f6:	cb 01       	movw	r24, r22
    25f8:	8b a3       	std	Y+35, r24	; 0x23
    25fa:	9c a3       	std	Y+36, r25	; 0x24
    25fc:	ad a3       	std	Y+37, r26	; 0x25
    25fe:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2600:	6b a1       	ldd	r22, Y+35	; 0x23
    2602:	7c a1       	ldd	r23, Y+36	; 0x24
    2604:	8d a1       	ldd	r24, Y+37	; 0x25
    2606:	9e a1       	ldd	r25, Y+38	; 0x26
    2608:	20 e0       	ldi	r18, 0x00	; 0
    260a:	30 e0       	ldi	r19, 0x00	; 0
    260c:	40 e8       	ldi	r20, 0x80	; 128
    260e:	5f e3       	ldi	r21, 0x3F	; 63
    2610:	0e 94 93 25 	call	0x4b26	; 0x4b26 <__cmpsf2>
    2614:	88 23       	and	r24, r24
    2616:	2c f4       	brge	.+10     	; 0x2622 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    2618:	81 e0       	ldi	r24, 0x01	; 1
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	9a a3       	std	Y+34, r25	; 0x22
    261e:	89 a3       	std	Y+33, r24	; 0x21
    2620:	3f c0       	rjmp	.+126    	; 0x26a0 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    2622:	6b a1       	ldd	r22, Y+35	; 0x23
    2624:	7c a1       	ldd	r23, Y+36	; 0x24
    2626:	8d a1       	ldd	r24, Y+37	; 0x25
    2628:	9e a1       	ldd	r25, Y+38	; 0x26
    262a:	20 e0       	ldi	r18, 0x00	; 0
    262c:	3f ef       	ldi	r19, 0xFF	; 255
    262e:	4f e7       	ldi	r20, 0x7F	; 127
    2630:	57 e4       	ldi	r21, 0x47	; 71
    2632:	0e 94 dd 26 	call	0x4dba	; 0x4dba <__gesf2>
    2636:	18 16       	cp	r1, r24
    2638:	4c f5       	brge	.+82     	; 0x268c <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    263a:	6f a1       	ldd	r22, Y+39	; 0x27
    263c:	78 a5       	ldd	r23, Y+40	; 0x28
    263e:	89 a5       	ldd	r24, Y+41	; 0x29
    2640:	9a a5       	ldd	r25, Y+42	; 0x2a
    2642:	20 e0       	ldi	r18, 0x00	; 0
    2644:	30 e0       	ldi	r19, 0x00	; 0
    2646:	40 e2       	ldi	r20, 0x20	; 32
    2648:	51 e4       	ldi	r21, 0x41	; 65
    264a:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__mulsf3>
    264e:	dc 01       	movw	r26, r24
    2650:	cb 01       	movw	r24, r22
    2652:	bc 01       	movw	r22, r24
    2654:	cd 01       	movw	r24, r26
    2656:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <__fixunssfsi>
    265a:	dc 01       	movw	r26, r24
    265c:	cb 01       	movw	r24, r22
    265e:	9a a3       	std	Y+34, r25	; 0x22
    2660:	89 a3       	std	Y+33, r24	; 0x21
    2662:	0f c0       	rjmp	.+30     	; 0x2682 <LCD_displayCharacter+0x658>
    2664:	80 e9       	ldi	r24, 0x90	; 144
    2666:	91 e0       	ldi	r25, 0x01	; 1
    2668:	98 a3       	std	Y+32, r25	; 0x20
    266a:	8f 8f       	std	Y+31, r24	; 0x1f
    266c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    266e:	98 a1       	ldd	r25, Y+32	; 0x20
    2670:	01 97       	sbiw	r24, 0x01	; 1
    2672:	f1 f7       	brne	.-4      	; 0x2670 <LCD_displayCharacter+0x646>
    2674:	98 a3       	std	Y+32, r25	; 0x20
    2676:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2678:	89 a1       	ldd	r24, Y+33	; 0x21
    267a:	9a a1       	ldd	r25, Y+34	; 0x22
    267c:	01 97       	sbiw	r24, 0x01	; 1
    267e:	9a a3       	std	Y+34, r25	; 0x22
    2680:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2682:	89 a1       	ldd	r24, Y+33	; 0x21
    2684:	9a a1       	ldd	r25, Y+34	; 0x22
    2686:	00 97       	sbiw	r24, 0x00	; 0
    2688:	69 f7       	brne	.-38     	; 0x2664 <LCD_displayCharacter+0x63a>
    268a:	14 c0       	rjmp	.+40     	; 0x26b4 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    268c:	6b a1       	ldd	r22, Y+35	; 0x23
    268e:	7c a1       	ldd	r23, Y+36	; 0x24
    2690:	8d a1       	ldd	r24, Y+37	; 0x25
    2692:	9e a1       	ldd	r25, Y+38	; 0x26
    2694:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <__fixunssfsi>
    2698:	dc 01       	movw	r26, r24
    269a:	cb 01       	movw	r24, r22
    269c:	9a a3       	std	Y+34, r25	; 0x22
    269e:	89 a3       	std	Y+33, r24	; 0x21
    26a0:	89 a1       	ldd	r24, Y+33	; 0x21
    26a2:	9a a1       	ldd	r25, Y+34	; 0x22
    26a4:	9e 8f       	std	Y+30, r25	; 0x1e
    26a6:	8d 8f       	std	Y+29, r24	; 0x1d
    26a8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26aa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    26ac:	01 97       	sbiw	r24, 0x01	; 1
    26ae:	f1 f7       	brne	.-4      	; 0x26ac <LCD_displayCharacter+0x682>
    26b0:	9e 8f       	std	Y+30, r25	; 0x1e
    26b2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    26b4:	fe 01       	movw	r30, r28
    26b6:	ed 59       	subi	r30, 0x9D	; 157
    26b8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ba:	80 81       	ld	r24, Z
    26bc:	98 2f       	mov	r25, r24
    26be:	91 70       	andi	r25, 0x01	; 1
    26c0:	82 e0       	ldi	r24, 0x02	; 2
    26c2:	62 e0       	ldi	r22, 0x02	; 2
    26c4:	49 2f       	mov	r20, r25
    26c6:	0e 94 23 05 	call	0xa46	; 0xa46 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    26ca:	fe 01       	movw	r30, r28
    26cc:	ed 59       	subi	r30, 0x9D	; 157
    26ce:	ff 4f       	sbci	r31, 0xFF	; 255
    26d0:	80 81       	ld	r24, Z
    26d2:	88 2f       	mov	r24, r24
    26d4:	90 e0       	ldi	r25, 0x00	; 0
    26d6:	82 70       	andi	r24, 0x02	; 2
    26d8:	90 70       	andi	r25, 0x00	; 0
    26da:	95 95       	asr	r25
    26dc:	87 95       	ror	r24
    26de:	98 2f       	mov	r25, r24
    26e0:	82 e0       	ldi	r24, 0x02	; 2
    26e2:	63 e0       	ldi	r22, 0x03	; 3
    26e4:	49 2f       	mov	r20, r25
    26e6:	0e 94 23 05 	call	0xa46	; 0xa46 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    26ea:	fe 01       	movw	r30, r28
    26ec:	ed 59       	subi	r30, 0x9D	; 157
    26ee:	ff 4f       	sbci	r31, 0xFF	; 255
    26f0:	80 81       	ld	r24, Z
    26f2:	88 2f       	mov	r24, r24
    26f4:	90 e0       	ldi	r25, 0x00	; 0
    26f6:	84 70       	andi	r24, 0x04	; 4
    26f8:	90 70       	andi	r25, 0x00	; 0
    26fa:	95 95       	asr	r25
    26fc:	87 95       	ror	r24
    26fe:	95 95       	asr	r25
    2700:	87 95       	ror	r24
    2702:	98 2f       	mov	r25, r24
    2704:	82 e0       	ldi	r24, 0x02	; 2
    2706:	64 e0       	ldi	r22, 0x04	; 4
    2708:	49 2f       	mov	r20, r25
    270a:	0e 94 23 05 	call	0xa46	; 0xa46 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    270e:	fe 01       	movw	r30, r28
    2710:	ed 59       	subi	r30, 0x9D	; 157
    2712:	ff 4f       	sbci	r31, 0xFF	; 255
    2714:	80 81       	ld	r24, Z
    2716:	88 2f       	mov	r24, r24
    2718:	90 e0       	ldi	r25, 0x00	; 0
    271a:	88 70       	andi	r24, 0x08	; 8
    271c:	90 70       	andi	r25, 0x00	; 0
    271e:	95 95       	asr	r25
    2720:	87 95       	ror	r24
    2722:	95 95       	asr	r25
    2724:	87 95       	ror	r24
    2726:	95 95       	asr	r25
    2728:	87 95       	ror	r24
    272a:	98 2f       	mov	r25, r24
    272c:	82 e0       	ldi	r24, 0x02	; 2
    272e:	65 e0       	ldi	r22, 0x05	; 5
    2730:	49 2f       	mov	r20, r25
    2732:	0e 94 23 05 	call	0xa46	; 0xa46 <GPIO_writePin>
    2736:	80 e0       	ldi	r24, 0x00	; 0
    2738:	90 e0       	ldi	r25, 0x00	; 0
    273a:	a0 e8       	ldi	r26, 0x80	; 128
    273c:	bf e3       	ldi	r27, 0x3F	; 63
    273e:	89 8f       	std	Y+25, r24	; 0x19
    2740:	9a 8f       	std	Y+26, r25	; 0x1a
    2742:	ab 8f       	std	Y+27, r26	; 0x1b
    2744:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2746:	69 8d       	ldd	r22, Y+25	; 0x19
    2748:	7a 8d       	ldd	r23, Y+26	; 0x1a
    274a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    274c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    274e:	20 e0       	ldi	r18, 0x00	; 0
    2750:	30 e0       	ldi	r19, 0x00	; 0
    2752:	4a e7       	ldi	r20, 0x7A	; 122
    2754:	55 e4       	ldi	r21, 0x45	; 69
    2756:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__mulsf3>
    275a:	dc 01       	movw	r26, r24
    275c:	cb 01       	movw	r24, r22
    275e:	8d 8b       	std	Y+21, r24	; 0x15
    2760:	9e 8b       	std	Y+22, r25	; 0x16
    2762:	af 8b       	std	Y+23, r26	; 0x17
    2764:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2766:	6d 89       	ldd	r22, Y+21	; 0x15
    2768:	7e 89       	ldd	r23, Y+22	; 0x16
    276a:	8f 89       	ldd	r24, Y+23	; 0x17
    276c:	98 8d       	ldd	r25, Y+24	; 0x18
    276e:	20 e0       	ldi	r18, 0x00	; 0
    2770:	30 e0       	ldi	r19, 0x00	; 0
    2772:	40 e8       	ldi	r20, 0x80	; 128
    2774:	5f e3       	ldi	r21, 0x3F	; 63
    2776:	0e 94 93 25 	call	0x4b26	; 0x4b26 <__cmpsf2>
    277a:	88 23       	and	r24, r24
    277c:	2c f4       	brge	.+10     	; 0x2788 <LCD_displayCharacter+0x75e>
		__ticks = 1;
    277e:	81 e0       	ldi	r24, 0x01	; 1
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	9c 8b       	std	Y+20, r25	; 0x14
    2784:	8b 8b       	std	Y+19, r24	; 0x13
    2786:	3f c0       	rjmp	.+126    	; 0x2806 <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    2788:	6d 89       	ldd	r22, Y+21	; 0x15
    278a:	7e 89       	ldd	r23, Y+22	; 0x16
    278c:	8f 89       	ldd	r24, Y+23	; 0x17
    278e:	98 8d       	ldd	r25, Y+24	; 0x18
    2790:	20 e0       	ldi	r18, 0x00	; 0
    2792:	3f ef       	ldi	r19, 0xFF	; 255
    2794:	4f e7       	ldi	r20, 0x7F	; 127
    2796:	57 e4       	ldi	r21, 0x47	; 71
    2798:	0e 94 dd 26 	call	0x4dba	; 0x4dba <__gesf2>
    279c:	18 16       	cp	r1, r24
    279e:	4c f5       	brge	.+82     	; 0x27f2 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27a0:	69 8d       	ldd	r22, Y+25	; 0x19
    27a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27a8:	20 e0       	ldi	r18, 0x00	; 0
    27aa:	30 e0       	ldi	r19, 0x00	; 0
    27ac:	40 e2       	ldi	r20, 0x20	; 32
    27ae:	51 e4       	ldi	r21, 0x41	; 65
    27b0:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__mulsf3>
    27b4:	dc 01       	movw	r26, r24
    27b6:	cb 01       	movw	r24, r22
    27b8:	bc 01       	movw	r22, r24
    27ba:	cd 01       	movw	r24, r26
    27bc:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <__fixunssfsi>
    27c0:	dc 01       	movw	r26, r24
    27c2:	cb 01       	movw	r24, r22
    27c4:	9c 8b       	std	Y+20, r25	; 0x14
    27c6:	8b 8b       	std	Y+19, r24	; 0x13
    27c8:	0f c0       	rjmp	.+30     	; 0x27e8 <LCD_displayCharacter+0x7be>
    27ca:	80 e9       	ldi	r24, 0x90	; 144
    27cc:	91 e0       	ldi	r25, 0x01	; 1
    27ce:	9a 8b       	std	Y+18, r25	; 0x12
    27d0:	89 8b       	std	Y+17, r24	; 0x11
    27d2:	89 89       	ldd	r24, Y+17	; 0x11
    27d4:	9a 89       	ldd	r25, Y+18	; 0x12
    27d6:	01 97       	sbiw	r24, 0x01	; 1
    27d8:	f1 f7       	brne	.-4      	; 0x27d6 <LCD_displayCharacter+0x7ac>
    27da:	9a 8b       	std	Y+18, r25	; 0x12
    27dc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27de:	8b 89       	ldd	r24, Y+19	; 0x13
    27e0:	9c 89       	ldd	r25, Y+20	; 0x14
    27e2:	01 97       	sbiw	r24, 0x01	; 1
    27e4:	9c 8b       	std	Y+20, r25	; 0x14
    27e6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27e8:	8b 89       	ldd	r24, Y+19	; 0x13
    27ea:	9c 89       	ldd	r25, Y+20	; 0x14
    27ec:	00 97       	sbiw	r24, 0x00	; 0
    27ee:	69 f7       	brne	.-38     	; 0x27ca <LCD_displayCharacter+0x7a0>
    27f0:	14 c0       	rjmp	.+40     	; 0x281a <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27f2:	6d 89       	ldd	r22, Y+21	; 0x15
    27f4:	7e 89       	ldd	r23, Y+22	; 0x16
    27f6:	8f 89       	ldd	r24, Y+23	; 0x17
    27f8:	98 8d       	ldd	r25, Y+24	; 0x18
    27fa:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <__fixunssfsi>
    27fe:	dc 01       	movw	r26, r24
    2800:	cb 01       	movw	r24, r22
    2802:	9c 8b       	std	Y+20, r25	; 0x14
    2804:	8b 8b       	std	Y+19, r24	; 0x13
    2806:	8b 89       	ldd	r24, Y+19	; 0x13
    2808:	9c 89       	ldd	r25, Y+20	; 0x14
    280a:	98 8b       	std	Y+16, r25	; 0x10
    280c:	8f 87       	std	Y+15, r24	; 0x0f
    280e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2810:	98 89       	ldd	r25, Y+16	; 0x10
    2812:	01 97       	sbiw	r24, 0x01	; 1
    2814:	f1 f7       	brne	.-4      	; 0x2812 <LCD_displayCharacter+0x7e8>
    2816:	98 8b       	std	Y+16, r25	; 0x10
    2818:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    281a:	82 e0       	ldi	r24, 0x02	; 2
    281c:	67 e0       	ldi	r22, 0x07	; 7
    281e:	40 e0       	ldi	r20, 0x00	; 0
    2820:	0e 94 23 05 	call	0xa46	; 0xa46 <GPIO_writePin>
    2824:	80 e0       	ldi	r24, 0x00	; 0
    2826:	90 e0       	ldi	r25, 0x00	; 0
    2828:	a0 e8       	ldi	r26, 0x80	; 128
    282a:	bf e3       	ldi	r27, 0x3F	; 63
    282c:	8b 87       	std	Y+11, r24	; 0x0b
    282e:	9c 87       	std	Y+12, r25	; 0x0c
    2830:	ad 87       	std	Y+13, r26	; 0x0d
    2832:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2834:	6b 85       	ldd	r22, Y+11	; 0x0b
    2836:	7c 85       	ldd	r23, Y+12	; 0x0c
    2838:	8d 85       	ldd	r24, Y+13	; 0x0d
    283a:	9e 85       	ldd	r25, Y+14	; 0x0e
    283c:	20 e0       	ldi	r18, 0x00	; 0
    283e:	30 e0       	ldi	r19, 0x00	; 0
    2840:	4a e7       	ldi	r20, 0x7A	; 122
    2842:	55 e4       	ldi	r21, 0x45	; 69
    2844:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__mulsf3>
    2848:	dc 01       	movw	r26, r24
    284a:	cb 01       	movw	r24, r22
    284c:	8f 83       	std	Y+7, r24	; 0x07
    284e:	98 87       	std	Y+8, r25	; 0x08
    2850:	a9 87       	std	Y+9, r26	; 0x09
    2852:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2854:	6f 81       	ldd	r22, Y+7	; 0x07
    2856:	78 85       	ldd	r23, Y+8	; 0x08
    2858:	89 85       	ldd	r24, Y+9	; 0x09
    285a:	9a 85       	ldd	r25, Y+10	; 0x0a
    285c:	20 e0       	ldi	r18, 0x00	; 0
    285e:	30 e0       	ldi	r19, 0x00	; 0
    2860:	40 e8       	ldi	r20, 0x80	; 128
    2862:	5f e3       	ldi	r21, 0x3F	; 63
    2864:	0e 94 93 25 	call	0x4b26	; 0x4b26 <__cmpsf2>
    2868:	88 23       	and	r24, r24
    286a:	2c f4       	brge	.+10     	; 0x2876 <LCD_displayCharacter+0x84c>
		__ticks = 1;
    286c:	81 e0       	ldi	r24, 0x01	; 1
    286e:	90 e0       	ldi	r25, 0x00	; 0
    2870:	9e 83       	std	Y+6, r25	; 0x06
    2872:	8d 83       	std	Y+5, r24	; 0x05
    2874:	3f c0       	rjmp	.+126    	; 0x28f4 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    2876:	6f 81       	ldd	r22, Y+7	; 0x07
    2878:	78 85       	ldd	r23, Y+8	; 0x08
    287a:	89 85       	ldd	r24, Y+9	; 0x09
    287c:	9a 85       	ldd	r25, Y+10	; 0x0a
    287e:	20 e0       	ldi	r18, 0x00	; 0
    2880:	3f ef       	ldi	r19, 0xFF	; 255
    2882:	4f e7       	ldi	r20, 0x7F	; 127
    2884:	57 e4       	ldi	r21, 0x47	; 71
    2886:	0e 94 dd 26 	call	0x4dba	; 0x4dba <__gesf2>
    288a:	18 16       	cp	r1, r24
    288c:	4c f5       	brge	.+82     	; 0x28e0 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    288e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2890:	7c 85       	ldd	r23, Y+12	; 0x0c
    2892:	8d 85       	ldd	r24, Y+13	; 0x0d
    2894:	9e 85       	ldd	r25, Y+14	; 0x0e
    2896:	20 e0       	ldi	r18, 0x00	; 0
    2898:	30 e0       	ldi	r19, 0x00	; 0
    289a:	40 e2       	ldi	r20, 0x20	; 32
    289c:	51 e4       	ldi	r21, 0x41	; 65
    289e:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__mulsf3>
    28a2:	dc 01       	movw	r26, r24
    28a4:	cb 01       	movw	r24, r22
    28a6:	bc 01       	movw	r22, r24
    28a8:	cd 01       	movw	r24, r26
    28aa:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <__fixunssfsi>
    28ae:	dc 01       	movw	r26, r24
    28b0:	cb 01       	movw	r24, r22
    28b2:	9e 83       	std	Y+6, r25	; 0x06
    28b4:	8d 83       	std	Y+5, r24	; 0x05
    28b6:	0f c0       	rjmp	.+30     	; 0x28d6 <LCD_displayCharacter+0x8ac>
    28b8:	80 e9       	ldi	r24, 0x90	; 144
    28ba:	91 e0       	ldi	r25, 0x01	; 1
    28bc:	9c 83       	std	Y+4, r25	; 0x04
    28be:	8b 83       	std	Y+3, r24	; 0x03
    28c0:	8b 81       	ldd	r24, Y+3	; 0x03
    28c2:	9c 81       	ldd	r25, Y+4	; 0x04
    28c4:	01 97       	sbiw	r24, 0x01	; 1
    28c6:	f1 f7       	brne	.-4      	; 0x28c4 <LCD_displayCharacter+0x89a>
    28c8:	9c 83       	std	Y+4, r25	; 0x04
    28ca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28cc:	8d 81       	ldd	r24, Y+5	; 0x05
    28ce:	9e 81       	ldd	r25, Y+6	; 0x06
    28d0:	01 97       	sbiw	r24, 0x01	; 1
    28d2:	9e 83       	std	Y+6, r25	; 0x06
    28d4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28d6:	8d 81       	ldd	r24, Y+5	; 0x05
    28d8:	9e 81       	ldd	r25, Y+6	; 0x06
    28da:	00 97       	sbiw	r24, 0x00	; 0
    28dc:	69 f7       	brne	.-38     	; 0x28b8 <LCD_displayCharacter+0x88e>
    28de:	14 c0       	rjmp	.+40     	; 0x2908 <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28e0:	6f 81       	ldd	r22, Y+7	; 0x07
    28e2:	78 85       	ldd	r23, Y+8	; 0x08
    28e4:	89 85       	ldd	r24, Y+9	; 0x09
    28e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    28e8:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <__fixunssfsi>
    28ec:	dc 01       	movw	r26, r24
    28ee:	cb 01       	movw	r24, r22
    28f0:	9e 83       	std	Y+6, r25	; 0x06
    28f2:	8d 83       	std	Y+5, r24	; 0x05
    28f4:	8d 81       	ldd	r24, Y+5	; 0x05
    28f6:	9e 81       	ldd	r25, Y+6	; 0x06
    28f8:	9a 83       	std	Y+2, r25	; 0x02
    28fa:	89 83       	std	Y+1, r24	; 0x01
    28fc:	89 81       	ldd	r24, Y+1	; 0x01
    28fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2900:	01 97       	sbiw	r24, 0x01	; 1
    2902:	f1 f7       	brne	.-4      	; 0x2900 <LCD_displayCharacter+0x8d6>
    2904:	9a 83       	std	Y+2, r25	; 0x02
    2906:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2908:	cd 59       	subi	r28, 0x9D	; 157
    290a:	df 4f       	sbci	r29, 0xFF	; 255
    290c:	0f b6       	in	r0, 0x3f	; 63
    290e:	f8 94       	cli
    2910:	de bf       	out	0x3e, r29	; 62
    2912:	0f be       	out	0x3f, r0	; 63
    2914:	cd bf       	out	0x3d, r28	; 61
    2916:	cf 91       	pop	r28
    2918:	df 91       	pop	r29
    291a:	1f 91       	pop	r17
    291c:	0f 91       	pop	r16
    291e:	08 95       	ret

00002920 <LCD_displayString>:
/*
 * Description :
 -> Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2920:	df 93       	push	r29
    2922:	cf 93       	push	r28
    2924:	00 d0       	rcall	.+0      	; 0x2926 <LCD_displayString+0x6>
    2926:	0f 92       	push	r0
    2928:	cd b7       	in	r28, 0x3d	; 61
    292a:	de b7       	in	r29, 0x3e	; 62
    292c:	9b 83       	std	Y+3, r25	; 0x03
    292e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2930:	19 82       	std	Y+1, r1	; 0x01
    2932:	0e c0       	rjmp	.+28     	; 0x2950 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2934:	89 81       	ldd	r24, Y+1	; 0x01
    2936:	28 2f       	mov	r18, r24
    2938:	30 e0       	ldi	r19, 0x00	; 0
    293a:	8a 81       	ldd	r24, Y+2	; 0x02
    293c:	9b 81       	ldd	r25, Y+3	; 0x03
    293e:	fc 01       	movw	r30, r24
    2940:	e2 0f       	add	r30, r18
    2942:	f3 1f       	adc	r31, r19
    2944:	80 81       	ld	r24, Z
    2946:	0e 94 15 10 	call	0x202a	; 0x202a <LCD_displayCharacter>
		i++;
    294a:	89 81       	ldd	r24, Y+1	; 0x01
    294c:	8f 5f       	subi	r24, 0xFF	; 255
    294e:	89 83       	std	Y+1, r24	; 0x01
 -> Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2950:	89 81       	ldd	r24, Y+1	; 0x01
    2952:	28 2f       	mov	r18, r24
    2954:	30 e0       	ldi	r19, 0x00	; 0
    2956:	8a 81       	ldd	r24, Y+2	; 0x02
    2958:	9b 81       	ldd	r25, Y+3	; 0x03
    295a:	fc 01       	movw	r30, r24
    295c:	e2 0f       	add	r30, r18
    295e:	f3 1f       	adc	r31, r19
    2960:	80 81       	ld	r24, Z
    2962:	88 23       	and	r24, r24
    2964:	39 f7       	brne	.-50     	; 0x2934 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(Str[i]);
		i++;
	}
}
    2966:	0f 90       	pop	r0
    2968:	0f 90       	pop	r0
    296a:	0f 90       	pop	r0
    296c:	cf 91       	pop	r28
    296e:	df 91       	pop	r29
    2970:	08 95       	ret

00002972 <LCD_moveCursor>:
/*
 * Description :
 -> Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2972:	df 93       	push	r29
    2974:	cf 93       	push	r28
    2976:	00 d0       	rcall	.+0      	; 0x2978 <LCD_moveCursor+0x6>
    2978:	00 d0       	rcall	.+0      	; 0x297a <LCD_moveCursor+0x8>
    297a:	0f 92       	push	r0
    297c:	cd b7       	in	r28, 0x3d	; 61
    297e:	de b7       	in	r29, 0x3e	; 62
    2980:	8a 83       	std	Y+2, r24	; 0x02
    2982:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2984:	8a 81       	ldd	r24, Y+2	; 0x02
    2986:	28 2f       	mov	r18, r24
    2988:	30 e0       	ldi	r19, 0x00	; 0
    298a:	3d 83       	std	Y+5, r19	; 0x05
    298c:	2c 83       	std	Y+4, r18	; 0x04
    298e:	8c 81       	ldd	r24, Y+4	; 0x04
    2990:	9d 81       	ldd	r25, Y+5	; 0x05
    2992:	81 30       	cpi	r24, 0x01	; 1
    2994:	91 05       	cpc	r25, r1
    2996:	c1 f0       	breq	.+48     	; 0x29c8 <LCD_moveCursor+0x56>
    2998:	2c 81       	ldd	r18, Y+4	; 0x04
    299a:	3d 81       	ldd	r19, Y+5	; 0x05
    299c:	22 30       	cpi	r18, 0x02	; 2
    299e:	31 05       	cpc	r19, r1
    29a0:	2c f4       	brge	.+10     	; 0x29ac <LCD_moveCursor+0x3a>
    29a2:	8c 81       	ldd	r24, Y+4	; 0x04
    29a4:	9d 81       	ldd	r25, Y+5	; 0x05
    29a6:	00 97       	sbiw	r24, 0x00	; 0
    29a8:	61 f0       	breq	.+24     	; 0x29c2 <LCD_moveCursor+0x50>
    29aa:	19 c0       	rjmp	.+50     	; 0x29de <LCD_moveCursor+0x6c>
    29ac:	2c 81       	ldd	r18, Y+4	; 0x04
    29ae:	3d 81       	ldd	r19, Y+5	; 0x05
    29b0:	22 30       	cpi	r18, 0x02	; 2
    29b2:	31 05       	cpc	r19, r1
    29b4:	69 f0       	breq	.+26     	; 0x29d0 <LCD_moveCursor+0x5e>
    29b6:	8c 81       	ldd	r24, Y+4	; 0x04
    29b8:	9d 81       	ldd	r25, Y+5	; 0x05
    29ba:	83 30       	cpi	r24, 0x03	; 3
    29bc:	91 05       	cpc	r25, r1
    29be:	61 f0       	breq	.+24     	; 0x29d8 <LCD_moveCursor+0x66>
    29c0:	0e c0       	rjmp	.+28     	; 0x29de <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    29c2:	8b 81       	ldd	r24, Y+3	; 0x03
    29c4:	89 83       	std	Y+1, r24	; 0x01
    29c6:	0b c0       	rjmp	.+22     	; 0x29de <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    29c8:	8b 81       	ldd	r24, Y+3	; 0x03
    29ca:	80 5c       	subi	r24, 0xC0	; 192
    29cc:	89 83       	std	Y+1, r24	; 0x01
    29ce:	07 c0       	rjmp	.+14     	; 0x29de <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    29d0:	8b 81       	ldd	r24, Y+3	; 0x03
    29d2:	80 5f       	subi	r24, 0xF0	; 240
    29d4:	89 83       	std	Y+1, r24	; 0x01
    29d6:	03 c0       	rjmp	.+6      	; 0x29de <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    29d8:	8b 81       	ldd	r24, Y+3	; 0x03
    29da:	80 5b       	subi	r24, 0xB0	; 176
    29dc:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    29de:	89 81       	ldd	r24, Y+1	; 0x01
    29e0:	80 68       	ori	r24, 0x80	; 128
    29e2:	0e 94 9a 0b 	call	0x1734	; 0x1734 <LCD_sendCommand>
}
    29e6:	0f 90       	pop	r0
    29e8:	0f 90       	pop	r0
    29ea:	0f 90       	pop	r0
    29ec:	0f 90       	pop	r0
    29ee:	0f 90       	pop	r0
    29f0:	cf 91       	pop	r28
    29f2:	df 91       	pop	r29
    29f4:	08 95       	ret

000029f6 <LCD_displayStringRowColumn>:
/*
 * Description :
 -> Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    29f6:	df 93       	push	r29
    29f8:	cf 93       	push	r28
    29fa:	00 d0       	rcall	.+0      	; 0x29fc <LCD_displayStringRowColumn+0x6>
    29fc:	00 d0       	rcall	.+0      	; 0x29fe <LCD_displayStringRowColumn+0x8>
    29fe:	cd b7       	in	r28, 0x3d	; 61
    2a00:	de b7       	in	r29, 0x3e	; 62
    2a02:	89 83       	std	Y+1, r24	; 0x01
    2a04:	6a 83       	std	Y+2, r22	; 0x02
    2a06:	5c 83       	std	Y+4, r21	; 0x04
    2a08:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2a0a:	89 81       	ldd	r24, Y+1	; 0x01
    2a0c:	6a 81       	ldd	r22, Y+2	; 0x02
    2a0e:	0e 94 b9 14 	call	0x2972	; 0x2972 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2a12:	8b 81       	ldd	r24, Y+3	; 0x03
    2a14:	9c 81       	ldd	r25, Y+4	; 0x04
    2a16:	0e 94 90 14 	call	0x2920	; 0x2920 <LCD_displayString>
}
    2a1a:	0f 90       	pop	r0
    2a1c:	0f 90       	pop	r0
    2a1e:	0f 90       	pop	r0
    2a20:	0f 90       	pop	r0
    2a22:	cf 91       	pop	r28
    2a24:	df 91       	pop	r29
    2a26:	08 95       	ret

00002a28 <LCD_clearScreen>:
/*
 * Description :
 -> Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2a28:	df 93       	push	r29
    2a2a:	cf 93       	push	r28
    2a2c:	cd b7       	in	r28, 0x3d	; 61
    2a2e:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2a30:	81 e0       	ldi	r24, 0x01	; 1
    2a32:	0e 94 9a 0b 	call	0x1734	; 0x1734 <LCD_sendCommand>
}
    2a36:	cf 91       	pop	r28
    2a38:	df 91       	pop	r29
    2a3a:	08 95       	ret

00002a3c <LCD_intgerToString>:
/*
 * Description :
 -> Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2a3c:	df 93       	push	r29
    2a3e:	cf 93       	push	r28
    2a40:	cd b7       	in	r28, 0x3d	; 61
    2a42:	de b7       	in	r29, 0x3e	; 62
    2a44:	62 97       	sbiw	r28, 0x12	; 18
    2a46:	0f b6       	in	r0, 0x3f	; 63
    2a48:	f8 94       	cli
    2a4a:	de bf       	out	0x3e, r29	; 62
    2a4c:	0f be       	out	0x3f, r0	; 63
    2a4e:	cd bf       	out	0x3d, r28	; 61
    2a50:	9a 8b       	std	Y+18, r25	; 0x12
    2a52:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   ultoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2a54:	89 89       	ldd	r24, Y+17	; 0x11
    2a56:	9a 89       	ldd	r25, Y+18	; 0x12
    2a58:	aa 27       	eor	r26, r26
    2a5a:	97 fd       	sbrc	r25, 7
    2a5c:	a0 95       	com	r26
    2a5e:	ba 2f       	mov	r27, r26
    2a60:	bc 01       	movw	r22, r24
    2a62:	cd 01       	movw	r24, r26
    2a64:	9e 01       	movw	r18, r28
    2a66:	2f 5f       	subi	r18, 0xFF	; 255
    2a68:	3f 4f       	sbci	r19, 0xFF	; 255
    2a6a:	a9 01       	movw	r20, r18
    2a6c:	2a e0       	ldi	r18, 0x0A	; 10
    2a6e:	30 e0       	ldi	r19, 0x00	; 0
    2a70:	0e 94 de 27 	call	0x4fbc	; 0x4fbc <ultoa>
   LCD_displayString(buff); /* Display the string */
    2a74:	ce 01       	movw	r24, r28
    2a76:	01 96       	adiw	r24, 0x01	; 1
    2a78:	0e 94 90 14 	call	0x2920	; 0x2920 <LCD_displayString>
}
    2a7c:	62 96       	adiw	r28, 0x12	; 18
    2a7e:	0f b6       	in	r0, 0x3f	; 63
    2a80:	f8 94       	cli
    2a82:	de bf       	out	0x3e, r29	; 62
    2a84:	0f be       	out	0x3f, r0	; 63
    2a86:	cd bf       	out	0x3d, r28	; 61
    2a88:	cf 91       	pop	r28
    2a8a:	df 91       	pop	r29
    2a8c:	08 95       	ret

00002a8e <LCD_floatToString>:

void LCD_floatToString(float data)
{
    2a8e:	0f 93       	push	r16
    2a90:	1f 93       	push	r17
    2a92:	df 93       	push	r29
    2a94:	cf 93       	push	r28
    2a96:	cd b7       	in	r28, 0x3d	; 61
    2a98:	de b7       	in	r29, 0x3e	; 62
    2a9a:	64 97       	sbiw	r28, 0x14	; 20
    2a9c:	0f b6       	in	r0, 0x3f	; 63
    2a9e:	f8 94       	cli
    2aa0:	de bf       	out	0x3e, r29	; 62
    2aa2:	0f be       	out	0x3f, r0	; 63
    2aa4:	cd bf       	out	0x3d, r28	; 61
    2aa6:	69 8b       	std	Y+17, r22	; 0x11
    2aa8:	7a 8b       	std	Y+18, r23	; 0x12
    2aaa:	8b 8b       	std	Y+19, r24	; 0x13
    2aac:	9c 8b       	std	Y+20, r25	; 0x14
   char buff[16]; /* String to hold the ascii result */
   dtostrf(data, 0, 2, buff);
    2aae:	89 89       	ldd	r24, Y+17	; 0x11
    2ab0:	9a 89       	ldd	r25, Y+18	; 0x12
    2ab2:	ab 89       	ldd	r26, Y+19	; 0x13
    2ab4:	bc 89       	ldd	r27, Y+20	; 0x14
    2ab6:	bc 01       	movw	r22, r24
    2ab8:	cd 01       	movw	r24, r26
    2aba:	40 e0       	ldi	r20, 0x00	; 0
    2abc:	22 e0       	ldi	r18, 0x02	; 2
    2abe:	fe 01       	movw	r30, r28
    2ac0:	31 96       	adiw	r30, 0x01	; 1
    2ac2:	8f 01       	movw	r16, r30
    2ac4:	0e 94 bd 27 	call	0x4f7a	; 0x4f7a <dtostrf>
   LCD_displayString(buff); /* Display the string */
    2ac8:	ce 01       	movw	r24, r28
    2aca:	01 96       	adiw	r24, 0x01	; 1
    2acc:	0e 94 90 14 	call	0x2920	; 0x2920 <LCD_displayString>

}
    2ad0:	64 96       	adiw	r28, 0x14	; 20
    2ad2:	0f b6       	in	r0, 0x3f	; 63
    2ad4:	f8 94       	cli
    2ad6:	de bf       	out	0x3e, r29	; 62
    2ad8:	0f be       	out	0x3f, r0	; 63
    2ada:	cd bf       	out	0x3d, r28	; 61
    2adc:	cf 91       	pop	r28
    2ade:	df 91       	pop	r29
    2ae0:	1f 91       	pop	r17
    2ae2:	0f 91       	pop	r16
    2ae4:	08 95       	ret

00002ae6 <LCD_clearRow>:
/*
 * Description :
 -> Clear specific row
 */
void LCD_clearRow(uint8 row){
    2ae6:	df 93       	push	r29
    2ae8:	cf 93       	push	r28
    2aea:	0f 92       	push	r0
    2aec:	cd b7       	in	r28, 0x3d	; 61
    2aee:	de b7       	in	r29, 0x3e	; 62
    2af0:	89 83       	std	Y+1, r24	; 0x01
	LCD_displayStringRowColumn(row,0,"                ");
    2af2:	24 ea       	ldi	r18, 0xA4	; 164
    2af4:	30 e0       	ldi	r19, 0x00	; 0
    2af6:	89 81       	ldd	r24, Y+1	; 0x01
    2af8:	60 e0       	ldi	r22, 0x00	; 0
    2afa:	a9 01       	movw	r20, r18
    2afc:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <LCD_displayStringRowColumn>
}
    2b00:	0f 90       	pop	r0
    2b02:	cf 91       	pop	r28
    2b04:	df 91       	pop	r29
    2b06:	08 95       	ret

00002b08 <LCD_StoreCustomPtrn>:
/*
 * Description :
 -> Storing the pattern of custom character on the CGRAM.
 -> The function take the pattern and the index you need to store in.
 */
void LCD_StoreCustomPtrn(uint8 *Pattern , uint8 CGRAM_index){
    2b08:	df 93       	push	r29
    2b0a:	cf 93       	push	r28
    2b0c:	00 d0       	rcall	.+0      	; 0x2b0e <LCD_StoreCustomPtrn+0x6>
    2b0e:	00 d0       	rcall	.+0      	; 0x2b10 <LCD_StoreCustomPtrn+0x8>
    2b10:	0f 92       	push	r0
    2b12:	cd b7       	in	r28, 0x3d	; 61
    2b14:	de b7       	in	r29, 0x3e	; 62
    2b16:	9c 83       	std	Y+4, r25	; 0x04
    2b18:	8b 83       	std	Y+3, r24	; 0x03
    2b1a:	6d 83       	std	Y+5, r22	; 0x05
	uint8 LCD_CGRAM_address , indx ;
	if(CGRAM_index < 8){
    2b1c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b1e:	88 30       	cpi	r24, 0x08	; 8
    2b20:	20 f5       	brcc	.+72     	; 0x2b6a <LCD_StoreCustomPtrn+0x62>
		LCD_CGRAM_address = CGRAM_index * 8;
    2b22:	8d 81       	ldd	r24, Y+5	; 0x05
    2b24:	88 2f       	mov	r24, r24
    2b26:	90 e0       	ldi	r25, 0x00	; 0
    2b28:	88 0f       	add	r24, r24
    2b2a:	99 1f       	adc	r25, r25
    2b2c:	88 0f       	add	r24, r24
    2b2e:	99 1f       	adc	r25, r25
    2b30:	88 0f       	add	r24, r24
    2b32:	99 1f       	adc	r25, r25
    2b34:	8a 83       	std	Y+2, r24	; 0x02
		LCD_sendCommand(LCD_CGRAM_address | LCD_SET_CGRAM_ADDRESS);
    2b36:	8a 81       	ldd	r24, Y+2	; 0x02
    2b38:	80 64       	ori	r24, 0x40	; 64
    2b3a:	0e 94 9a 0b 	call	0x1734	; 0x1734 <LCD_sendCommand>
		for( indx = 0 ; indx < 8 ; indx++){
    2b3e:	19 82       	std	Y+1, r1	; 0x01
    2b40:	0e c0       	rjmp	.+28     	; 0x2b5e <LCD_StoreCustomPtrn+0x56>
			LCD_displayCharacter(Pattern[indx]);
    2b42:	89 81       	ldd	r24, Y+1	; 0x01
    2b44:	28 2f       	mov	r18, r24
    2b46:	30 e0       	ldi	r19, 0x00	; 0
    2b48:	8b 81       	ldd	r24, Y+3	; 0x03
    2b4a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b4c:	fc 01       	movw	r30, r24
    2b4e:	e2 0f       	add	r30, r18
    2b50:	f3 1f       	adc	r31, r19
    2b52:	80 81       	ld	r24, Z
    2b54:	0e 94 15 10 	call	0x202a	; 0x202a <LCD_displayCharacter>
void LCD_StoreCustomPtrn(uint8 *Pattern , uint8 CGRAM_index){
	uint8 LCD_CGRAM_address , indx ;
	if(CGRAM_index < 8){
		LCD_CGRAM_address = CGRAM_index * 8;
		LCD_sendCommand(LCD_CGRAM_address | LCD_SET_CGRAM_ADDRESS);
		for( indx = 0 ; indx < 8 ; indx++){
    2b58:	89 81       	ldd	r24, Y+1	; 0x01
    2b5a:	8f 5f       	subi	r24, 0xFF	; 255
    2b5c:	89 83       	std	Y+1, r24	; 0x01
    2b5e:	89 81       	ldd	r24, Y+1	; 0x01
    2b60:	88 30       	cpi	r24, 0x08	; 8
    2b62:	78 f3       	brcs	.-34     	; 0x2b42 <LCD_StoreCustomPtrn+0x3a>
			LCD_displayCharacter(Pattern[indx]);
		}
		LCD_sendCommand(LCD_GO_TO_HOME);
    2b64:	80 e8       	ldi	r24, 0x80	; 128
    2b66:	0e 94 9a 0b 	call	0x1734	; 0x1734 <LCD_sendCommand>
	}
}
    2b6a:	0f 90       	pop	r0
    2b6c:	0f 90       	pop	r0
    2b6e:	0f 90       	pop	r0
    2b70:	0f 90       	pop	r0
    2b72:	0f 90       	pop	r0
    2b74:	cf 91       	pop	r28
    2b76:	df 91       	pop	r29
    2b78:	08 95       	ret

00002b7a <LCD_DisplayCustomPtrn>:
/*
 * Description :
 -> Showing the pattern of custom character on specific index in CGRAM.
 -> The function take the index in CGRAM and the row and the column to display at.
 */
void LCD_DisplayCustomPtrn(uint8 CGRAM_index){
    2b7a:	df 93       	push	r29
    2b7c:	cf 93       	push	r28
    2b7e:	0f 92       	push	r0
    2b80:	cd b7       	in	r28, 0x3d	; 61
    2b82:	de b7       	in	r29, 0x3e	; 62
    2b84:	89 83       	std	Y+1, r24	; 0x01

	LCD_displayCharacter(CGRAM_index);
    2b86:	89 81       	ldd	r24, Y+1	; 0x01
    2b88:	0e 94 15 10 	call	0x202a	; 0x202a <LCD_displayCharacter>
}
    2b8c:	0f 90       	pop	r0
    2b8e:	cf 91       	pop	r28
    2b90:	df 91       	pop	r29
    2b92:	08 95       	ret

00002b94 <INDUCTANCE_METER_getReading>:
 * Description :
 * -> Function responsible for getting the inductance reading.
 * -> This function measures the inductance by charging the inductor, measuring the
 *    oscillation period, and calculating the inductance based on the period.
 */
float INDUCTANCE_METER_getReading() {
    2b94:	df 93       	push	r29
    2b96:	cf 93       	push	r28
    2b98:	cd b7       	in	r28, 0x3d	; 61
    2b9a:	de b7       	in	r29, 0x3e	; 62
    2b9c:	6d 97       	sbiw	r28, 0x1d	; 29
    2b9e:	0f b6       	in	r0, 0x3f	; 63
    2ba0:	f8 94       	cli
    2ba2:	de bf       	out	0x3e, r29	; 62
    2ba4:	0f be       	out	0x3f, r0	; 63
    2ba6:	cd bf       	out	0x3d, r28	; 61
	float inductance;
	Timer1_ConfigType Timer1_Config = {0, 0, NO_PRESCALER, NORMAL_MODE};
    2ba8:	ce 01       	movw	r24, r28
    2baa:	43 96       	adiw	r24, 0x13	; 19
    2bac:	9a 8f       	std	Y+26, r25	; 0x1a
    2bae:	89 8f       	std	Y+25, r24	; 0x19
    2bb0:	ee e1       	ldi	r30, 0x1E	; 30
    2bb2:	f1 e0       	ldi	r31, 0x01	; 1
    2bb4:	fc 8f       	std	Y+28, r31	; 0x1c
    2bb6:	eb 8f       	std	Y+27, r30	; 0x1b
    2bb8:	f6 e0       	ldi	r31, 0x06	; 6
    2bba:	fd 8f       	std	Y+29, r31	; 0x1d
    2bbc:	eb 8d       	ldd	r30, Y+27	; 0x1b
    2bbe:	fc 8d       	ldd	r31, Y+28	; 0x1c
    2bc0:	00 80       	ld	r0, Z
    2bc2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bc4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bc6:	01 96       	adiw	r24, 0x01	; 1
    2bc8:	9c 8f       	std	Y+28, r25	; 0x1c
    2bca:	8b 8f       	std	Y+27, r24	; 0x1b
    2bcc:	e9 8d       	ldd	r30, Y+25	; 0x19
    2bce:	fa 8d       	ldd	r31, Y+26	; 0x1a
    2bd0:	00 82       	st	Z, r0
    2bd2:	89 8d       	ldd	r24, Y+25	; 0x19
    2bd4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2bd6:	01 96       	adiw	r24, 0x01	; 1
    2bd8:	9a 8f       	std	Y+26, r25	; 0x1a
    2bda:	89 8f       	std	Y+25, r24	; 0x19
    2bdc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2bde:	91 50       	subi	r25, 0x01	; 1
    2be0:	9d 8f       	std	Y+29, r25	; 0x1d
    2be2:	ed 8d       	ldd	r30, Y+29	; 0x1d
    2be4:	ee 23       	and	r30, r30
    2be6:	51 f7       	brne	.-44     	; 0x2bbc <INDUCTANCE_METER_getReading+0x28>

	GPIO_setupPinDirection(INDUCTANCE_METER_COMPARATOR_PORT_ID, INDUCTANCE_METER_COMPARATOR_PIN_ID, PIN_INPUT);
    2be8:	80 e0       	ldi	r24, 0x00	; 0
    2bea:	63 e0       	ldi	r22, 0x03	; 3
    2bec:	40 e0       	ldi	r20, 0x00	; 0
    2bee:	0e 94 38 04 	call	0x870	; 0x870 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(INDUCTANCE_METER_CHARGING_PORT_ID, INDUCTANCE_METER_CHARGING_PIN_ID, PIN_OUTPUT);
    2bf2:	83 e0       	ldi	r24, 0x03	; 3
    2bf4:	60 e0       	ldi	r22, 0x00	; 0
    2bf6:	41 e0       	ldi	r20, 0x01	; 1
    2bf8:	0e 94 38 04 	call	0x870	; 0x870 <GPIO_setupPinDirection>

	// Charge the inductor
	GPIO_writePin(INDUCTANCE_METER_CHARGING_PORT_ID, INDUCTANCE_METER_CHARGING_PIN_ID, LOGIC_HIGH);
    2bfc:	83 e0       	ldi	r24, 0x03	; 3
    2bfe:	60 e0       	ldi	r22, 0x00	; 0
    2c00:	41 e0       	ldi	r20, 0x01	; 1
    2c02:	0e 94 23 05 	call	0xa46	; 0xa46 <GPIO_writePin>
    2c06:	80 e0       	ldi	r24, 0x00	; 0
    2c08:	90 e0       	ldi	r25, 0x00	; 0
    2c0a:	a0 ea       	ldi	r26, 0xA0	; 160
    2c0c:	b0 e4       	ldi	r27, 0x40	; 64
    2c0e:	8b 87       	std	Y+11, r24	; 0x0b
    2c10:	9c 87       	std	Y+12, r25	; 0x0c
    2c12:	ad 87       	std	Y+13, r26	; 0x0d
    2c14:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c16:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c18:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c1e:	20 e0       	ldi	r18, 0x00	; 0
    2c20:	30 e0       	ldi	r19, 0x00	; 0
    2c22:	4a e7       	ldi	r20, 0x7A	; 122
    2c24:	55 e4       	ldi	r21, 0x45	; 69
    2c26:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__mulsf3>
    2c2a:	dc 01       	movw	r26, r24
    2c2c:	cb 01       	movw	r24, r22
    2c2e:	8f 83       	std	Y+7, r24	; 0x07
    2c30:	98 87       	std	Y+8, r25	; 0x08
    2c32:	a9 87       	std	Y+9, r26	; 0x09
    2c34:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c36:	6f 81       	ldd	r22, Y+7	; 0x07
    2c38:	78 85       	ldd	r23, Y+8	; 0x08
    2c3a:	89 85       	ldd	r24, Y+9	; 0x09
    2c3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c3e:	20 e0       	ldi	r18, 0x00	; 0
    2c40:	30 e0       	ldi	r19, 0x00	; 0
    2c42:	40 e8       	ldi	r20, 0x80	; 128
    2c44:	5f e3       	ldi	r21, 0x3F	; 63
    2c46:	0e 94 93 25 	call	0x4b26	; 0x4b26 <__cmpsf2>
    2c4a:	88 23       	and	r24, r24
    2c4c:	2c f4       	brge	.+10     	; 0x2c58 <INDUCTANCE_METER_getReading+0xc4>
		__ticks = 1;
    2c4e:	81 e0       	ldi	r24, 0x01	; 1
    2c50:	90 e0       	ldi	r25, 0x00	; 0
    2c52:	9e 83       	std	Y+6, r25	; 0x06
    2c54:	8d 83       	std	Y+5, r24	; 0x05
    2c56:	3f c0       	rjmp	.+126    	; 0x2cd6 <INDUCTANCE_METER_getReading+0x142>
	else if (__tmp > 65535)
    2c58:	6f 81       	ldd	r22, Y+7	; 0x07
    2c5a:	78 85       	ldd	r23, Y+8	; 0x08
    2c5c:	89 85       	ldd	r24, Y+9	; 0x09
    2c5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c60:	20 e0       	ldi	r18, 0x00	; 0
    2c62:	3f ef       	ldi	r19, 0xFF	; 255
    2c64:	4f e7       	ldi	r20, 0x7F	; 127
    2c66:	57 e4       	ldi	r21, 0x47	; 71
    2c68:	0e 94 dd 26 	call	0x4dba	; 0x4dba <__gesf2>
    2c6c:	18 16       	cp	r1, r24
    2c6e:	4c f5       	brge	.+82     	; 0x2cc2 <INDUCTANCE_METER_getReading+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c70:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c72:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c74:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c76:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c78:	20 e0       	ldi	r18, 0x00	; 0
    2c7a:	30 e0       	ldi	r19, 0x00	; 0
    2c7c:	40 e2       	ldi	r20, 0x20	; 32
    2c7e:	51 e4       	ldi	r21, 0x41	; 65
    2c80:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__mulsf3>
    2c84:	dc 01       	movw	r26, r24
    2c86:	cb 01       	movw	r24, r22
    2c88:	bc 01       	movw	r22, r24
    2c8a:	cd 01       	movw	r24, r26
    2c8c:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <__fixunssfsi>
    2c90:	dc 01       	movw	r26, r24
    2c92:	cb 01       	movw	r24, r22
    2c94:	9e 83       	std	Y+6, r25	; 0x06
    2c96:	8d 83       	std	Y+5, r24	; 0x05
    2c98:	0f c0       	rjmp	.+30     	; 0x2cb8 <INDUCTANCE_METER_getReading+0x124>
    2c9a:	80 e9       	ldi	r24, 0x90	; 144
    2c9c:	91 e0       	ldi	r25, 0x01	; 1
    2c9e:	9c 83       	std	Y+4, r25	; 0x04
    2ca0:	8b 83       	std	Y+3, r24	; 0x03
    2ca2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ca4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ca6:	01 97       	sbiw	r24, 0x01	; 1
    2ca8:	f1 f7       	brne	.-4      	; 0x2ca6 <INDUCTANCE_METER_getReading+0x112>
    2caa:	9c 83       	std	Y+4, r25	; 0x04
    2cac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cae:	8d 81       	ldd	r24, Y+5	; 0x05
    2cb0:	9e 81       	ldd	r25, Y+6	; 0x06
    2cb2:	01 97       	sbiw	r24, 0x01	; 1
    2cb4:	9e 83       	std	Y+6, r25	; 0x06
    2cb6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cb8:	8d 81       	ldd	r24, Y+5	; 0x05
    2cba:	9e 81       	ldd	r25, Y+6	; 0x06
    2cbc:	00 97       	sbiw	r24, 0x00	; 0
    2cbe:	69 f7       	brne	.-38     	; 0x2c9a <INDUCTANCE_METER_getReading+0x106>
    2cc0:	14 c0       	rjmp	.+40     	; 0x2cea <INDUCTANCE_METER_getReading+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cc2:	6f 81       	ldd	r22, Y+7	; 0x07
    2cc4:	78 85       	ldd	r23, Y+8	; 0x08
    2cc6:	89 85       	ldd	r24, Y+9	; 0x09
    2cc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cca:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <__fixunssfsi>
    2cce:	dc 01       	movw	r26, r24
    2cd0:	cb 01       	movw	r24, r22
    2cd2:	9e 83       	std	Y+6, r25	; 0x06
    2cd4:	8d 83       	std	Y+5, r24	; 0x05
    2cd6:	8d 81       	ldd	r24, Y+5	; 0x05
    2cd8:	9e 81       	ldd	r25, Y+6	; 0x06
    2cda:	9a 83       	std	Y+2, r25	; 0x02
    2cdc:	89 83       	std	Y+1, r24	; 0x01
    2cde:	89 81       	ldd	r24, Y+1	; 0x01
    2ce0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ce2:	01 97       	sbiw	r24, 0x01	; 1
    2ce4:	f1 f7       	brne	.-4      	; 0x2ce2 <INDUCTANCE_METER_getReading+0x14e>
    2ce6:	9a 83       	std	Y+2, r25	; 0x02
    2ce8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	GPIO_writePin(INDUCTANCE_METER_CHARGING_PORT_ID, INDUCTANCE_METER_CHARGING_PIN_ID, LOGIC_LOW);
    2cea:	83 e0       	ldi	r24, 0x03	; 3
    2cec:	60 e0       	ldi	r22, 0x00	; 0
    2cee:	40 e0       	ldi	r20, 0x00	; 0
    2cf0:	0e 94 23 05 	call	0xa46	; 0xa46 <GPIO_writePin>

	if (GPIO_readPin(INDUCTANCE_METER_COMPARATOR_PORT_ID, PIN3_ID) == LOGIC_HIGH) {
    2cf4:	80 e0       	ldi	r24, 0x00	; 0
    2cf6:	63 e0       	ldi	r22, 0x03	; 3
    2cf8:	0e 94 0e 06 	call	0xc1c	; 0xc1c <GPIO_readPin>
    2cfc:	81 30       	cpi	r24, 0x01	; 1
    2cfe:	99 f5       	brne	.+102    	; 0x2d66 <INDUCTANCE_METER_getReading+0x1d2>
		// Wait for the comparator to change state
		while (GPIO_readPin(INDUCTANCE_METER_COMPARATOR_PORT_ID, INDUCTANCE_METER_COMPARATOR_PIN_ID) == LOGIC_HIGH);
    2d00:	80 e0       	ldi	r24, 0x00	; 0
    2d02:	63 e0       	ldi	r22, 0x03	; 3
    2d04:	0e 94 0e 06 	call	0xc1c	; 0xc1c <GPIO_readPin>
    2d08:	81 30       	cpi	r24, 0x01	; 1
    2d0a:	d1 f3       	breq	.-12     	; 0x2d00 <INDUCTANCE_METER_getReading+0x16c>
		Timer1_init(&Timer1_Config);
    2d0c:	ce 01       	movw	r24, r28
    2d0e:	43 96       	adiw	r24, 0x13	; 19
    2d10:	0e 94 d7 02 	call	0x5ae	; 0x5ae <Timer1_init>

		// Measure the oscillation period
		while (GPIO_readPin(INDUCTANCE_METER_COMPARATOR_PORT_ID, INDUCTANCE_METER_COMPARATOR_PIN_ID) == LOGIC_LOW);
    2d14:	80 e0       	ldi	r24, 0x00	; 0
    2d16:	63 e0       	ldi	r22, 0x03	; 3
    2d18:	0e 94 0e 06 	call	0xc1c	; 0xc1c <GPIO_readPin>
    2d1c:	88 23       	and	r24, r24
    2d1e:	d1 f3       	breq	.-12     	; 0x2d14 <INDUCTANCE_METER_getReading+0x180>
		while (GPIO_readPin(INDUCTANCE_METER_COMPARATOR_PORT_ID, INDUCTANCE_METER_COMPARATOR_PIN_ID) == LOGIC_HIGH);
    2d20:	80 e0       	ldi	r24, 0x00	; 0
    2d22:	63 e0       	ldi	r22, 0x03	; 3
    2d24:	0e 94 0e 06 	call	0xc1c	; 0xc1c <GPIO_readPin>
    2d28:	81 30       	cpi	r24, 0x01	; 1
    2d2a:	d1 f3       	breq	.-12     	; 0x2d20 <INDUCTANCE_METER_getReading+0x18c>
		while (GPIO_readPin(INDUCTANCE_METER_COMPARATOR_PORT_ID, INDUCTANCE_METER_COMPARATOR_PIN_ID) == LOGIC_LOW);
    2d2c:	80 e0       	ldi	r24, 0x00	; 0
    2d2e:	63 e0       	ldi	r22, 0x03	; 3
    2d30:	0e 94 0e 06 	call	0xc1c	; 0xc1c <GPIO_readPin>
    2d34:	88 23       	and	r24, r24
    2d36:	d1 f3       	breq	.-12     	; 0x2d2c <INDUCTANCE_METER_getReading+0x198>
		while (GPIO_readPin(INDUCTANCE_METER_COMPARATOR_PORT_ID, INDUCTANCE_METER_COMPARATOR_PIN_ID) == LOGIC_HIGH);
    2d38:	80 e0       	ldi	r24, 0x00	; 0
    2d3a:	63 e0       	ldi	r22, 0x03	; 3
    2d3c:	0e 94 0e 06 	call	0xc1c	; 0xc1c <GPIO_readPin>
    2d40:	81 30       	cpi	r24, 0x01	; 1
    2d42:	d1 f3       	breq	.-12     	; 0x2d38 <INDUCTANCE_METER_getReading+0x1a4>

		// Get the timer count
		inductance = Timer1_getCount();
    2d44:	0e 94 51 03 	call	0x6a2	; 0x6a2 <Timer1_getCount>
    2d48:	dc 01       	movw	r26, r24
    2d4a:	cb 01       	movw	r24, r22
    2d4c:	bc 01       	movw	r22, r24
    2d4e:	cd 01       	movw	r24, r26
    2d50:	0e 94 2b 26 	call	0x4c56	; 0x4c56 <__floatunsisf>
    2d54:	dc 01       	movw	r26, r24
    2d56:	cb 01       	movw	r24, r22
    2d58:	8f 87       	std	Y+15, r24	; 0x0f
    2d5a:	98 8b       	std	Y+16, r25	; 0x10
    2d5c:	a9 8b       	std	Y+17, r26	; 0x11
    2d5e:	ba 8b       	std	Y+18, r27	; 0x12
		Timer1_deInit();
    2d60:	0e 94 29 03 	call	0x652	; 0x652 <Timer1_deInit>
    2d64:	32 c0       	rjmp	.+100    	; 0x2dca <INDUCTANCE_METER_getReading+0x236>
	} else {
		// Wait for the comparator to change state
		while (GPIO_readPin(INDUCTANCE_METER_COMPARATOR_PORT_ID, INDUCTANCE_METER_COMPARATOR_PIN_ID) == LOGIC_LOW);
    2d66:	80 e0       	ldi	r24, 0x00	; 0
    2d68:	63 e0       	ldi	r22, 0x03	; 3
    2d6a:	0e 94 0e 06 	call	0xc1c	; 0xc1c <GPIO_readPin>
    2d6e:	88 23       	and	r24, r24
    2d70:	d1 f3       	breq	.-12     	; 0x2d66 <INDUCTANCE_METER_getReading+0x1d2>
		Timer1_init(&Timer1_Config);
    2d72:	ce 01       	movw	r24, r28
    2d74:	43 96       	adiw	r24, 0x13	; 19
    2d76:	0e 94 d7 02 	call	0x5ae	; 0x5ae <Timer1_init>

		// Measure the oscillation period
		while (GPIO_readPin(INDUCTANCE_METER_COMPARATOR_PORT_ID, INDUCTANCE_METER_COMPARATOR_PIN_ID) == LOGIC_HIGH);
    2d7a:	80 e0       	ldi	r24, 0x00	; 0
    2d7c:	63 e0       	ldi	r22, 0x03	; 3
    2d7e:	0e 94 0e 06 	call	0xc1c	; 0xc1c <GPIO_readPin>
    2d82:	81 30       	cpi	r24, 0x01	; 1
    2d84:	d1 f3       	breq	.-12     	; 0x2d7a <INDUCTANCE_METER_getReading+0x1e6>
		while (GPIO_readPin(INDUCTANCE_METER_COMPARATOR_PORT_ID, INDUCTANCE_METER_COMPARATOR_PIN_ID) == LOGIC_LOW);
    2d86:	80 e0       	ldi	r24, 0x00	; 0
    2d88:	63 e0       	ldi	r22, 0x03	; 3
    2d8a:	0e 94 0e 06 	call	0xc1c	; 0xc1c <GPIO_readPin>
    2d8e:	88 23       	and	r24, r24
    2d90:	d1 f3       	breq	.-12     	; 0x2d86 <INDUCTANCE_METER_getReading+0x1f2>
		while (GPIO_readPin(INDUCTANCE_METER_COMPARATOR_PORT_ID, INDUCTANCE_METER_COMPARATOR_PIN_ID) == LOGIC_HIGH);
    2d92:	80 e0       	ldi	r24, 0x00	; 0
    2d94:	63 e0       	ldi	r22, 0x03	; 3
    2d96:	0e 94 0e 06 	call	0xc1c	; 0xc1c <GPIO_readPin>
    2d9a:	81 30       	cpi	r24, 0x01	; 1
    2d9c:	d1 f3       	breq	.-12     	; 0x2d92 <INDUCTANCE_METER_getReading+0x1fe>
		while (GPIO_readPin(INDUCTANCE_METER_COMPARATOR_PORT_ID, INDUCTANCE_METER_COMPARATOR_PIN_ID) == LOGIC_LOW);
    2d9e:	80 e0       	ldi	r24, 0x00	; 0
    2da0:	63 e0       	ldi	r22, 0x03	; 3
    2da2:	0e 94 0e 06 	call	0xc1c	; 0xc1c <GPIO_readPin>
    2da6:	88 23       	and	r24, r24
    2da8:	d1 f3       	breq	.-12     	; 0x2d9e <INDUCTANCE_METER_getReading+0x20a>

		// Get the timer count
		inductance = Timer1_getCount();
    2daa:	0e 94 51 03 	call	0x6a2	; 0x6a2 <Timer1_getCount>
    2dae:	dc 01       	movw	r26, r24
    2db0:	cb 01       	movw	r24, r22
    2db2:	bc 01       	movw	r22, r24
    2db4:	cd 01       	movw	r24, r26
    2db6:	0e 94 2b 26 	call	0x4c56	; 0x4c56 <__floatunsisf>
    2dba:	dc 01       	movw	r26, r24
    2dbc:	cb 01       	movw	r24, r22
    2dbe:	8f 87       	std	Y+15, r24	; 0x0f
    2dc0:	98 8b       	std	Y+16, r25	; 0x10
    2dc2:	a9 8b       	std	Y+17, r26	; 0x11
    2dc4:	ba 8b       	std	Y+18, r27	; 0x12
		Timer1_deInit();
    2dc6:	0e 94 29 03 	call	0x652	; 0x652 <Timer1_deInit>
	}

	// Calculate the inductance based on the measured period
	inductance /= (F_CPU_MEGA_HZ * 2);
    2dca:	6f 85       	ldd	r22, Y+15	; 0x0f
    2dcc:	78 89       	ldd	r23, Y+16	; 0x10
    2dce:	89 89       	ldd	r24, Y+17	; 0x11
    2dd0:	9a 89       	ldd	r25, Y+18	; 0x12
    2dd2:	20 e0       	ldi	r18, 0x00	; 0
    2dd4:	30 e0       	ldi	r19, 0x00	; 0
    2dd6:	40 e0       	ldi	r20, 0x00	; 0
    2dd8:	52 e4       	ldi	r21, 0x42	; 66
    2dda:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__divsf3>
    2dde:	dc 01       	movw	r26, r24
    2de0:	cb 01       	movw	r24, r22
    2de2:	8f 87       	std	Y+15, r24	; 0x0f
    2de4:	98 8b       	std	Y+16, r25	; 0x10
    2de6:	a9 8b       	std	Y+17, r26	; 0x11
    2de8:	ba 8b       	std	Y+18, r27	; 0x12
	inductance = (inductance * inductance) / (4 * (M_PI * M_PI) * INDUCTANCE_METER_CAPACITOR_MICROFARAD_VALUE);
    2dea:	6f 85       	ldd	r22, Y+15	; 0x0f
    2dec:	78 89       	ldd	r23, Y+16	; 0x10
    2dee:	89 89       	ldd	r24, Y+17	; 0x11
    2df0:	9a 89       	ldd	r25, Y+18	; 0x12
    2df2:	2f 85       	ldd	r18, Y+15	; 0x0f
    2df4:	38 89       	ldd	r19, Y+16	; 0x10
    2df6:	49 89       	ldd	r20, Y+17	; 0x11
    2df8:	5a 89       	ldd	r21, Y+18	; 0x12
    2dfa:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__mulsf3>
    2dfe:	dc 01       	movw	r26, r24
    2e00:	cb 01       	movw	r24, r22
    2e02:	bc 01       	movw	r22, r24
    2e04:	cd 01       	movw	r24, r26
    2e06:	27 ee       	ldi	r18, 0xE7	; 231
    2e08:	39 ee       	ldi	r19, 0xE9	; 233
    2e0a:	4d e9       	ldi	r20, 0x9D	; 157
    2e0c:	52 e4       	ldi	r21, 0x42	; 66
    2e0e:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__divsf3>
    2e12:	dc 01       	movw	r26, r24
    2e14:	cb 01       	movw	r24, r22
    2e16:	8f 87       	std	Y+15, r24	; 0x0f
    2e18:	98 8b       	std	Y+16, r25	; 0x10
    2e1a:	a9 8b       	std	Y+17, r26	; 0x11
    2e1c:	ba 8b       	std	Y+18, r27	; 0x12

	return inductance;
    2e1e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e20:	98 89       	ldd	r25, Y+16	; 0x10
    2e22:	a9 89       	ldd	r26, Y+17	; 0x11
    2e24:	ba 89       	ldd	r27, Y+18	; 0x12
}
    2e26:	bc 01       	movw	r22, r24
    2e28:	cd 01       	movw	r24, r26
    2e2a:	6d 96       	adiw	r28, 0x1d	; 29
    2e2c:	0f b6       	in	r0, 0x3f	; 63
    2e2e:	f8 94       	cli
    2e30:	de bf       	out	0x3e, r29	; 62
    2e32:	0f be       	out	0x3f, r0	; 63
    2e34:	cd bf       	out	0x3d, r28	; 61
    2e36:	cf 91       	pop	r28
    2e38:	df 91       	pop	r29
    2e3a:	08 95       	ret

00002e3c <CURRENT_METER_detectType>:
 |    - ads: Pointer to ADS1015 instance                                        |
 | Returns:                                                                     |
 |    - CURRENT_Type: Detected current type (AC or DC)                          |
 |______________________________________________________________________________|
 */
static CURRENT_Type CURRENT_METER_detectType(ADS1015 *ads) {
    2e3c:	ef 92       	push	r14
    2e3e:	ff 92       	push	r15
    2e40:	0f 93       	push	r16
    2e42:	1f 93       	push	r17
    2e44:	df 93       	push	r29
    2e46:	cf 93       	push	r28
    2e48:	cd b7       	in	r28, 0x3d	; 61
    2e4a:	de b7       	in	r29, 0x3e	; 62
    2e4c:	ca 54       	subi	r28, 0x4A	; 74
    2e4e:	d0 40       	sbci	r29, 0x00	; 0
    2e50:	0f b6       	in	r0, 0x3f	; 63
    2e52:	f8 94       	cli
    2e54:	de bf       	out	0x3e, r29	; 62
    2e56:	0f be       	out	0x3f, r0	; 63
    2e58:	cd bf       	out	0x3d, r28	; 61
    2e5a:	fe 01       	movw	r30, r28
    2e5c:	e8 5b       	subi	r30, 0xB8	; 184
    2e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e60:	91 83       	std	Z+1, r25	; 0x01
    2e62:	80 83       	st	Z, r24
    uint16 adcValue;
    float voltage, current;
    float sum = 0.0, sumSq = 0.0, mean, variance, stddev;
    2e64:	80 e0       	ldi	r24, 0x00	; 0
    2e66:	90 e0       	ldi	r25, 0x00	; 0
    2e68:	a0 e0       	ldi	r26, 0x00	; 0
    2e6a:	b0 e0       	ldi	r27, 0x00	; 0
    2e6c:	8a 8b       	std	Y+18, r24	; 0x12
    2e6e:	9b 8b       	std	Y+19, r25	; 0x13
    2e70:	ac 8b       	std	Y+20, r26	; 0x14
    2e72:	bd 8b       	std	Y+21, r27	; 0x15
    2e74:	80 e0       	ldi	r24, 0x00	; 0
    2e76:	90 e0       	ldi	r25, 0x00	; 0
    2e78:	a0 e0       	ldi	r26, 0x00	; 0
    2e7a:	b0 e0       	ldi	r27, 0x00	; 0
    2e7c:	8e 87       	std	Y+14, r24	; 0x0e
    2e7e:	9f 87       	std	Y+15, r25	; 0x0f
    2e80:	a8 8b       	std	Y+16, r26	; 0x10
    2e82:	b9 8b       	std	Y+17, r27	; 0x11
    float currents[CURRENT_METER_VOLTAGE_NUM_SAMPLES];

    for (uint8 i = 0; i < CURRENT_METER_VOLTAGE_NUM_SAMPLES; i++) {
    2e84:	19 82       	std	Y+1, r1	; 0x01
    2e86:	80 c0       	rjmp	.+256    	; 0x2f88 <CURRENT_METER_detectType+0x14c>
        adcValue = ADS1015_readADC_SingleEnded(ads, CURRENT_METER_VOUT_ADS_CHANNEL_NUM); // Read ADC value
    2e88:	fe 01       	movw	r30, r28
    2e8a:	e8 5b       	subi	r30, 0xB8	; 184
    2e8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e8e:	80 81       	ld	r24, Z
    2e90:	91 81       	ldd	r25, Z+1	; 0x01
    2e92:	63 e0       	ldi	r22, 0x03	; 3
    2e94:	0e 94 34 1d 	call	0x3a68	; 0x3a68 <ADS1015_readADC_SingleEnded>
    2e98:	9f 8f       	std	Y+31, r25	; 0x1f
    2e9a:	8e 8f       	std	Y+30, r24	; 0x1e
        voltage = (float)adcValue / 333.33;
    2e9c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2e9e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2ea0:	cc 01       	movw	r24, r24
    2ea2:	a0 e0       	ldi	r26, 0x00	; 0
    2ea4:	b0 e0       	ldi	r27, 0x00	; 0
    2ea6:	bc 01       	movw	r22, r24
    2ea8:	cd 01       	movw	r24, r26
    2eaa:	0e 94 2b 26 	call	0x4c56	; 0x4c56 <__floatunsisf>
    2eae:	dc 01       	movw	r26, r24
    2eb0:	cb 01       	movw	r24, r22
    2eb2:	bc 01       	movw	r22, r24
    2eb4:	cd 01       	movw	r24, r26
    2eb6:	2d e3       	ldi	r18, 0x3D	; 61
    2eb8:	3a ea       	ldi	r19, 0xAA	; 170
    2eba:	46 ea       	ldi	r20, 0xA6	; 166
    2ebc:	53 e4       	ldi	r21, 0x43	; 67
    2ebe:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__divsf3>
    2ec2:	dc 01       	movw	r26, r24
    2ec4:	cb 01       	movw	r24, r22
    2ec6:	8a 8f       	std	Y+26, r24	; 0x1a
    2ec8:	9b 8f       	std	Y+27, r25	; 0x1b
    2eca:	ac 8f       	std	Y+28, r26	; 0x1c
    2ecc:	bd 8f       	std	Y+29, r27	; 0x1d
        current = (voltage - CURRENT_METER_ZERO_CURRENT_VOLTAGE) / CURRENT_METER_ACS712ELCTR_20A_T_SENSITIVITY; // Convert voltage to current
    2ece:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2ed0:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2ed2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2ed4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2ed6:	20 e0       	ldi	r18, 0x00	; 0
    2ed8:	30 e0       	ldi	r19, 0x00	; 0
    2eda:	40 e2       	ldi	r20, 0x20	; 32
    2edc:	50 e4       	ldi	r21, 0x40	; 64
    2ede:	0e 94 2e 25 	call	0x4a5c	; 0x4a5c <__subsf3>
    2ee2:	dc 01       	movw	r26, r24
    2ee4:	cb 01       	movw	r24, r22
    2ee6:	bc 01       	movw	r22, r24
    2ee8:	cd 01       	movw	r24, r26
    2eea:	2d ec       	ldi	r18, 0xCD	; 205
    2eec:	3c ec       	ldi	r19, 0xCC	; 204
    2eee:	4c ec       	ldi	r20, 0xCC	; 204
    2ef0:	5d e3       	ldi	r21, 0x3D	; 61
    2ef2:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__divsf3>
    2ef6:	dc 01       	movw	r26, r24
    2ef8:	cb 01       	movw	r24, r22
    2efa:	8e 8b       	std	Y+22, r24	; 0x16
    2efc:	9f 8b       	std	Y+23, r25	; 0x17
    2efe:	a8 8f       	std	Y+24, r26	; 0x18
    2f00:	b9 8f       	std	Y+25, r27	; 0x19
        currents[i] = current; // Store current value
    2f02:	89 81       	ldd	r24, Y+1	; 0x01
    2f04:	88 2f       	mov	r24, r24
    2f06:	90 e0       	ldi	r25, 0x00	; 0
    2f08:	9c 01       	movw	r18, r24
    2f0a:	22 0f       	add	r18, r18
    2f0c:	33 1f       	adc	r19, r19
    2f0e:	22 0f       	add	r18, r18
    2f10:	33 1f       	adc	r19, r19
    2f12:	ce 01       	movw	r24, r28
    2f14:	01 96       	adiw	r24, 0x01	; 1
    2f16:	82 0f       	add	r24, r18
    2f18:	93 1f       	adc	r25, r19
    2f1a:	fc 01       	movw	r30, r24
    2f1c:	7f 96       	adiw	r30, 0x1f	; 31
    2f1e:	8e 89       	ldd	r24, Y+22	; 0x16
    2f20:	9f 89       	ldd	r25, Y+23	; 0x17
    2f22:	a8 8d       	ldd	r26, Y+24	; 0x18
    2f24:	b9 8d       	ldd	r27, Y+25	; 0x19
    2f26:	80 83       	st	Z, r24
    2f28:	91 83       	std	Z+1, r25	; 0x01
    2f2a:	a2 83       	std	Z+2, r26	; 0x02
    2f2c:	b3 83       	std	Z+3, r27	; 0x03

        sum += current; // Sum of current values
    2f2e:	6a 89       	ldd	r22, Y+18	; 0x12
    2f30:	7b 89       	ldd	r23, Y+19	; 0x13
    2f32:	8c 89       	ldd	r24, Y+20	; 0x14
    2f34:	9d 89       	ldd	r25, Y+21	; 0x15
    2f36:	2e 89       	ldd	r18, Y+22	; 0x16
    2f38:	3f 89       	ldd	r19, Y+23	; 0x17
    2f3a:	48 8d       	ldd	r20, Y+24	; 0x18
    2f3c:	59 8d       	ldd	r21, Y+25	; 0x19
    2f3e:	0e 94 2f 25 	call	0x4a5e	; 0x4a5e <__addsf3>
    2f42:	dc 01       	movw	r26, r24
    2f44:	cb 01       	movw	r24, r22
    2f46:	8a 8b       	std	Y+18, r24	; 0x12
    2f48:	9b 8b       	std	Y+19, r25	; 0x13
    2f4a:	ac 8b       	std	Y+20, r26	; 0x14
    2f4c:	bd 8b       	std	Y+21, r27	; 0x15
        sumSq += current * current; // Sum of squares of current values
    2f4e:	6e 89       	ldd	r22, Y+22	; 0x16
    2f50:	7f 89       	ldd	r23, Y+23	; 0x17
    2f52:	88 8d       	ldd	r24, Y+24	; 0x18
    2f54:	99 8d       	ldd	r25, Y+25	; 0x19
    2f56:	2e 89       	ldd	r18, Y+22	; 0x16
    2f58:	3f 89       	ldd	r19, Y+23	; 0x17
    2f5a:	48 8d       	ldd	r20, Y+24	; 0x18
    2f5c:	59 8d       	ldd	r21, Y+25	; 0x19
    2f5e:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__mulsf3>
    2f62:	dc 01       	movw	r26, r24
    2f64:	cb 01       	movw	r24, r22
    2f66:	9c 01       	movw	r18, r24
    2f68:	ad 01       	movw	r20, r26
    2f6a:	6e 85       	ldd	r22, Y+14	; 0x0e
    2f6c:	7f 85       	ldd	r23, Y+15	; 0x0f
    2f6e:	88 89       	ldd	r24, Y+16	; 0x10
    2f70:	99 89       	ldd	r25, Y+17	; 0x11
    2f72:	0e 94 2f 25 	call	0x4a5e	; 0x4a5e <__addsf3>
    2f76:	dc 01       	movw	r26, r24
    2f78:	cb 01       	movw	r24, r22
    2f7a:	8e 87       	std	Y+14, r24	; 0x0e
    2f7c:	9f 87       	std	Y+15, r25	; 0x0f
    2f7e:	a8 8b       	std	Y+16, r26	; 0x10
    2f80:	b9 8b       	std	Y+17, r27	; 0x11
    uint16 adcValue;
    float voltage, current;
    float sum = 0.0, sumSq = 0.0, mean, variance, stddev;
    float currents[CURRENT_METER_VOLTAGE_NUM_SAMPLES];

    for (uint8 i = 0; i < CURRENT_METER_VOLTAGE_NUM_SAMPLES; i++) {
    2f82:	89 81       	ldd	r24, Y+1	; 0x01
    2f84:	8f 5f       	subi	r24, 0xFF	; 255
    2f86:	89 83       	std	Y+1, r24	; 0x01
    2f88:	89 81       	ldd	r24, Y+1	; 0x01
    2f8a:	8a 30       	cpi	r24, 0x0A	; 10
    2f8c:	08 f4       	brcc	.+2      	; 0x2f90 <CURRENT_METER_detectType+0x154>
    2f8e:	7c cf       	rjmp	.-264    	; 0x2e88 <CURRENT_METER_detectType+0x4c>

        sum += current; // Sum of current values
        sumSq += current * current; // Sum of squares of current values
    }

    mean = sum / CURRENT_METER_VOLTAGE_NUM_SAMPLES; // Calculate mean
    2f90:	6a 89       	ldd	r22, Y+18	; 0x12
    2f92:	7b 89       	ldd	r23, Y+19	; 0x13
    2f94:	8c 89       	ldd	r24, Y+20	; 0x14
    2f96:	9d 89       	ldd	r25, Y+21	; 0x15
    2f98:	20 e0       	ldi	r18, 0x00	; 0
    2f9a:	30 e0       	ldi	r19, 0x00	; 0
    2f9c:	40 e2       	ldi	r20, 0x20	; 32
    2f9e:	51 e4       	ldi	r21, 0x41	; 65
    2fa0:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__divsf3>
    2fa4:	dc 01       	movw	r26, r24
    2fa6:	cb 01       	movw	r24, r22
    2fa8:	8a 87       	std	Y+10, r24	; 0x0a
    2faa:	9b 87       	std	Y+11, r25	; 0x0b
    2fac:	ac 87       	std	Y+12, r26	; 0x0c
    2fae:	bd 87       	std	Y+13, r27	; 0x0d
    variance = (sumSq / CURRENT_METER_VOLTAGE_NUM_SAMPLES) - (mean * mean); // Calculate variance
    2fb0:	6e 85       	ldd	r22, Y+14	; 0x0e
    2fb2:	7f 85       	ldd	r23, Y+15	; 0x0f
    2fb4:	88 89       	ldd	r24, Y+16	; 0x10
    2fb6:	99 89       	ldd	r25, Y+17	; 0x11
    2fb8:	20 e0       	ldi	r18, 0x00	; 0
    2fba:	30 e0       	ldi	r19, 0x00	; 0
    2fbc:	40 e2       	ldi	r20, 0x20	; 32
    2fbe:	51 e4       	ldi	r21, 0x41	; 65
    2fc0:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__divsf3>
    2fc4:	dc 01       	movw	r26, r24
    2fc6:	cb 01       	movw	r24, r22
    2fc8:	7c 01       	movw	r14, r24
    2fca:	8d 01       	movw	r16, r26
    2fcc:	6a 85       	ldd	r22, Y+10	; 0x0a
    2fce:	7b 85       	ldd	r23, Y+11	; 0x0b
    2fd0:	8c 85       	ldd	r24, Y+12	; 0x0c
    2fd2:	9d 85       	ldd	r25, Y+13	; 0x0d
    2fd4:	2a 85       	ldd	r18, Y+10	; 0x0a
    2fd6:	3b 85       	ldd	r19, Y+11	; 0x0b
    2fd8:	4c 85       	ldd	r20, Y+12	; 0x0c
    2fda:	5d 85       	ldd	r21, Y+13	; 0x0d
    2fdc:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__mulsf3>
    2fe0:	dc 01       	movw	r26, r24
    2fe2:	cb 01       	movw	r24, r22
    2fe4:	9c 01       	movw	r18, r24
    2fe6:	ad 01       	movw	r20, r26
    2fe8:	c8 01       	movw	r24, r16
    2fea:	b7 01       	movw	r22, r14
    2fec:	0e 94 2e 25 	call	0x4a5c	; 0x4a5c <__subsf3>
    2ff0:	dc 01       	movw	r26, r24
    2ff2:	cb 01       	movw	r24, r22
    2ff4:	8e 83       	std	Y+6, r24	; 0x06
    2ff6:	9f 83       	std	Y+7, r25	; 0x07
    2ff8:	a8 87       	std	Y+8, r26	; 0x08
    2ffa:	b9 87       	std	Y+9, r27	; 0x09
    stddev = sqrt(variance); // Calculate standard deviation
    2ffc:	8e 81       	ldd	r24, Y+6	; 0x06
    2ffe:	9f 81       	ldd	r25, Y+7	; 0x07
    3000:	a8 85       	ldd	r26, Y+8	; 0x08
    3002:	b9 85       	ldd	r27, Y+9	; 0x09
    3004:	bc 01       	movw	r22, r24
    3006:	cd 01       	movw	r24, r26
    3008:	0e 94 48 27 	call	0x4e90	; 0x4e90 <sqrt>
    300c:	dc 01       	movw	r26, r24
    300e:	cb 01       	movw	r24, r22
    3010:	8a 83       	std	Y+2, r24	; 0x02
    3012:	9b 83       	std	Y+3, r25	; 0x03
    3014:	ac 83       	std	Y+4, r26	; 0x04
    3016:	bd 83       	std	Y+5, r27	; 0x05

    if (stddev > CURRENT_METER_AC_THRESHOLD) {
    3018:	6a 81       	ldd	r22, Y+2	; 0x02
    301a:	7b 81       	ldd	r23, Y+3	; 0x03
    301c:	8c 81       	ldd	r24, Y+4	; 0x04
    301e:	9d 81       	ldd	r25, Y+5	; 0x05
    3020:	2d ec       	ldi	r18, 0xCD	; 205
    3022:	3c ec       	ldi	r19, 0xCC	; 204
    3024:	4c e4       	ldi	r20, 0x4C	; 76
    3026:	5d e3       	ldi	r21, 0x3D	; 61
    3028:	0e 94 dd 26 	call	0x4dba	; 0x4dba <__gesf2>
    302c:	18 16       	cp	r1, r24
    302e:	2c f4       	brge	.+10     	; 0x303a <CURRENT_METER_detectType+0x1fe>
        return CURRENT_AC; // If standard deviation is above threshold, it's AC
    3030:	81 e0       	ldi	r24, 0x01	; 1
    3032:	2b 96       	adiw	r28, 0x0b	; 11
    3034:	8f af       	std	Y+63, r24	; 0x3f
    3036:	2b 97       	sbiw	r28, 0x0b	; 11
    3038:	03 c0       	rjmp	.+6      	; 0x3040 <CURRENT_METER_detectType+0x204>
    } else {
        return CURRENT_DC; // If standard deviation is below threshold, it's DC
    303a:	2b 96       	adiw	r28, 0x0b	; 11
    303c:	1f ae       	std	Y+63, r1	; 0x3f
    303e:	2b 97       	sbiw	r28, 0x0b	; 11
    3040:	2b 96       	adiw	r28, 0x0b	; 11
    3042:	8f ad       	ldd	r24, Y+63	; 0x3f
    3044:	2b 97       	sbiw	r28, 0x0b	; 11
    }
}
    3046:	c6 5b       	subi	r28, 0xB6	; 182
    3048:	df 4f       	sbci	r29, 0xFF	; 255
    304a:	0f b6       	in	r0, 0x3f	; 63
    304c:	f8 94       	cli
    304e:	de bf       	out	0x3e, r29	; 62
    3050:	0f be       	out	0x3f, r0	; 63
    3052:	cd bf       	out	0x3d, r28	; 61
    3054:	cf 91       	pop	r28
    3056:	df 91       	pop	r29
    3058:	1f 91       	pop	r17
    305a:	0f 91       	pop	r16
    305c:	ff 90       	pop	r15
    305e:	ef 90       	pop	r14
    3060:	08 95       	ret

00003062 <CURRENT_METER_getReading>:
 |    - ads: Pointer to ADS1015 instance                                        |
 | Returns:                                                                     |
 |    - float: Measured current value                                           |
 |______________________________________________________________________________|
 */
float CURRENT_METER_getReading(ADS1015 *ads) {
    3062:	df 93       	push	r29
    3064:	cf 93       	push	r28
    3066:	cd b7       	in	r28, 0x3d	; 61
    3068:	de b7       	in	r29, 0x3e	; 62
    306a:	63 97       	sbiw	r28, 0x13	; 19
    306c:	0f b6       	in	r0, 0x3f	; 63
    306e:	f8 94       	cli
    3070:	de bf       	out	0x3e, r29	; 62
    3072:	0f be       	out	0x3f, r0	; 63
    3074:	cd bf       	out	0x3d, r28	; 61
    3076:	9b 8b       	std	Y+19, r25	; 0x13
    3078:	8a 8b       	std	Y+18, r24	; 0x12
    CURRENT_Type currentType = CURRENT_METER_detectType(ads); // Detect current type
    307a:	8a 89       	ldd	r24, Y+18	; 0x12
    307c:	9b 89       	ldd	r25, Y+19	; 0x13
    307e:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <CURRENT_METER_detectType>
    3082:	89 8b       	std	Y+17, r24	; 0x11
    uint16 adcValue;
    float voltage, current, sum = 0.0;
    3084:	80 e0       	ldi	r24, 0x00	; 0
    3086:	90 e0       	ldi	r25, 0x00	; 0
    3088:	a0 e0       	ldi	r26, 0x00	; 0
    308a:	b0 e0       	ldi	r27, 0x00	; 0
    308c:	8b 83       	std	Y+3, r24	; 0x03
    308e:	9c 83       	std	Y+4, r25	; 0x04
    3090:	ad 83       	std	Y+5, r26	; 0x05
    3092:	be 83       	std	Y+6, r27	; 0x06
    uint8 numSamples = (currentType == CURRENT_AC) ? CURRENT_METER_VOLTAGE_NUM_SAMPLES : 10;
    3094:	8a e0       	ldi	r24, 0x0A	; 10
    3096:	8a 83       	std	Y+2, r24	; 0x02

    for (uint8 i = 0; i < numSamples; i++) {
    3098:	19 82       	std	Y+1, r1	; 0x01
    309a:	6b c0       	rjmp	.+214    	; 0x3172 <CURRENT_METER_getReading+0x110>
        adcValue = ADS1015_readADC_SingleEnded(ads, CURRENT_METER_VOUT_ADS_CHANNEL_NUM); // Read ADC value
    309c:	8a 89       	ldd	r24, Y+18	; 0x12
    309e:	9b 89       	ldd	r25, Y+19	; 0x13
    30a0:	63 e0       	ldi	r22, 0x03	; 3
    30a2:	0e 94 34 1d 	call	0x3a68	; 0x3a68 <ADS1015_readADC_SingleEnded>
    30a6:	98 8b       	std	Y+16, r25	; 0x10
    30a8:	8f 87       	std	Y+15, r24	; 0x0f
        voltage = (float)adcValue / 333.33;
    30aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    30ac:	98 89       	ldd	r25, Y+16	; 0x10
    30ae:	cc 01       	movw	r24, r24
    30b0:	a0 e0       	ldi	r26, 0x00	; 0
    30b2:	b0 e0       	ldi	r27, 0x00	; 0
    30b4:	bc 01       	movw	r22, r24
    30b6:	cd 01       	movw	r24, r26
    30b8:	0e 94 2b 26 	call	0x4c56	; 0x4c56 <__floatunsisf>
    30bc:	dc 01       	movw	r26, r24
    30be:	cb 01       	movw	r24, r22
    30c0:	bc 01       	movw	r22, r24
    30c2:	cd 01       	movw	r24, r26
    30c4:	2d e3       	ldi	r18, 0x3D	; 61
    30c6:	3a ea       	ldi	r19, 0xAA	; 170
    30c8:	46 ea       	ldi	r20, 0xA6	; 166
    30ca:	53 e4       	ldi	r21, 0x43	; 67
    30cc:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__divsf3>
    30d0:	dc 01       	movw	r26, r24
    30d2:	cb 01       	movw	r24, r22
    30d4:	8b 87       	std	Y+11, r24	; 0x0b
    30d6:	9c 87       	std	Y+12, r25	; 0x0c
    30d8:	ad 87       	std	Y+13, r26	; 0x0d
    30da:	be 87       	std	Y+14, r27	; 0x0e
        current = (voltage - CURRENT_METER_ZERO_CURRENT_VOLTAGE) / CURRENT_METER_ACS712ELCTR_20A_T_SENSITIVITY; // Convert voltage to current
    30dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    30de:	7c 85       	ldd	r23, Y+12	; 0x0c
    30e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    30e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    30e4:	20 e0       	ldi	r18, 0x00	; 0
    30e6:	30 e0       	ldi	r19, 0x00	; 0
    30e8:	40 e2       	ldi	r20, 0x20	; 32
    30ea:	50 e4       	ldi	r21, 0x40	; 64
    30ec:	0e 94 2e 25 	call	0x4a5c	; 0x4a5c <__subsf3>
    30f0:	dc 01       	movw	r26, r24
    30f2:	cb 01       	movw	r24, r22
    30f4:	bc 01       	movw	r22, r24
    30f6:	cd 01       	movw	r24, r26
    30f8:	2d ec       	ldi	r18, 0xCD	; 205
    30fa:	3c ec       	ldi	r19, 0xCC	; 204
    30fc:	4c ec       	ldi	r20, 0xCC	; 204
    30fe:	5d e3       	ldi	r21, 0x3D	; 61
    3100:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__divsf3>
    3104:	dc 01       	movw	r26, r24
    3106:	cb 01       	movw	r24, r22
    3108:	8f 83       	std	Y+7, r24	; 0x07
    310a:	98 87       	std	Y+8, r25	; 0x08
    310c:	a9 87       	std	Y+9, r26	; 0x09
    310e:	ba 87       	std	Y+10, r27	; 0x0a

        if (currentType == CURRENT_AC) {
    3110:	89 89       	ldd	r24, Y+17	; 0x11
    3112:	81 30       	cpi	r24, 0x01	; 1
    3114:	d9 f4       	brne	.+54     	; 0x314c <CURRENT_METER_getReading+0xea>
            sum += current * current; // Square the current and add to sum for AC
    3116:	6f 81       	ldd	r22, Y+7	; 0x07
    3118:	78 85       	ldd	r23, Y+8	; 0x08
    311a:	89 85       	ldd	r24, Y+9	; 0x09
    311c:	9a 85       	ldd	r25, Y+10	; 0x0a
    311e:	2f 81       	ldd	r18, Y+7	; 0x07
    3120:	38 85       	ldd	r19, Y+8	; 0x08
    3122:	49 85       	ldd	r20, Y+9	; 0x09
    3124:	5a 85       	ldd	r21, Y+10	; 0x0a
    3126:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__mulsf3>
    312a:	dc 01       	movw	r26, r24
    312c:	cb 01       	movw	r24, r22
    312e:	9c 01       	movw	r18, r24
    3130:	ad 01       	movw	r20, r26
    3132:	6b 81       	ldd	r22, Y+3	; 0x03
    3134:	7c 81       	ldd	r23, Y+4	; 0x04
    3136:	8d 81       	ldd	r24, Y+5	; 0x05
    3138:	9e 81       	ldd	r25, Y+6	; 0x06
    313a:	0e 94 2f 25 	call	0x4a5e	; 0x4a5e <__addsf3>
    313e:	dc 01       	movw	r26, r24
    3140:	cb 01       	movw	r24, r22
    3142:	8b 83       	std	Y+3, r24	; 0x03
    3144:	9c 83       	std	Y+4, r25	; 0x04
    3146:	ad 83       	std	Y+5, r26	; 0x05
    3148:	be 83       	std	Y+6, r27	; 0x06
    314a:	10 c0       	rjmp	.+32     	; 0x316c <CURRENT_METER_getReading+0x10a>
        } else {
            sum += current; // Sum the current values for DC
    314c:	6b 81       	ldd	r22, Y+3	; 0x03
    314e:	7c 81       	ldd	r23, Y+4	; 0x04
    3150:	8d 81       	ldd	r24, Y+5	; 0x05
    3152:	9e 81       	ldd	r25, Y+6	; 0x06
    3154:	2f 81       	ldd	r18, Y+7	; 0x07
    3156:	38 85       	ldd	r19, Y+8	; 0x08
    3158:	49 85       	ldd	r20, Y+9	; 0x09
    315a:	5a 85       	ldd	r21, Y+10	; 0x0a
    315c:	0e 94 2f 25 	call	0x4a5e	; 0x4a5e <__addsf3>
    3160:	dc 01       	movw	r26, r24
    3162:	cb 01       	movw	r24, r22
    3164:	8b 83       	std	Y+3, r24	; 0x03
    3166:	9c 83       	std	Y+4, r25	; 0x04
    3168:	ad 83       	std	Y+5, r26	; 0x05
    316a:	be 83       	std	Y+6, r27	; 0x06
    CURRENT_Type currentType = CURRENT_METER_detectType(ads); // Detect current type
    uint16 adcValue;
    float voltage, current, sum = 0.0;
    uint8 numSamples = (currentType == CURRENT_AC) ? CURRENT_METER_VOLTAGE_NUM_SAMPLES : 10;

    for (uint8 i = 0; i < numSamples; i++) {
    316c:	89 81       	ldd	r24, Y+1	; 0x01
    316e:	8f 5f       	subi	r24, 0xFF	; 255
    3170:	89 83       	std	Y+1, r24	; 0x01
    3172:	99 81       	ldd	r25, Y+1	; 0x01
    3174:	8a 81       	ldd	r24, Y+2	; 0x02
    3176:	98 17       	cp	r25, r24
    3178:	08 f4       	brcc	.+2      	; 0x317c <CURRENT_METER_getReading+0x11a>
    317a:	90 cf       	rjmp	.-224    	; 0x309c <CURRENT_METER_getReading+0x3a>
        } else {
            sum += current; // Sum the current values for DC
        }
    }

    if (currentType == CURRENT_AC) {
    317c:	89 89       	ldd	r24, Y+17	; 0x11
    317e:	81 30       	cpi	r24, 0x01	; 1
    3180:	01 f5       	brne	.+64     	; 0x31c2 <CURRENT_METER_getReading+0x160>
        current = sqrt(sum / numSamples); // Calculate RMS current for AC
    3182:	8a 81       	ldd	r24, Y+2	; 0x02
    3184:	88 2f       	mov	r24, r24
    3186:	90 e0       	ldi	r25, 0x00	; 0
    3188:	aa 27       	eor	r26, r26
    318a:	97 fd       	sbrc	r25, 7
    318c:	a0 95       	com	r26
    318e:	ba 2f       	mov	r27, r26
    3190:	bc 01       	movw	r22, r24
    3192:	cd 01       	movw	r24, r26
    3194:	0e 94 2d 26 	call	0x4c5a	; 0x4c5a <__floatsisf>
    3198:	9b 01       	movw	r18, r22
    319a:	ac 01       	movw	r20, r24
    319c:	6b 81       	ldd	r22, Y+3	; 0x03
    319e:	7c 81       	ldd	r23, Y+4	; 0x04
    31a0:	8d 81       	ldd	r24, Y+5	; 0x05
    31a2:	9e 81       	ldd	r25, Y+6	; 0x06
    31a4:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__divsf3>
    31a8:	dc 01       	movw	r26, r24
    31aa:	cb 01       	movw	r24, r22
    31ac:	bc 01       	movw	r22, r24
    31ae:	cd 01       	movw	r24, r26
    31b0:	0e 94 48 27 	call	0x4e90	; 0x4e90 <sqrt>
    31b4:	dc 01       	movw	r26, r24
    31b6:	cb 01       	movw	r24, r22
    31b8:	8f 83       	std	Y+7, r24	; 0x07
    31ba:	98 87       	std	Y+8, r25	; 0x08
    31bc:	a9 87       	std	Y+9, r26	; 0x09
    31be:	ba 87       	std	Y+10, r27	; 0x0a
    31c0:	19 c0       	rjmp	.+50     	; 0x31f4 <CURRENT_METER_getReading+0x192>
    } else {
        current = sum / numSamples; // Calculate average current for DC
    31c2:	8a 81       	ldd	r24, Y+2	; 0x02
    31c4:	88 2f       	mov	r24, r24
    31c6:	90 e0       	ldi	r25, 0x00	; 0
    31c8:	aa 27       	eor	r26, r26
    31ca:	97 fd       	sbrc	r25, 7
    31cc:	a0 95       	com	r26
    31ce:	ba 2f       	mov	r27, r26
    31d0:	bc 01       	movw	r22, r24
    31d2:	cd 01       	movw	r24, r26
    31d4:	0e 94 2d 26 	call	0x4c5a	; 0x4c5a <__floatsisf>
    31d8:	9b 01       	movw	r18, r22
    31da:	ac 01       	movw	r20, r24
    31dc:	6b 81       	ldd	r22, Y+3	; 0x03
    31de:	7c 81       	ldd	r23, Y+4	; 0x04
    31e0:	8d 81       	ldd	r24, Y+5	; 0x05
    31e2:	9e 81       	ldd	r25, Y+6	; 0x06
    31e4:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__divsf3>
    31e8:	dc 01       	movw	r26, r24
    31ea:	cb 01       	movw	r24, r22
    31ec:	8f 83       	std	Y+7, r24	; 0x07
    31ee:	98 87       	std	Y+8, r25	; 0x08
    31f0:	a9 87       	std	Y+9, r26	; 0x09
    31f2:	ba 87       	std	Y+10, r27	; 0x0a
    }

    return current;
    31f4:	8f 81       	ldd	r24, Y+7	; 0x07
    31f6:	98 85       	ldd	r25, Y+8	; 0x08
    31f8:	a9 85       	ldd	r26, Y+9	; 0x09
    31fa:	ba 85       	ldd	r27, Y+10	; 0x0a
}
    31fc:	bc 01       	movw	r22, r24
    31fe:	cd 01       	movw	r24, r26
    3200:	63 96       	adiw	r28, 0x13	; 19
    3202:	0f b6       	in	r0, 0x3f	; 63
    3204:	f8 94       	cli
    3206:	de bf       	out	0x3e, r29	; 62
    3208:	0f be       	out	0x3f, r0	; 63
    320a:	cd bf       	out	0x3d, r28	; 61
    320c:	cf 91       	pop	r28
    320e:	df 91       	pop	r29
    3210:	08 95       	ret

00003212 <CAPACITANCE_METER_getReading>:
 * -> Function responsible for getting the capacitance reading.
 * -> This function measures the capacitance by charging the capacitor through a
 *    resistor and measuring the time taken to reach a certain voltage level.
 * -> It also handles different ranges of capacitance and scales the result accordingly.
 */
float CAPACITANCE_METER_getReading(CAPACITANCE_unitType * capUnit) {
    3212:	ef 92       	push	r14
    3214:	ff 92       	push	r15
    3216:	0f 93       	push	r16
    3218:	1f 93       	push	r17
    321a:	df 93       	push	r29
    321c:	cf 93       	push	r28
    321e:	cd b7       	in	r28, 0x3d	; 61
    3220:	de b7       	in	r29, 0x3e	; 62
    3222:	c1 54       	subi	r28, 0x41	; 65
    3224:	d0 40       	sbci	r29, 0x00	; 0
    3226:	0f b6       	in	r0, 0x3f	; 63
    3228:	f8 94       	cli
    322a:	de bf       	out	0x3e, r29	; 62
    322c:	0f be       	out	0x3f, r0	; 63
    322e:	cd bf       	out	0x3d, r28	; 61
    3230:	9c af       	std	Y+60, r25	; 0x3c
    3232:	8b af       	std	Y+59, r24	; 0x3b
	float capacitance;
	uint16 adcValue;
	uint32 time;
	static uint8 cap_scale = 0;  // Scale flag for different capacitance ranges
	Timer1_ConfigType Timer1_Config = {0, 0, CLK_256_PRESCALER, NORMAL_MODE};
    3234:	ae 01       	movw	r20, r28
    3236:	4b 5c       	subi	r20, 0xCB	; 203
    3238:	5f 4f       	sbci	r21, 0xFF	; 255
    323a:	5e af       	std	Y+62, r21	; 0x3e
    323c:	4d af       	std	Y+61, r20	; 0x3d
    323e:	84 e2       	ldi	r24, 0x24	; 36
    3240:	91 e0       	ldi	r25, 0x01	; 1
    3242:	21 96       	adiw	r28, 0x01	; 1
    3244:	9f af       	std	Y+63, r25	; 0x3f
    3246:	8e af       	std	Y+62, r24	; 0x3e
    3248:	21 97       	sbiw	r28, 0x01	; 1
    324a:	96 e0       	ldi	r25, 0x06	; 6
    324c:	22 96       	adiw	r28, 0x02	; 2
    324e:	9f af       	std	Y+63, r25	; 0x3f
    3250:	22 97       	sbiw	r28, 0x02	; 2
    3252:	21 96       	adiw	r28, 0x01	; 1
    3254:	ee ad       	ldd	r30, Y+62	; 0x3e
    3256:	ff ad       	ldd	r31, Y+63	; 0x3f
    3258:	21 97       	sbiw	r28, 0x01	; 1
    325a:	00 80       	ld	r0, Z
    325c:	21 96       	adiw	r28, 0x01	; 1
    325e:	4e ad       	ldd	r20, Y+62	; 0x3e
    3260:	5f ad       	ldd	r21, Y+63	; 0x3f
    3262:	21 97       	sbiw	r28, 0x01	; 1
    3264:	4f 5f       	subi	r20, 0xFF	; 255
    3266:	5f 4f       	sbci	r21, 0xFF	; 255
    3268:	21 96       	adiw	r28, 0x01	; 1
    326a:	5f af       	std	Y+63, r21	; 0x3f
    326c:	4e af       	std	Y+62, r20	; 0x3e
    326e:	21 97       	sbiw	r28, 0x01	; 1
    3270:	ed ad       	ldd	r30, Y+61	; 0x3d
    3272:	fe ad       	ldd	r31, Y+62	; 0x3e
    3274:	00 82       	st	Z, r0
    3276:	4d ad       	ldd	r20, Y+61	; 0x3d
    3278:	5e ad       	ldd	r21, Y+62	; 0x3e
    327a:	4f 5f       	subi	r20, 0xFF	; 255
    327c:	5f 4f       	sbci	r21, 0xFF	; 255
    327e:	5e af       	std	Y+62, r21	; 0x3e
    3280:	4d af       	std	Y+61, r20	; 0x3d
    3282:	22 96       	adiw	r28, 0x02	; 2
    3284:	5f ad       	ldd	r21, Y+63	; 0x3f
    3286:	22 97       	sbiw	r28, 0x02	; 2
    3288:	51 50       	subi	r21, 0x01	; 1
    328a:	22 96       	adiw	r28, 0x02	; 2
    328c:	5f af       	std	Y+63, r21	; 0x3f
    328e:	22 97       	sbiw	r28, 0x02	; 2
    3290:	22 96       	adiw	r28, 0x02	; 2
    3292:	8f ad       	ldd	r24, Y+63	; 0x3f
    3294:	22 97       	sbiw	r28, 0x02	; 2
    3296:	88 23       	and	r24, r24
    3298:	e1 f6       	brne	.-72     	; 0x3252 <CAPACITANCE_METER_getReading+0x40>

	if (!cap_scale) {
    329a:	80 91 7c 01 	lds	r24, 0x017C
    329e:	88 23       	and	r24, r24
    32a0:	09 f0       	breq	.+2      	; 0x32a4 <CAPACITANCE_METER_getReading+0x92>
    32a2:	14 c1       	rjmp	.+552    	; 0x34cc <CAPACITANCE_METER_getReading+0x2ba>
		// Setup pin directions for charging and discharging resistors and capacitor terminals
		GPIO_setupPinDirection(CAPACITANCE_METER_CHARGING_RES_1_PORT_ID, CAPACITANCE_METER_CHARGING_RES_1_PIN_ID, PIN_OUTPUT);
    32a4:	81 e0       	ldi	r24, 0x01	; 1
    32a6:	64 e0       	ldi	r22, 0x04	; 4
    32a8:	41 e0       	ldi	r20, 0x01	; 1
    32aa:	0e 94 38 04 	call	0x870	; 0x870 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(CAPACITANCE_METER_DISCHARGING_RES_PORT_ID, CAPACITANCE_METER_DISCHARGING_RES_PIN_ID, PIN_INPUT);
    32ae:	81 e0       	ldi	r24, 0x01	; 1
    32b0:	65 e0       	ldi	r22, 0x05	; 5
    32b2:	40 e0       	ldi	r20, 0x00	; 0
    32b4:	0e 94 38 04 	call	0x870	; 0x870 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(CAPACITANCE_METER_CHARGING_RES_2_PORT_ID, CAPACITANCE_METER_CHARGING_RES_2_PIN_ID, PIN_INPUT);
    32b8:	81 e0       	ldi	r24, 0x01	; 1
    32ba:	66 e0       	ldi	r22, 0x06	; 6
    32bc:	40 e0       	ldi	r20, 0x00	; 0
    32be:	0e 94 38 04 	call	0x870	; 0x870 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(CAPACITANCE_METER_POSITIVE_CAP_PORT_ID, CAPACITANCE_METER_POSITIVE_CAP_PIN_ID, PIN_INPUT);
    32c2:	80 e0       	ldi	r24, 0x00	; 0
    32c4:	61 e0       	ldi	r22, 0x01	; 1
    32c6:	40 e0       	ldi	r20, 0x00	; 0
    32c8:	0e 94 38 04 	call	0x870	; 0x870 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(CAPACITANCE_METER_NEGATIVE_CAP_PORT_ID, CAPACITANCE_METER_NEGATIVE_CAP_PIN_ID, PIN_OUTPUT);
    32cc:	80 e0       	ldi	r24, 0x00	; 0
    32ce:	62 e0       	ldi	r22, 0x02	; 2
    32d0:	41 e0       	ldi	r20, 0x01	; 1
    32d2:	0e 94 38 04 	call	0x870	; 0x870 <GPIO_setupPinDirection>

		// Initial discharge of the capacitor
		GPIO_writePin(CAPACITANCE_METER_NEGATIVE_CAP_PORT_ID, CAPACITANCE_METER_NEGATIVE_CAP_PIN_ID, LOGIC_LOW);
    32d6:	80 e0       	ldi	r24, 0x00	; 0
    32d8:	62 e0       	ldi	r22, 0x02	; 2
    32da:	40 e0       	ldi	r20, 0x00	; 0
    32dc:	0e 94 23 05 	call	0xa46	; 0xa46 <GPIO_writePin>
		GPIO_writePin(CAPACITANCE_METER_CHARGING_RES_1_PORT_ID, CAPACITANCE_METER_CHARGING_RES_1_PIN_ID, LOGIC_LOW);
    32e0:	81 e0       	ldi	r24, 0x01	; 1
    32e2:	64 e0       	ldi	r22, 0x04	; 4
    32e4:	40 e0       	ldi	r20, 0x00	; 0
    32e6:	0e 94 23 05 	call	0xa46	; 0xa46 <GPIO_writePin>
    32ea:	80 e0       	ldi	r24, 0x00	; 0
    32ec:	90 e0       	ldi	r25, 0x00	; 0
    32ee:	a8 e4       	ldi	r26, 0x48	; 72
    32f0:	b2 e4       	ldi	r27, 0x42	; 66
    32f2:	8f a3       	std	Y+39, r24	; 0x27
    32f4:	98 a7       	std	Y+40, r25	; 0x28
    32f6:	a9 a7       	std	Y+41, r26	; 0x29
    32f8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32fa:	6f a1       	ldd	r22, Y+39	; 0x27
    32fc:	78 a5       	ldd	r23, Y+40	; 0x28
    32fe:	89 a5       	ldd	r24, Y+41	; 0x29
    3300:	9a a5       	ldd	r25, Y+42	; 0x2a
    3302:	20 e0       	ldi	r18, 0x00	; 0
    3304:	30 e0       	ldi	r19, 0x00	; 0
    3306:	4a e7       	ldi	r20, 0x7A	; 122
    3308:	55 e4       	ldi	r21, 0x45	; 69
    330a:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__mulsf3>
    330e:	dc 01       	movw	r26, r24
    3310:	cb 01       	movw	r24, r22
    3312:	8b a3       	std	Y+35, r24	; 0x23
    3314:	9c a3       	std	Y+36, r25	; 0x24
    3316:	ad a3       	std	Y+37, r26	; 0x25
    3318:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    331a:	6b a1       	ldd	r22, Y+35	; 0x23
    331c:	7c a1       	ldd	r23, Y+36	; 0x24
    331e:	8d a1       	ldd	r24, Y+37	; 0x25
    3320:	9e a1       	ldd	r25, Y+38	; 0x26
    3322:	20 e0       	ldi	r18, 0x00	; 0
    3324:	30 e0       	ldi	r19, 0x00	; 0
    3326:	40 e8       	ldi	r20, 0x80	; 128
    3328:	5f e3       	ldi	r21, 0x3F	; 63
    332a:	0e 94 93 25 	call	0x4b26	; 0x4b26 <__cmpsf2>
    332e:	88 23       	and	r24, r24
    3330:	2c f4       	brge	.+10     	; 0x333c <CAPACITANCE_METER_getReading+0x12a>
		__ticks = 1;
    3332:	81 e0       	ldi	r24, 0x01	; 1
    3334:	90 e0       	ldi	r25, 0x00	; 0
    3336:	9a a3       	std	Y+34, r25	; 0x22
    3338:	89 a3       	std	Y+33, r24	; 0x21
    333a:	3f c0       	rjmp	.+126    	; 0x33ba <CAPACITANCE_METER_getReading+0x1a8>
	else if (__tmp > 65535)
    333c:	6b a1       	ldd	r22, Y+35	; 0x23
    333e:	7c a1       	ldd	r23, Y+36	; 0x24
    3340:	8d a1       	ldd	r24, Y+37	; 0x25
    3342:	9e a1       	ldd	r25, Y+38	; 0x26
    3344:	20 e0       	ldi	r18, 0x00	; 0
    3346:	3f ef       	ldi	r19, 0xFF	; 255
    3348:	4f e7       	ldi	r20, 0x7F	; 127
    334a:	57 e4       	ldi	r21, 0x47	; 71
    334c:	0e 94 dd 26 	call	0x4dba	; 0x4dba <__gesf2>
    3350:	18 16       	cp	r1, r24
    3352:	4c f5       	brge	.+82     	; 0x33a6 <CAPACITANCE_METER_getReading+0x194>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3354:	6f a1       	ldd	r22, Y+39	; 0x27
    3356:	78 a5       	ldd	r23, Y+40	; 0x28
    3358:	89 a5       	ldd	r24, Y+41	; 0x29
    335a:	9a a5       	ldd	r25, Y+42	; 0x2a
    335c:	20 e0       	ldi	r18, 0x00	; 0
    335e:	30 e0       	ldi	r19, 0x00	; 0
    3360:	40 e2       	ldi	r20, 0x20	; 32
    3362:	51 e4       	ldi	r21, 0x41	; 65
    3364:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__mulsf3>
    3368:	dc 01       	movw	r26, r24
    336a:	cb 01       	movw	r24, r22
    336c:	bc 01       	movw	r22, r24
    336e:	cd 01       	movw	r24, r26
    3370:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <__fixunssfsi>
    3374:	dc 01       	movw	r26, r24
    3376:	cb 01       	movw	r24, r22
    3378:	9a a3       	std	Y+34, r25	; 0x22
    337a:	89 a3       	std	Y+33, r24	; 0x21
    337c:	0f c0       	rjmp	.+30     	; 0x339c <CAPACITANCE_METER_getReading+0x18a>
    337e:	80 e9       	ldi	r24, 0x90	; 144
    3380:	91 e0       	ldi	r25, 0x01	; 1
    3382:	98 a3       	std	Y+32, r25	; 0x20
    3384:	8f 8f       	std	Y+31, r24	; 0x1f
    3386:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3388:	98 a1       	ldd	r25, Y+32	; 0x20
    338a:	01 97       	sbiw	r24, 0x01	; 1
    338c:	f1 f7       	brne	.-4      	; 0x338a <CAPACITANCE_METER_getReading+0x178>
    338e:	98 a3       	std	Y+32, r25	; 0x20
    3390:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3392:	89 a1       	ldd	r24, Y+33	; 0x21
    3394:	9a a1       	ldd	r25, Y+34	; 0x22
    3396:	01 97       	sbiw	r24, 0x01	; 1
    3398:	9a a3       	std	Y+34, r25	; 0x22
    339a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    339c:	89 a1       	ldd	r24, Y+33	; 0x21
    339e:	9a a1       	ldd	r25, Y+34	; 0x22
    33a0:	00 97       	sbiw	r24, 0x00	; 0
    33a2:	69 f7       	brne	.-38     	; 0x337e <CAPACITANCE_METER_getReading+0x16c>
    33a4:	14 c0       	rjmp	.+40     	; 0x33ce <CAPACITANCE_METER_getReading+0x1bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33a6:	6b a1       	ldd	r22, Y+35	; 0x23
    33a8:	7c a1       	ldd	r23, Y+36	; 0x24
    33aa:	8d a1       	ldd	r24, Y+37	; 0x25
    33ac:	9e a1       	ldd	r25, Y+38	; 0x26
    33ae:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <__fixunssfsi>
    33b2:	dc 01       	movw	r26, r24
    33b4:	cb 01       	movw	r24, r22
    33b6:	9a a3       	std	Y+34, r25	; 0x22
    33b8:	89 a3       	std	Y+33, r24	; 0x21
    33ba:	89 a1       	ldd	r24, Y+33	; 0x21
    33bc:	9a a1       	ldd	r25, Y+34	; 0x22
    33be:	9e 8f       	std	Y+30, r25	; 0x1e
    33c0:	8d 8f       	std	Y+29, r24	; 0x1d
    33c2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    33c4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    33c6:	01 97       	sbiw	r24, 0x01	; 1
    33c8:	f1 f7       	brne	.-4      	; 0x33c6 <CAPACITANCE_METER_getReading+0x1b4>
    33ca:	9e 8f       	std	Y+30, r25	; 0x1e
    33cc:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(50);

		// Start charging the capacitor
		GPIO_writePin(CAPACITANCE_METER_CHARGING_RES_1_PORT_ID, CAPACITANCE_METER_CHARGING_RES_1_PIN_ID, LOGIC_HIGH);
    33ce:	81 e0       	ldi	r24, 0x01	; 1
    33d0:	64 e0       	ldi	r22, 0x04	; 4
    33d2:	41 e0       	ldi	r20, 0x01	; 1
    33d4:	0e 94 23 05 	call	0xa46	; 0xa46 <GPIO_writePin>
		Timer1_Config.prescaler = NO_PRESCALER;
    33d8:	81 e0       	ldi	r24, 0x01	; 1
    33da:	89 af       	std	Y+57, r24	; 0x39
		Timer1_init(&Timer1_Config);
    33dc:	ce 01       	movw	r24, r28
    33de:	c5 96       	adiw	r24, 0x35	; 53
    33e0:	0e 94 d7 02 	call	0x5ae	; 0x5ae <Timer1_init>

		// Wait until the capacitor voltage reaches a certain level
		while (ADC_readChannel(CAPACITANCE_METER_POSITIVE_CAP_PIN_ID) < 648);
    33e4:	81 e0       	ldi	r24, 0x01	; 1
    33e6:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <ADC_readChannel>
    33ea:	e2 e0       	ldi	r30, 0x02	; 2
    33ec:	88 38       	cpi	r24, 0x88	; 136
    33ee:	9e 07       	cpc	r25, r30
    33f0:	c8 f3       	brcs	.-14     	; 0x33e4 <CAPACITANCE_METER_getReading+0x1d2>

		// Calculate the capacitance based on the charging time
		capacitance = (float)Timer1_getCount() / 160000;
    33f2:	0e 94 51 03 	call	0x6a2	; 0x6a2 <Timer1_getCount>
    33f6:	dc 01       	movw	r26, r24
    33f8:	cb 01       	movw	r24, r22
    33fa:	bc 01       	movw	r22, r24
    33fc:	cd 01       	movw	r24, r26
    33fe:	0e 94 2b 26 	call	0x4c56	; 0x4c56 <__floatunsisf>
    3402:	dc 01       	movw	r26, r24
    3404:	cb 01       	movw	r24, r22
    3406:	bc 01       	movw	r22, r24
    3408:	cd 01       	movw	r24, r26
    340a:	20 e0       	ldi	r18, 0x00	; 0
    340c:	30 e4       	ldi	r19, 0x40	; 64
    340e:	4c e1       	ldi	r20, 0x1C	; 28
    3410:	58 e4       	ldi	r21, 0x48	; 72
    3412:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__divsf3>
    3416:	dc 01       	movw	r26, r24
    3418:	cb 01       	movw	r24, r22
    341a:	89 ab       	std	Y+49, r24	; 0x31
    341c:	9a ab       	std	Y+50, r25	; 0x32
    341e:	ab ab       	std	Y+51, r26	; 0x33
    3420:	bc ab       	std	Y+52, r27	; 0x34
		Timer1_deInit();
    3422:	0e 94 29 03 	call	0x652	; 0x652 <Timer1_deInit>

		// Scale the capacitance value and set the appropriate unit
		if (capacitance > 1.0F) {
    3426:	69 a9       	ldd	r22, Y+49	; 0x31
    3428:	7a a9       	ldd	r23, Y+50	; 0x32
    342a:	8b a9       	ldd	r24, Y+51	; 0x33
    342c:	9c a9       	ldd	r25, Y+52	; 0x34
    342e:	20 e0       	ldi	r18, 0x00	; 0
    3430:	30 e0       	ldi	r19, 0x00	; 0
    3432:	40 e8       	ldi	r20, 0x80	; 128
    3434:	5f e3       	ldi	r21, 0x3F	; 63
    3436:	0e 94 dd 26 	call	0x4dba	; 0x4dba <__gesf2>
    343a:	18 16       	cp	r1, r24
    343c:	2c f4       	brge	.+10     	; 0x3448 <CAPACITANCE_METER_getReading+0x236>
			*capUnit = MICRO_FARAD;
    343e:	eb ad       	ldd	r30, Y+59	; 0x3b
    3440:	fc ad       	ldd	r31, Y+60	; 0x3c
    3442:	82 e0       	ldi	r24, 0x02	; 2
    3444:	80 83       	st	Z, r24
    3446:	28 c0       	rjmp	.+80     	; 0x3498 <CAPACITANCE_METER_getReading+0x286>
		} else if (capacitance > 0.1F) {
    3448:	69 a9       	ldd	r22, Y+49	; 0x31
    344a:	7a a9       	ldd	r23, Y+50	; 0x32
    344c:	8b a9       	ldd	r24, Y+51	; 0x33
    344e:	9c a9       	ldd	r25, Y+52	; 0x34
    3450:	2d ec       	ldi	r18, 0xCD	; 205
    3452:	3c ec       	ldi	r19, 0xCC	; 204
    3454:	4c ec       	ldi	r20, 0xCC	; 204
    3456:	5d e3       	ldi	r21, 0x3D	; 61
    3458:	0e 94 dd 26 	call	0x4dba	; 0x4dba <__gesf2>
    345c:	18 16       	cp	r1, r24
    345e:	ac f4       	brge	.+42     	; 0x348a <CAPACITANCE_METER_getReading+0x278>
			*capUnit = NANO_FARAD;
    3460:	eb ad       	ldd	r30, Y+59	; 0x3b
    3462:	fc ad       	ldd	r31, Y+60	; 0x3c
    3464:	81 e0       	ldi	r24, 0x01	; 1
    3466:	80 83       	st	Z, r24
			capacitance *= 1000;
    3468:	69 a9       	ldd	r22, Y+49	; 0x31
    346a:	7a a9       	ldd	r23, Y+50	; 0x32
    346c:	8b a9       	ldd	r24, Y+51	; 0x33
    346e:	9c a9       	ldd	r25, Y+52	; 0x34
    3470:	20 e0       	ldi	r18, 0x00	; 0
    3472:	30 e0       	ldi	r19, 0x00	; 0
    3474:	4a e7       	ldi	r20, 0x7A	; 122
    3476:	54 e4       	ldi	r21, 0x44	; 68
    3478:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__mulsf3>
    347c:	dc 01       	movw	r26, r24
    347e:	cb 01       	movw	r24, r22
    3480:	89 ab       	std	Y+49, r24	; 0x31
    3482:	9a ab       	std	Y+50, r25	; 0x32
    3484:	ab ab       	std	Y+51, r26	; 0x33
    3486:	bc ab       	std	Y+52, r27	; 0x34
    3488:	07 c0       	rjmp	.+14     	; 0x3498 <CAPACITANCE_METER_getReading+0x286>
		} else {
			cap_scale = 1;  // Switch to a different scale for smaller capacitances
    348a:	81 e0       	ldi	r24, 0x01	; 1
    348c:	80 93 7c 01 	sts	0x017C, r24
			*capUnit = NO_SCALE;
    3490:	eb ad       	ldd	r30, Y+59	; 0x3b
    3492:	fc ad       	ldd	r31, Y+60	; 0x3c
    3494:	85 e0       	ldi	r24, 0x05	; 5
    3496:	80 83       	st	Z, r24
		}

		// Discharge the capacitor
		GPIO_writePin(CAPACITANCE_METER_CHARGING_RES_1_PORT_ID, CAPACITANCE_METER_CHARGING_RES_1_PIN_ID, LOGIC_LOW);
    3498:	81 e0       	ldi	r24, 0x01	; 1
    349a:	64 e0       	ldi	r22, 0x04	; 4
    349c:	40 e0       	ldi	r20, 0x00	; 0
    349e:	0e 94 23 05 	call	0xa46	; 0xa46 <GPIO_writePin>
		GPIO_setupPinDirection(CAPACITANCE_METER_DISCHARGING_RES_PORT_ID, CAPACITANCE_METER_DISCHARGING_RES_PIN_ID, PIN_OUTPUT);
    34a2:	81 e0       	ldi	r24, 0x01	; 1
    34a4:	65 e0       	ldi	r22, 0x05	; 5
    34a6:	41 e0       	ldi	r20, 0x01	; 1
    34a8:	0e 94 38 04 	call	0x870	; 0x870 <GPIO_setupPinDirection>
		GPIO_writePin(CAPACITANCE_METER_DISCHARGING_RES_PORT_ID, CAPACITANCE_METER_DISCHARGING_RES_PIN_ID, LOGIC_LOW);
    34ac:	81 e0       	ldi	r24, 0x01	; 1
    34ae:	65 e0       	ldi	r22, 0x05	; 5
    34b0:	40 e0       	ldi	r20, 0x00	; 0
    34b2:	0e 94 23 05 	call	0xa46	; 0xa46 <GPIO_writePin>
		while (ADC_readChannel(CAPACITANCE_METER_POSITIVE_CAP_PIN_ID) > 0);
    34b6:	81 e0       	ldi	r24, 0x01	; 1
    34b8:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <ADC_readChannel>
    34bc:	00 97       	sbiw	r24, 0x00	; 0
    34be:	d9 f7       	brne	.-10     	; 0x34b6 <CAPACITANCE_METER_getReading+0x2a4>
		GPIO_setupPinDirection(CAPACITANCE_METER_DISCHARGING_RES_PORT_ID, CAPACITANCE_METER_DISCHARGING_RES_PIN_ID, PIN_INPUT);
    34c0:	81 e0       	ldi	r24, 0x01	; 1
    34c2:	65 e0       	ldi	r22, 0x05	; 5
    34c4:	40 e0       	ldi	r20, 0x00	; 0
    34c6:	0e 94 38 04 	call	0x870	; 0x870 <GPIO_setupPinDirection>
    34ca:	dd c1       	rjmp	.+954    	; 0x3886 <CAPACITANCE_METER_getReading+0x674>
	} else {
		// Setup pin directions for charging and discharging resistors and capacitor terminals
		GPIO_setupPinDirection(CAPACITANCE_METER_CHARGING_RES_1_PORT_ID, CAPACITANCE_METER_CHARGING_RES_1_PIN_ID, PIN_INPUT);
    34cc:	81 e0       	ldi	r24, 0x01	; 1
    34ce:	64 e0       	ldi	r22, 0x04	; 4
    34d0:	40 e0       	ldi	r20, 0x00	; 0
    34d2:	0e 94 38 04 	call	0x870	; 0x870 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(CAPACITANCE_METER_DISCHARGING_RES_PORT_ID, CAPACITANCE_METER_DISCHARGING_RES_PIN_ID, PIN_INPUT);
    34d6:	81 e0       	ldi	r24, 0x01	; 1
    34d8:	65 e0       	ldi	r22, 0x05	; 5
    34da:	40 e0       	ldi	r20, 0x00	; 0
    34dc:	0e 94 38 04 	call	0x870	; 0x870 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(CAPACITANCE_METER_CHARGING_RES_2_PORT_ID, CAPACITANCE_METER_CHARGING_RES_2_PIN_ID, PIN_INPUT);
    34e0:	81 e0       	ldi	r24, 0x01	; 1
    34e2:	66 e0       	ldi	r22, 0x06	; 6
    34e4:	40 e0       	ldi	r20, 0x00	; 0
    34e6:	0e 94 38 04 	call	0x870	; 0x870 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(CAPACITANCE_METER_POSITIVE_CAP_PORT_ID, CAPACITANCE_METER_POSITIVE_CAP_PIN_ID, PIN_INPUT);
    34ea:	80 e0       	ldi	r24, 0x00	; 0
    34ec:	61 e0       	ldi	r22, 0x01	; 1
    34ee:	40 e0       	ldi	r20, 0x00	; 0
    34f0:	0e 94 38 04 	call	0x870	; 0x870 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(CAPACITANCE_METER_NEGATIVE_CAP_PORT_ID, CAPACITANCE_METER_NEGATIVE_CAP_PIN_ID, PIN_OUTPUT);
    34f4:	80 e0       	ldi	r24, 0x00	; 0
    34f6:	62 e0       	ldi	r22, 0x02	; 2
    34f8:	41 e0       	ldi	r20, 0x01	; 1
    34fa:	0e 94 38 04 	call	0x870	; 0x870 <GPIO_setupPinDirection>

		// Measure the ADC value to determine capacitance
		GPIO_writePin(CAPACITANCE_METER_NEGATIVE_CAP_PORT_ID, CAPACITANCE_METER_NEGATIVE_CAP_PIN_ID, LOGIC_HIGH);
    34fe:	80 e0       	ldi	r24, 0x00	; 0
    3500:	62 e0       	ldi	r22, 0x02	; 2
    3502:	41 e0       	ldi	r20, 0x01	; 1
    3504:	0e 94 23 05 	call	0xa46	; 0xa46 <GPIO_writePin>
		adcValue = ADC_readChannel(CAPACITANCE_METER_POSITIVE_CAP_PIN_ID);
    3508:	81 e0       	ldi	r24, 0x01	; 1
    350a:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <ADC_readChannel>
    350e:	98 ab       	std	Y+48, r25	; 0x30
    3510:	8f a7       	std	Y+47, r24	; 0x2f
		GPIO_writePin(CAPACITANCE_METER_POSITIVE_CAP_PORT_ID, CAPACITANCE_METER_POSITIVE_CAP_PIN_ID, LOGIC_LOW);
    3512:	80 e0       	ldi	r24, 0x00	; 0
    3514:	61 e0       	ldi	r22, 0x01	; 1
    3516:	40 e0       	ldi	r20, 0x00	; 0
    3518:	0e 94 23 05 	call	0xa46	; 0xa46 <GPIO_writePin>

		if (adcValue < 1018) {
    351c:	8f a5       	ldd	r24, Y+47	; 0x2f
    351e:	98 a9       	ldd	r25, Y+48	; 0x30
    3520:	f3 e0       	ldi	r31, 0x03	; 3
    3522:	8a 3f       	cpi	r24, 0xFA	; 250
    3524:	9f 07       	cpc	r25, r31
    3526:	08 f0       	brcs	.+2      	; 0x352a <CAPACITANCE_METER_getReading+0x318>
    3528:	bc c0       	rjmp	.+376    	; 0x36a2 <CAPACITANCE_METER_getReading+0x490>
			// Calculate the capacitance based on the ADC value
			GPIO_setupPinDirection(CAPACITANCE_METER_POSITIVE_CAP_PORT_ID, CAPACITANCE_METER_POSITIVE_CAP_PIN_ID, PIN_OUTPUT);
    352a:	80 e0       	ldi	r24, 0x00	; 0
    352c:	61 e0       	ldi	r22, 0x01	; 1
    352e:	41 e0       	ldi	r20, 0x01	; 1
    3530:	0e 94 38 04 	call	0x870	; 0x870 <GPIO_setupPinDirection>
			GPIO_writePin(CAPACITANCE_METER_POSITIVE_CAP_PORT_ID, CAPACITANCE_METER_POSITIVE_CAP_PIN_ID, LOGIC_HIGH);
    3534:	80 e0       	ldi	r24, 0x00	; 0
    3536:	61 e0       	ldi	r22, 0x01	; 1
    3538:	41 e0       	ldi	r20, 0x01	; 1
    353a:	0e 94 23 05 	call	0xa46	; 0xa46 <GPIO_writePin>
			capacitance = (float)adcValue * 6 / (float)(CAPACITANCE_METER_ADC_MAX_VALUE - adcValue);
    353e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3540:	98 a9       	ldd	r25, Y+48	; 0x30
    3542:	cc 01       	movw	r24, r24
    3544:	a0 e0       	ldi	r26, 0x00	; 0
    3546:	b0 e0       	ldi	r27, 0x00	; 0
    3548:	bc 01       	movw	r22, r24
    354a:	cd 01       	movw	r24, r26
    354c:	0e 94 2b 26 	call	0x4c56	; 0x4c56 <__floatunsisf>
    3550:	dc 01       	movw	r26, r24
    3552:	cb 01       	movw	r24, r22
    3554:	bc 01       	movw	r22, r24
    3556:	cd 01       	movw	r24, r26
    3558:	20 e0       	ldi	r18, 0x00	; 0
    355a:	30 e0       	ldi	r19, 0x00	; 0
    355c:	40 ec       	ldi	r20, 0xC0	; 192
    355e:	50 e4       	ldi	r21, 0x40	; 64
    3560:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__mulsf3>
    3564:	dc 01       	movw	r26, r24
    3566:	cb 01       	movw	r24, r22
    3568:	7c 01       	movw	r14, r24
    356a:	8d 01       	movw	r16, r26
    356c:	2f ef       	ldi	r18, 0xFF	; 255
    356e:	33 e0       	ldi	r19, 0x03	; 3
    3570:	8f a5       	ldd	r24, Y+47	; 0x2f
    3572:	98 a9       	ldd	r25, Y+48	; 0x30
    3574:	a9 01       	movw	r20, r18
    3576:	48 1b       	sub	r20, r24
    3578:	59 0b       	sbc	r21, r25
    357a:	ca 01       	movw	r24, r20
    357c:	cc 01       	movw	r24, r24
    357e:	a0 e0       	ldi	r26, 0x00	; 0
    3580:	b0 e0       	ldi	r27, 0x00	; 0
    3582:	bc 01       	movw	r22, r24
    3584:	cd 01       	movw	r24, r26
    3586:	0e 94 2b 26 	call	0x4c56	; 0x4c56 <__floatunsisf>
    358a:	9b 01       	movw	r18, r22
    358c:	ac 01       	movw	r20, r24
    358e:	c8 01       	movw	r24, r16
    3590:	b7 01       	movw	r22, r14
    3592:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__divsf3>
    3596:	dc 01       	movw	r26, r24
    3598:	cb 01       	movw	r24, r22
    359a:	89 ab       	std	Y+49, r24	; 0x31
    359c:	9a ab       	std	Y+50, r25	; 0x32
    359e:	ab ab       	std	Y+51, r26	; 0x33
    35a0:	bc ab       	std	Y+52, r27	; 0x34
			GPIO_writePin(CAPACITANCE_METER_POSITIVE_CAP_PORT_ID, CAPACITANCE_METER_POSITIVE_CAP_PIN_ID, LOGIC_LOW);
    35a2:	80 e0       	ldi	r24, 0x00	; 0
    35a4:	61 e0       	ldi	r22, 0x01	; 1
    35a6:	40 e0       	ldi	r20, 0x00	; 0
    35a8:	0e 94 23 05 	call	0xa46	; 0xa46 <GPIO_writePin>
			GPIO_writePin(CAPACITANCE_METER_NEGATIVE_CAP_PORT_ID, CAPACITANCE_METER_NEGATIVE_CAP_PIN_ID, LOGIC_LOW);
    35ac:	80 e0       	ldi	r24, 0x00	; 0
    35ae:	62 e0       	ldi	r22, 0x02	; 2
    35b0:	40 e0       	ldi	r20, 0x00	; 0
    35b2:	0e 94 23 05 	call	0xa46	; 0xa46 <GPIO_writePin>
    35b6:	80 e0       	ldi	r24, 0x00	; 0
    35b8:	90 e0       	ldi	r25, 0x00	; 0
    35ba:	a8 e4       	ldi	r26, 0x48	; 72
    35bc:	b2 e4       	ldi	r27, 0x42	; 66
    35be:	89 8f       	std	Y+25, r24	; 0x19
    35c0:	9a 8f       	std	Y+26, r25	; 0x1a
    35c2:	ab 8f       	std	Y+27, r26	; 0x1b
    35c4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35c6:	69 8d       	ldd	r22, Y+25	; 0x19
    35c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    35ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    35cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    35ce:	20 e0       	ldi	r18, 0x00	; 0
    35d0:	30 e0       	ldi	r19, 0x00	; 0
    35d2:	4a e7       	ldi	r20, 0x7A	; 122
    35d4:	55 e4       	ldi	r21, 0x45	; 69
    35d6:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__mulsf3>
    35da:	dc 01       	movw	r26, r24
    35dc:	cb 01       	movw	r24, r22
    35de:	8d 8b       	std	Y+21, r24	; 0x15
    35e0:	9e 8b       	std	Y+22, r25	; 0x16
    35e2:	af 8b       	std	Y+23, r26	; 0x17
    35e4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    35e6:	6d 89       	ldd	r22, Y+21	; 0x15
    35e8:	7e 89       	ldd	r23, Y+22	; 0x16
    35ea:	8f 89       	ldd	r24, Y+23	; 0x17
    35ec:	98 8d       	ldd	r25, Y+24	; 0x18
    35ee:	20 e0       	ldi	r18, 0x00	; 0
    35f0:	30 e0       	ldi	r19, 0x00	; 0
    35f2:	40 e8       	ldi	r20, 0x80	; 128
    35f4:	5f e3       	ldi	r21, 0x3F	; 63
    35f6:	0e 94 93 25 	call	0x4b26	; 0x4b26 <__cmpsf2>
    35fa:	88 23       	and	r24, r24
    35fc:	2c f4       	brge	.+10     	; 0x3608 <CAPACITANCE_METER_getReading+0x3f6>
		__ticks = 1;
    35fe:	81 e0       	ldi	r24, 0x01	; 1
    3600:	90 e0       	ldi	r25, 0x00	; 0
    3602:	9c 8b       	std	Y+20, r25	; 0x14
    3604:	8b 8b       	std	Y+19, r24	; 0x13
    3606:	3f c0       	rjmp	.+126    	; 0x3686 <CAPACITANCE_METER_getReading+0x474>
	else if (__tmp > 65535)
    3608:	6d 89       	ldd	r22, Y+21	; 0x15
    360a:	7e 89       	ldd	r23, Y+22	; 0x16
    360c:	8f 89       	ldd	r24, Y+23	; 0x17
    360e:	98 8d       	ldd	r25, Y+24	; 0x18
    3610:	20 e0       	ldi	r18, 0x00	; 0
    3612:	3f ef       	ldi	r19, 0xFF	; 255
    3614:	4f e7       	ldi	r20, 0x7F	; 127
    3616:	57 e4       	ldi	r21, 0x47	; 71
    3618:	0e 94 dd 26 	call	0x4dba	; 0x4dba <__gesf2>
    361c:	18 16       	cp	r1, r24
    361e:	4c f5       	brge	.+82     	; 0x3672 <CAPACITANCE_METER_getReading+0x460>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3620:	69 8d       	ldd	r22, Y+25	; 0x19
    3622:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3624:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3626:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3628:	20 e0       	ldi	r18, 0x00	; 0
    362a:	30 e0       	ldi	r19, 0x00	; 0
    362c:	40 e2       	ldi	r20, 0x20	; 32
    362e:	51 e4       	ldi	r21, 0x41	; 65
    3630:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__mulsf3>
    3634:	dc 01       	movw	r26, r24
    3636:	cb 01       	movw	r24, r22
    3638:	bc 01       	movw	r22, r24
    363a:	cd 01       	movw	r24, r26
    363c:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <__fixunssfsi>
    3640:	dc 01       	movw	r26, r24
    3642:	cb 01       	movw	r24, r22
    3644:	9c 8b       	std	Y+20, r25	; 0x14
    3646:	8b 8b       	std	Y+19, r24	; 0x13
    3648:	0f c0       	rjmp	.+30     	; 0x3668 <CAPACITANCE_METER_getReading+0x456>
    364a:	80 e9       	ldi	r24, 0x90	; 144
    364c:	91 e0       	ldi	r25, 0x01	; 1
    364e:	9a 8b       	std	Y+18, r25	; 0x12
    3650:	89 8b       	std	Y+17, r24	; 0x11
    3652:	89 89       	ldd	r24, Y+17	; 0x11
    3654:	9a 89       	ldd	r25, Y+18	; 0x12
    3656:	01 97       	sbiw	r24, 0x01	; 1
    3658:	f1 f7       	brne	.-4      	; 0x3656 <CAPACITANCE_METER_getReading+0x444>
    365a:	9a 8b       	std	Y+18, r25	; 0x12
    365c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    365e:	8b 89       	ldd	r24, Y+19	; 0x13
    3660:	9c 89       	ldd	r25, Y+20	; 0x14
    3662:	01 97       	sbiw	r24, 0x01	; 1
    3664:	9c 8b       	std	Y+20, r25	; 0x14
    3666:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3668:	8b 89       	ldd	r24, Y+19	; 0x13
    366a:	9c 89       	ldd	r25, Y+20	; 0x14
    366c:	00 97       	sbiw	r24, 0x00	; 0
    366e:	69 f7       	brne	.-38     	; 0x364a <CAPACITANCE_METER_getReading+0x438>
    3670:	14 c0       	rjmp	.+40     	; 0x369a <CAPACITANCE_METER_getReading+0x488>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3672:	6d 89       	ldd	r22, Y+21	; 0x15
    3674:	7e 89       	ldd	r23, Y+22	; 0x16
    3676:	8f 89       	ldd	r24, Y+23	; 0x17
    3678:	98 8d       	ldd	r25, Y+24	; 0x18
    367a:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <__fixunssfsi>
    367e:	dc 01       	movw	r26, r24
    3680:	cb 01       	movw	r24, r22
    3682:	9c 8b       	std	Y+20, r25	; 0x14
    3684:	8b 8b       	std	Y+19, r24	; 0x13
    3686:	8b 89       	ldd	r24, Y+19	; 0x13
    3688:	9c 89       	ldd	r25, Y+20	; 0x14
    368a:	98 8b       	std	Y+16, r25	; 0x10
    368c:	8f 87       	std	Y+15, r24	; 0x0f
    368e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3690:	98 89       	ldd	r25, Y+16	; 0x10
    3692:	01 97       	sbiw	r24, 0x01	; 1
    3694:	f1 f7       	brne	.-4      	; 0x3692 <CAPACITANCE_METER_getReading+0x480>
    3696:	98 8b       	std	Y+16, r25	; 0x10
    3698:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(50);
			*capUnit = PICO_FARAD;
    369a:	eb ad       	ldd	r30, Y+59	; 0x3b
    369c:	fc ad       	ldd	r31, Y+60	; 0x3c
    369e:	10 82       	st	Z, r1
    36a0:	f2 c0       	rjmp	.+484    	; 0x3886 <CAPACITANCE_METER_getReading+0x674>
		} else {
			// Switch to a different method for larger capacitances
			GPIO_setupPinDirection(CAPACITANCE_METER_CHARGING_RES_1_PORT_ID, CAPACITANCE_METER_CHARGING_RES_1_PIN_ID, PIN_INPUT);
    36a2:	81 e0       	ldi	r24, 0x01	; 1
    36a4:	64 e0       	ldi	r22, 0x04	; 4
    36a6:	40 e0       	ldi	r20, 0x00	; 0
    36a8:	0e 94 38 04 	call	0x870	; 0x870 <GPIO_setupPinDirection>
			GPIO_setupPinDirection(CAPACITANCE_METER_DISCHARGING_RES_PORT_ID, CAPACITANCE_METER_DISCHARGING_RES_PIN_ID, PIN_INPUT);
    36ac:	81 e0       	ldi	r24, 0x01	; 1
    36ae:	65 e0       	ldi	r22, 0x05	; 5
    36b0:	40 e0       	ldi	r20, 0x00	; 0
    36b2:	0e 94 38 04 	call	0x870	; 0x870 <GPIO_setupPinDirection>
			GPIO_setupPinDirection(CAPACITANCE_METER_CHARGING_RES_2_PORT_ID, CAPACITANCE_METER_CHARGING_RES_2_PIN_ID, PIN_OUTPUT);
    36b6:	81 e0       	ldi	r24, 0x01	; 1
    36b8:	66 e0       	ldi	r22, 0x06	; 6
    36ba:	41 e0       	ldi	r20, 0x01	; 1
    36bc:	0e 94 38 04 	call	0x870	; 0x870 <GPIO_setupPinDirection>
			GPIO_setupPinDirection(CAPACITANCE_METER_POSITIVE_CAP_PORT_ID, CAPACITANCE_METER_POSITIVE_CAP_PIN_ID, PIN_INPUT);
    36c0:	80 e0       	ldi	r24, 0x00	; 0
    36c2:	61 e0       	ldi	r22, 0x01	; 1
    36c4:	40 e0       	ldi	r20, 0x00	; 0
    36c6:	0e 94 38 04 	call	0x870	; 0x870 <GPIO_setupPinDirection>
			GPIO_setupPinDirection(CAPACITANCE_METER_NEGATIVE_CAP_PORT_ID, CAPACITANCE_METER_NEGATIVE_CAP_PIN_ID, PIN_OUTPUT);
    36ca:	80 e0       	ldi	r24, 0x00	; 0
    36cc:	62 e0       	ldi	r22, 0x02	; 2
    36ce:	41 e0       	ldi	r20, 0x01	; 1
    36d0:	0e 94 38 04 	call	0x870	; 0x870 <GPIO_setupPinDirection>

			// Start charging the capacitor
			GPIO_writePin(CAPACITANCE_METER_NEGATIVE_CAP_PORT_ID, CAPACITANCE_METER_NEGATIVE_CAP_PIN_ID, LOGIC_LOW);
    36d4:	80 e0       	ldi	r24, 0x00	; 0
    36d6:	62 e0       	ldi	r22, 0x02	; 2
    36d8:	40 e0       	ldi	r20, 0x00	; 0
    36da:	0e 94 23 05 	call	0xa46	; 0xa46 <GPIO_writePin>
			GPIO_writePin(CAPACITANCE_METER_CHARGING_RES_2_PORT_ID, CAPACITANCE_METER_CHARGING_RES_2_PIN_ID, LOGIC_HIGH);
    36de:	81 e0       	ldi	r24, 0x01	; 1
    36e0:	66 e0       	ldi	r22, 0x06	; 6
    36e2:	41 e0       	ldi	r20, 0x01	; 1
    36e4:	0e 94 23 05 	call	0xa46	; 0xa46 <GPIO_writePin>
			Timer1_Config.prescaler = NO_PRESCALER;
    36e8:	81 e0       	ldi	r24, 0x01	; 1
    36ea:	89 af       	std	Y+57, r24	; 0x39
			Timer1_init(&Timer1_Config);
    36ec:	ce 01       	movw	r24, r28
    36ee:	c5 96       	adiw	r24, 0x35	; 53
    36f0:	0e 94 d7 02 	call	0x5ae	; 0x5ae <Timer1_init>

			// Wait until the capacitor voltage reaches a certain level
			while (ADC_readChannel(CAPACITANCE_METER_POSITIVE_CAP_PIN_ID) < 648);
    36f4:	81 e0       	ldi	r24, 0x01	; 1
    36f6:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <ADC_readChannel>
    36fa:	52 e0       	ldi	r21, 0x02	; 2
    36fc:	88 38       	cpi	r24, 0x88	; 136
    36fe:	95 07       	cpc	r25, r21
    3700:	c8 f3       	brcs	.-14     	; 0x36f4 <CAPACITANCE_METER_getReading+0x4e2>

			// Calculate the capacitance based on the charging time
			time = Timer1_getCount() / 16;
    3702:	0e 94 51 03 	call	0x6a2	; 0x6a2 <Timer1_getCount>
    3706:	dc 01       	movw	r26, r24
    3708:	cb 01       	movw	r24, r22
    370a:	68 94       	set
    370c:	13 f8       	bld	r1, 3
    370e:	b6 95       	lsr	r27
    3710:	a7 95       	ror	r26
    3712:	97 95       	ror	r25
    3714:	87 95       	ror	r24
    3716:	16 94       	lsr	r1
    3718:	d1 f7       	brne	.-12     	; 0x370e <CAPACITANCE_METER_getReading+0x4fc>
    371a:	8b a7       	std	Y+43, r24	; 0x2b
    371c:	9c a7       	std	Y+44, r25	; 0x2c
    371e:	ad a7       	std	Y+45, r26	; 0x2d
    3720:	be a7       	std	Y+46, r27	; 0x2e
			capacitance = (float)time / 1000;
    3722:	6b a5       	ldd	r22, Y+43	; 0x2b
    3724:	7c a5       	ldd	r23, Y+44	; 0x2c
    3726:	8d a5       	ldd	r24, Y+45	; 0x2d
    3728:	9e a5       	ldd	r25, Y+46	; 0x2e
    372a:	0e 94 2b 26 	call	0x4c56	; 0x4c56 <__floatunsisf>
    372e:	dc 01       	movw	r26, r24
    3730:	cb 01       	movw	r24, r22
    3732:	bc 01       	movw	r22, r24
    3734:	cd 01       	movw	r24, r26
    3736:	20 e0       	ldi	r18, 0x00	; 0
    3738:	30 e0       	ldi	r19, 0x00	; 0
    373a:	4a e7       	ldi	r20, 0x7A	; 122
    373c:	54 e4       	ldi	r21, 0x44	; 68
    373e:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__divsf3>
    3742:	dc 01       	movw	r26, r24
    3744:	cb 01       	movw	r24, r22
    3746:	89 ab       	std	Y+49, r24	; 0x31
    3748:	9a ab       	std	Y+50, r25	; 0x32
    374a:	ab ab       	std	Y+51, r26	; 0x33
    374c:	bc ab       	std	Y+52, r27	; 0x34
			Timer1_deInit();
    374e:	0e 94 29 03 	call	0x652	; 0x652 <Timer1_deInit>

			// Discharge the capacitor
			GPIO_writePin(CAPACITANCE_METER_CHARGING_RES_2_PORT_ID, CAPACITANCE_METER_CHARGING_RES_2_PIN_ID, LOGIC_LOW);
    3752:	81 e0       	ldi	r24, 0x01	; 1
    3754:	66 e0       	ldi	r22, 0x06	; 6
    3756:	40 e0       	ldi	r20, 0x00	; 0
    3758:	0e 94 23 05 	call	0xa46	; 0xa46 <GPIO_writePin>
			_delay_ms(time / 20000);
    375c:	8b a5       	ldd	r24, Y+43	; 0x2b
    375e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3760:	ad a5       	ldd	r26, Y+45	; 0x2d
    3762:	be a5       	ldd	r27, Y+46	; 0x2e
    3764:	20 e2       	ldi	r18, 0x20	; 32
    3766:	3e e4       	ldi	r19, 0x4E	; 78
    3768:	40 e0       	ldi	r20, 0x00	; 0
    376a:	50 e0       	ldi	r21, 0x00	; 0
    376c:	bc 01       	movw	r22, r24
    376e:	cd 01       	movw	r24, r26
    3770:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <__udivmodsi4>
    3774:	da 01       	movw	r26, r20
    3776:	c9 01       	movw	r24, r18
    3778:	bc 01       	movw	r22, r24
    377a:	cd 01       	movw	r24, r26
    377c:	0e 94 2b 26 	call	0x4c56	; 0x4c56 <__floatunsisf>
    3780:	dc 01       	movw	r26, r24
    3782:	cb 01       	movw	r24, r22
    3784:	8b 87       	std	Y+11, r24	; 0x0b
    3786:	9c 87       	std	Y+12, r25	; 0x0c
    3788:	ad 87       	std	Y+13, r26	; 0x0d
    378a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    378c:	6b 85       	ldd	r22, Y+11	; 0x0b
    378e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3790:	8d 85       	ldd	r24, Y+13	; 0x0d
    3792:	9e 85       	ldd	r25, Y+14	; 0x0e
    3794:	20 e0       	ldi	r18, 0x00	; 0
    3796:	30 e0       	ldi	r19, 0x00	; 0
    3798:	4a e7       	ldi	r20, 0x7A	; 122
    379a:	55 e4       	ldi	r21, 0x45	; 69
    379c:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__mulsf3>
    37a0:	dc 01       	movw	r26, r24
    37a2:	cb 01       	movw	r24, r22
    37a4:	8f 83       	std	Y+7, r24	; 0x07
    37a6:	98 87       	std	Y+8, r25	; 0x08
    37a8:	a9 87       	std	Y+9, r26	; 0x09
    37aa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    37ac:	6f 81       	ldd	r22, Y+7	; 0x07
    37ae:	78 85       	ldd	r23, Y+8	; 0x08
    37b0:	89 85       	ldd	r24, Y+9	; 0x09
    37b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    37b4:	20 e0       	ldi	r18, 0x00	; 0
    37b6:	30 e0       	ldi	r19, 0x00	; 0
    37b8:	40 e8       	ldi	r20, 0x80	; 128
    37ba:	5f e3       	ldi	r21, 0x3F	; 63
    37bc:	0e 94 93 25 	call	0x4b26	; 0x4b26 <__cmpsf2>
    37c0:	88 23       	and	r24, r24
    37c2:	2c f4       	brge	.+10     	; 0x37ce <CAPACITANCE_METER_getReading+0x5bc>
		__ticks = 1;
    37c4:	81 e0       	ldi	r24, 0x01	; 1
    37c6:	90 e0       	ldi	r25, 0x00	; 0
    37c8:	9e 83       	std	Y+6, r25	; 0x06
    37ca:	8d 83       	std	Y+5, r24	; 0x05
    37cc:	3f c0       	rjmp	.+126    	; 0x384c <CAPACITANCE_METER_getReading+0x63a>
	else if (__tmp > 65535)
    37ce:	6f 81       	ldd	r22, Y+7	; 0x07
    37d0:	78 85       	ldd	r23, Y+8	; 0x08
    37d2:	89 85       	ldd	r24, Y+9	; 0x09
    37d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    37d6:	20 e0       	ldi	r18, 0x00	; 0
    37d8:	3f ef       	ldi	r19, 0xFF	; 255
    37da:	4f e7       	ldi	r20, 0x7F	; 127
    37dc:	57 e4       	ldi	r21, 0x47	; 71
    37de:	0e 94 dd 26 	call	0x4dba	; 0x4dba <__gesf2>
    37e2:	18 16       	cp	r1, r24
    37e4:	4c f5       	brge	.+82     	; 0x3838 <CAPACITANCE_METER_getReading+0x626>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    37e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    37ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    37ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    37ee:	20 e0       	ldi	r18, 0x00	; 0
    37f0:	30 e0       	ldi	r19, 0x00	; 0
    37f2:	40 e2       	ldi	r20, 0x20	; 32
    37f4:	51 e4       	ldi	r21, 0x41	; 65
    37f6:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__mulsf3>
    37fa:	dc 01       	movw	r26, r24
    37fc:	cb 01       	movw	r24, r22
    37fe:	bc 01       	movw	r22, r24
    3800:	cd 01       	movw	r24, r26
    3802:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <__fixunssfsi>
    3806:	dc 01       	movw	r26, r24
    3808:	cb 01       	movw	r24, r22
    380a:	9e 83       	std	Y+6, r25	; 0x06
    380c:	8d 83       	std	Y+5, r24	; 0x05
    380e:	0f c0       	rjmp	.+30     	; 0x382e <CAPACITANCE_METER_getReading+0x61c>
    3810:	80 e9       	ldi	r24, 0x90	; 144
    3812:	91 e0       	ldi	r25, 0x01	; 1
    3814:	9c 83       	std	Y+4, r25	; 0x04
    3816:	8b 83       	std	Y+3, r24	; 0x03
    3818:	8b 81       	ldd	r24, Y+3	; 0x03
    381a:	9c 81       	ldd	r25, Y+4	; 0x04
    381c:	01 97       	sbiw	r24, 0x01	; 1
    381e:	f1 f7       	brne	.-4      	; 0x381c <CAPACITANCE_METER_getReading+0x60a>
    3820:	9c 83       	std	Y+4, r25	; 0x04
    3822:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3824:	8d 81       	ldd	r24, Y+5	; 0x05
    3826:	9e 81       	ldd	r25, Y+6	; 0x06
    3828:	01 97       	sbiw	r24, 0x01	; 1
    382a:	9e 83       	std	Y+6, r25	; 0x06
    382c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    382e:	8d 81       	ldd	r24, Y+5	; 0x05
    3830:	9e 81       	ldd	r25, Y+6	; 0x06
    3832:	00 97       	sbiw	r24, 0x00	; 0
    3834:	69 f7       	brne	.-38     	; 0x3810 <CAPACITANCE_METER_getReading+0x5fe>
    3836:	14 c0       	rjmp	.+40     	; 0x3860 <CAPACITANCE_METER_getReading+0x64e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3838:	6f 81       	ldd	r22, Y+7	; 0x07
    383a:	78 85       	ldd	r23, Y+8	; 0x08
    383c:	89 85       	ldd	r24, Y+9	; 0x09
    383e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3840:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <__fixunssfsi>
    3844:	dc 01       	movw	r26, r24
    3846:	cb 01       	movw	r24, r22
    3848:	9e 83       	std	Y+6, r25	; 0x06
    384a:	8d 83       	std	Y+5, r24	; 0x05
    384c:	8d 81       	ldd	r24, Y+5	; 0x05
    384e:	9e 81       	ldd	r25, Y+6	; 0x06
    3850:	9a 83       	std	Y+2, r25	; 0x02
    3852:	89 83       	std	Y+1, r24	; 0x01
    3854:	89 81       	ldd	r24, Y+1	; 0x01
    3856:	9a 81       	ldd	r25, Y+2	; 0x02
    3858:	01 97       	sbiw	r24, 0x01	; 1
    385a:	f1 f7       	brne	.-4      	; 0x3858 <CAPACITANCE_METER_getReading+0x646>
    385c:	9a 83       	std	Y+2, r25	; 0x02
    385e:	89 83       	std	Y+1, r24	; 0x01

			if (capacitance > 1000.0) {
    3860:	69 a9       	ldd	r22, Y+49	; 0x31
    3862:	7a a9       	ldd	r23, Y+50	; 0x32
    3864:	8b a9       	ldd	r24, Y+51	; 0x33
    3866:	9c a9       	ldd	r25, Y+52	; 0x34
    3868:	20 e0       	ldi	r18, 0x00	; 0
    386a:	30 e0       	ldi	r19, 0x00	; 0
    386c:	4a e7       	ldi	r20, 0x7A	; 122
    386e:	54 e4       	ldi	r21, 0x44	; 68
    3870:	0e 94 dd 26 	call	0x4dba	; 0x4dba <__gesf2>
    3874:	18 16       	cp	r1, r24
    3876:	1c f4       	brge	.+6      	; 0x387e <CAPACITANCE_METER_getReading+0x66c>
				cap_scale = 0;  // Change the scale to 1uF - max
    3878:	10 92 7c 01 	sts	0x017C, r1
    387c:	04 c0       	rjmp	.+8      	; 0x3886 <CAPACITANCE_METER_getReading+0x674>
			} else {
				*capUnit = NANO_FARAD;
    387e:	eb ad       	ldd	r30, Y+59	; 0x3b
    3880:	fc ad       	ldd	r31, Y+60	; 0x3c
    3882:	81 e0       	ldi	r24, 0x01	; 1
    3884:	80 83       	st	Z, r24
			}
		}
	}

	return capacitance;
    3886:	89 a9       	ldd	r24, Y+49	; 0x31
    3888:	9a a9       	ldd	r25, Y+50	; 0x32
    388a:	ab a9       	ldd	r26, Y+51	; 0x33
    388c:	bc a9       	ldd	r27, Y+52	; 0x34
}
    388e:	bc 01       	movw	r22, r24
    3890:	cd 01       	movw	r24, r26
    3892:	cf 5b       	subi	r28, 0xBF	; 191
    3894:	df 4f       	sbci	r29, 0xFF	; 255
    3896:	0f b6       	in	r0, 0x3f	; 63
    3898:	f8 94       	cli
    389a:	de bf       	out	0x3e, r29	; 62
    389c:	0f be       	out	0x3f, r0	; 63
    389e:	cd bf       	out	0x3d, r28	; 61
    38a0:	cf 91       	pop	r28
    38a2:	df 91       	pop	r29
    38a4:	1f 91       	pop	r17
    38a6:	0f 91       	pop	r16
    38a8:	ff 90       	pop	r15
    38aa:	ef 90       	pop	r14
    38ac:	08 95       	ret

000038ae <BUZZER_init>:

/*
 * Description :
 -> Setup the direction for the buzzer pin as output pin.
 */
void BUZZER_init(){
    38ae:	df 93       	push	r29
    38b0:	cf 93       	push	r28
    38b2:	cd b7       	in	r28, 0x3d	; 61
    38b4:	de b7       	in	r29, 0x3e	; 62

	GPIO_setupPinDirection(BUZZER_PORT_ID , BUZZER_PIN_ID , PIN_OUTPUT);
    38b6:	80 e0       	ldi	r24, 0x00	; 0
    38b8:	63 e0       	ldi	r22, 0x03	; 3
    38ba:	41 e0       	ldi	r20, 0x01	; 1
    38bc:	0e 94 38 04 	call	0x870	; 0x870 <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT_ID , BUZZER_PIN_ID , LOGIC_LOW);
    38c0:	80 e0       	ldi	r24, 0x00	; 0
    38c2:	63 e0       	ldi	r22, 0x03	; 3
    38c4:	40 e0       	ldi	r20, 0x00	; 0
    38c6:	0e 94 23 05 	call	0xa46	; 0xa46 <GPIO_writePin>

}
    38ca:	cf 91       	pop	r28
    38cc:	df 91       	pop	r29
    38ce:	08 95       	ret

000038d0 <BUZZER_on>:

/*
 * Description :
 -> Function to enable the Buzzer.
 */
void BUZZER_on(){
    38d0:	df 93       	push	r29
    38d2:	cf 93       	push	r28
    38d4:	cd b7       	in	r28, 0x3d	; 61
    38d6:	de b7       	in	r29, 0x3e	; 62

	GPIO_writePin(BUZZER_PORT_ID , BUZZER_PIN_ID , LOGIC_HIGH);
    38d8:	80 e0       	ldi	r24, 0x00	; 0
    38da:	63 e0       	ldi	r22, 0x03	; 3
    38dc:	41 e0       	ldi	r20, 0x01	; 1
    38de:	0e 94 23 05 	call	0xa46	; 0xa46 <GPIO_writePin>

}
    38e2:	cf 91       	pop	r28
    38e4:	df 91       	pop	r29
    38e6:	08 95       	ret

000038e8 <BUZZER_off>:

/*
 * Description :
 -> Function to disable the Buzzer.
 */
void BUZZER_off(){
    38e8:	df 93       	push	r29
    38ea:	cf 93       	push	r28
    38ec:	cd b7       	in	r28, 0x3d	; 61
    38ee:	de b7       	in	r29, 0x3e	; 62

	GPIO_writePin(BUZZER_PORT_ID , BUZZER_PIN_ID , LOGIC_LOW);
    38f0:	80 e0       	ldi	r24, 0x00	; 0
    38f2:	63 e0       	ldi	r22, 0x03	; 3
    38f4:	40 e0       	ldi	r20, 0x00	; 0
    38f6:	0e 94 23 05 	call	0xa46	; 0xa46 <GPIO_writePin>

}
    38fa:	cf 91       	pop	r28
    38fc:	df 91       	pop	r29
    38fe:	08 95       	ret

00003900 <i2cread>:

#include "ads1015.h"
#include "../../MCAL/WIRE/wire.h"
#include <util/delay.h>

static uint8_t i2cread(void) {
    3900:	df 93       	push	r29
    3902:	cf 93       	push	r28
    3904:	cd b7       	in	r28, 0x3d	; 61
    3906:	de b7       	in	r29, 0x3e	; 62

	return Wire_read();
    3908:	0e 94 47 02 	call	0x48e	; 0x48e <Wire_read>

}
    390c:	cf 91       	pop	r28
    390e:	df 91       	pop	r29
    3910:	08 95       	ret

00003912 <i2cwrite>:

static void i2cwrite(uint8_t x) {
    3912:	df 93       	push	r29
    3914:	cf 93       	push	r28
    3916:	0f 92       	push	r0
    3918:	cd b7       	in	r28, 0x3d	; 61
    391a:	de b7       	in	r29, 0x3e	; 62
    391c:	89 83       	std	Y+1, r24	; 0x01

	Wire_write((uint8_t)x);
    391e:	89 81       	ldd	r24, Y+1	; 0x01
    3920:	0e 94 2c 02 	call	0x458	; 0x458 <Wire_write>

}
    3924:	0f 90       	pop	r0
    3926:	cf 91       	pop	r28
    3928:	df 91       	pop	r29
    392a:	08 95       	ret

0000392c <writeRegister>:

static void writeRegister(uint8_t i2cAddress, uint8_t reg, uint16_t value) {
    392c:	df 93       	push	r29
    392e:	cf 93       	push	r28
    3930:	00 d0       	rcall	.+0      	; 0x3932 <writeRegister+0x6>
    3932:	00 d0       	rcall	.+0      	; 0x3934 <writeRegister+0x8>
    3934:	cd b7       	in	r28, 0x3d	; 61
    3936:	de b7       	in	r29, 0x3e	; 62
    3938:	89 83       	std	Y+1, r24	; 0x01
    393a:	6a 83       	std	Y+2, r22	; 0x02
    393c:	5c 83       	std	Y+4, r21	; 0x04
    393e:	4b 83       	std	Y+3, r20	; 0x03
	Wire_beginTransmission(i2cAddress);
    3940:	89 81       	ldd	r24, Y+1	; 0x01
    3942:	0e 94 19 01 	call	0x232	; 0x232 <Wire_beginTransmission>
	i2cwrite((uint8_t)reg);
    3946:	8a 81       	ldd	r24, Y+2	; 0x02
    3948:	0e 94 89 1c 	call	0x3912	; 0x3912 <i2cwrite>
	i2cwrite((uint8_t)(value>>8));
    394c:	8b 81       	ldd	r24, Y+3	; 0x03
    394e:	9c 81       	ldd	r25, Y+4	; 0x04
    3950:	89 2f       	mov	r24, r25
    3952:	99 27       	eor	r25, r25
    3954:	0e 94 89 1c 	call	0x3912	; 0x3912 <i2cwrite>
	i2cwrite((uint8_t)(value & 0xFF));
    3958:	8b 81       	ldd	r24, Y+3	; 0x03
    395a:	0e 94 89 1c 	call	0x3912	; 0x3912 <i2cwrite>
	Wire_endTransmission();
    395e:	0e 94 28 01 	call	0x250	; 0x250 <Wire_endTransmission>
}
    3962:	0f 90       	pop	r0
    3964:	0f 90       	pop	r0
    3966:	0f 90       	pop	r0
    3968:	0f 90       	pop	r0
    396a:	cf 91       	pop	r28
    396c:	df 91       	pop	r29
    396e:	08 95       	ret

00003970 <readRegister>:

static uint16_t readRegister(uint8_t i2cAddress, uint8_t reg)
{
    3970:	0f 93       	push	r16
    3972:	1f 93       	push	r17
    3974:	df 93       	push	r29
    3976:	cf 93       	push	r28
    3978:	00 d0       	rcall	.+0      	; 0x397a <readRegister+0xa>
    397a:	cd b7       	in	r28, 0x3d	; 61
    397c:	de b7       	in	r29, 0x3e	; 62
    397e:	89 83       	std	Y+1, r24	; 0x01
    3980:	6a 83       	std	Y+2, r22	; 0x02
	Wire_beginTransmission(i2cAddress);
    3982:	89 81       	ldd	r24, Y+1	; 0x01
    3984:	0e 94 19 01 	call	0x232	; 0x232 <Wire_beginTransmission>
	i2cwrite(ADS1015_REG_POINTER_CONVERT);
    3988:	80 e0       	ldi	r24, 0x00	; 0
    398a:	0e 94 89 1c 	call	0x3912	; 0x3912 <i2cwrite>
	Wire_endTransmission();
    398e:	0e 94 28 01 	call	0x250	; 0x250 <Wire_endTransmission>
	Wire_requestFrom(i2cAddress, (uint8_t)2);
    3992:	89 81       	ldd	r24, Y+1	; 0x01
    3994:	62 e0       	ldi	r22, 0x02	; 2
    3996:	0e 94 a0 01 	call	0x340	; 0x340 <Wire_requestFrom>
	return ((i2cread() << 8) | i2cread());
    399a:	0e 94 80 1c 	call	0x3900	; 0x3900 <i2cread>
    399e:	88 2f       	mov	r24, r24
    39a0:	90 e0       	ldi	r25, 0x00	; 0
    39a2:	18 2f       	mov	r17, r24
    39a4:	00 27       	eor	r16, r16
    39a6:	0e 94 80 1c 	call	0x3900	; 0x3900 <i2cread>
    39aa:	88 2f       	mov	r24, r24
    39ac:	90 e0       	ldi	r25, 0x00	; 0
    39ae:	80 2b       	or	r24, r16
    39b0:	91 2b       	or	r25, r17
}
    39b2:	0f 90       	pop	r0
    39b4:	0f 90       	pop	r0
    39b6:	cf 91       	pop	r28
    39b8:	df 91       	pop	r29
    39ba:	1f 91       	pop	r17
    39bc:	0f 91       	pop	r16
    39be:	08 95       	ret

000039c0 <ADS1015_init>:

void ADS1015_init(ADS1015* ads, uint8_t i2cAddress)
{
    39c0:	df 93       	push	r29
    39c2:	cf 93       	push	r28
    39c4:	00 d0       	rcall	.+0      	; 0x39c6 <ADS1015_init+0x6>
    39c6:	0f 92       	push	r0
    39c8:	cd b7       	in	r28, 0x3d	; 61
    39ca:	de b7       	in	r29, 0x3e	; 62
    39cc:	9a 83       	std	Y+2, r25	; 0x02
    39ce:	89 83       	std	Y+1, r24	; 0x01
    39d0:	6b 83       	std	Y+3, r22	; 0x03
	ads->i2cAddress = i2cAddress;
    39d2:	e9 81       	ldd	r30, Y+1	; 0x01
    39d4:	fa 81       	ldd	r31, Y+2	; 0x02
    39d6:	8b 81       	ldd	r24, Y+3	; 0x03
    39d8:	80 83       	st	Z, r24
	ads->conversionDelay = ADS1015_CONVERSIONDELAY;
    39da:	e9 81       	ldd	r30, Y+1	; 0x01
    39dc:	fa 81       	ldd	r31, Y+2	; 0x02
    39de:	81 e0       	ldi	r24, 0x01	; 1
    39e0:	81 83       	std	Z+1, r24	; 0x01
	ads->bitShift = 4;
    39e2:	e9 81       	ldd	r30, Y+1	; 0x01
    39e4:	fa 81       	ldd	r31, Y+2	; 0x02
    39e6:	84 e0       	ldi	r24, 0x04	; 4
    39e8:	82 83       	std	Z+2, r24	; 0x02
	ads->gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
    39ea:	e9 81       	ldd	r30, Y+1	; 0x01
    39ec:	fa 81       	ldd	r31, Y+2	; 0x02
    39ee:	14 82       	std	Z+4, r1	; 0x04
    39f0:	13 82       	std	Z+3, r1	; 0x03
}
    39f2:	0f 90       	pop	r0
    39f4:	0f 90       	pop	r0
    39f6:	0f 90       	pop	r0
    39f8:	cf 91       	pop	r28
    39fa:	df 91       	pop	r29
    39fc:	08 95       	ret

000039fe <ADS1015_begin>:

void ADS1015_begin(ADS1015* ads)
{
    39fe:	df 93       	push	r29
    3a00:	cf 93       	push	r28
    3a02:	00 d0       	rcall	.+0      	; 0x3a04 <ADS1015_begin+0x6>
    3a04:	cd b7       	in	r28, 0x3d	; 61
    3a06:	de b7       	in	r29, 0x3e	; 62
    3a08:	9a 83       	std	Y+2, r25	; 0x02
    3a0a:	89 83       	std	Y+1, r24	; 0x01
	Wire_begin();
    3a0c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <Wire_begin>
}
    3a10:	0f 90       	pop	r0
    3a12:	0f 90       	pop	r0
    3a14:	cf 91       	pop	r28
    3a16:	df 91       	pop	r29
    3a18:	08 95       	ret

00003a1a <ADS1015_setGain>:

void ADS1015_setGain(ADS1015* ads, adsGain gain)
{
    3a1a:	df 93       	push	r29
    3a1c:	cf 93       	push	r28
    3a1e:	00 d0       	rcall	.+0      	; 0x3a20 <ADS1015_setGain+0x6>
    3a20:	00 d0       	rcall	.+0      	; 0x3a22 <ADS1015_setGain+0x8>
    3a22:	cd b7       	in	r28, 0x3d	; 61
    3a24:	de b7       	in	r29, 0x3e	; 62
    3a26:	9a 83       	std	Y+2, r25	; 0x02
    3a28:	89 83       	std	Y+1, r24	; 0x01
    3a2a:	7c 83       	std	Y+4, r23	; 0x04
    3a2c:	6b 83       	std	Y+3, r22	; 0x03
	ads->gain = gain;
    3a2e:	e9 81       	ldd	r30, Y+1	; 0x01
    3a30:	fa 81       	ldd	r31, Y+2	; 0x02
    3a32:	8b 81       	ldd	r24, Y+3	; 0x03
    3a34:	9c 81       	ldd	r25, Y+4	; 0x04
    3a36:	94 83       	std	Z+4, r25	; 0x04
    3a38:	83 83       	std	Z+3, r24	; 0x03
}
    3a3a:	0f 90       	pop	r0
    3a3c:	0f 90       	pop	r0
    3a3e:	0f 90       	pop	r0
    3a40:	0f 90       	pop	r0
    3a42:	cf 91       	pop	r28
    3a44:	df 91       	pop	r29
    3a46:	08 95       	ret

00003a48 <ADS1015_getGain>:

adsGain ADS1015_getGain(ADS1015* ads)
{
    3a48:	df 93       	push	r29
    3a4a:	cf 93       	push	r28
    3a4c:	00 d0       	rcall	.+0      	; 0x3a4e <ADS1015_getGain+0x6>
    3a4e:	cd b7       	in	r28, 0x3d	; 61
    3a50:	de b7       	in	r29, 0x3e	; 62
    3a52:	9a 83       	std	Y+2, r25	; 0x02
    3a54:	89 83       	std	Y+1, r24	; 0x01
	return ads->gain;
    3a56:	e9 81       	ldd	r30, Y+1	; 0x01
    3a58:	fa 81       	ldd	r31, Y+2	; 0x02
    3a5a:	83 81       	ldd	r24, Z+3	; 0x03
    3a5c:	94 81       	ldd	r25, Z+4	; 0x04
}
    3a5e:	0f 90       	pop	r0
    3a60:	0f 90       	pop	r0
    3a62:	cf 91       	pop	r28
    3a64:	df 91       	pop	r29
    3a66:	08 95       	ret

00003a68 <ADS1015_readADC_SingleEnded>:

uint16_t ADS1015_readADC_SingleEnded(ADS1015* ads, uint8_t channel){
    3a68:	df 93       	push	r29
    3a6a:	cf 93       	push	r28
    3a6c:	cd b7       	in	r28, 0x3d	; 61
    3a6e:	de b7       	in	r29, 0x3e	; 62
    3a70:	67 97       	sbiw	r28, 0x17	; 23
    3a72:	0f b6       	in	r0, 0x3f	; 63
    3a74:	f8 94       	cli
    3a76:	de bf       	out	0x3e, r29	; 62
    3a78:	0f be       	out	0x3f, r0	; 63
    3a7a:	cd bf       	out	0x3d, r28	; 61
    3a7c:	9a 8b       	std	Y+18, r25	; 0x12
    3a7e:	89 8b       	std	Y+17, r24	; 0x11
    3a80:	6b 8b       	std	Y+19, r22	; 0x13
	if (channel > 3)
    3a82:	8b 89       	ldd	r24, Y+19	; 0x13
    3a84:	84 30       	cpi	r24, 0x04	; 4
    3a86:	18 f0       	brcs	.+6      	; 0x3a8e <ADS1015_readADC_SingleEnded+0x26>
	{
		return 0;
    3a88:	1f 8a       	std	Y+23, r1	; 0x17
    3a8a:	1e 8a       	std	Y+22, r1	; 0x16
    3a8c:	e2 c0       	rjmp	.+452    	; 0x3c52 <ADS1015_readADC_SingleEnded+0x1ea>
	uint16_t config = ADS1015_REG_CONFIG_CQUE_NONE    | // Disable the comparator (default val)
			ADS1015_REG_CONFIG_CLAT_NONLAT  | // Non-latching (default val)
			ADS1015_REG_CONFIG_CPOL_ACTVLOW | // Alert/Rdy active low   (default val)
			ADS1015_REG_CONFIG_CMODE_TRAD   | // Traditional comparator (default val)
			ADS1015_REG_CONFIG_DR_1600SPS   | // 1600 samples per second (default)
			ADS1015_REG_CONFIG_MODE_SINGLE;   // Single-shot mode (default)
    3a8e:	83 e8       	ldi	r24, 0x83	; 131
    3a90:	91 e0       	ldi	r25, 0x01	; 1
    3a92:	98 8b       	std	Y+16, r25	; 0x10
    3a94:	8f 87       	std	Y+15, r24	; 0x0f

	// Set PGA/voltage range
	config |= ads->gain;
    3a96:	e9 89       	ldd	r30, Y+17	; 0x11
    3a98:	fa 89       	ldd	r31, Y+18	; 0x12
    3a9a:	23 81       	ldd	r18, Z+3	; 0x03
    3a9c:	34 81       	ldd	r19, Z+4	; 0x04
    3a9e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3aa0:	98 89       	ldd	r25, Y+16	; 0x10
    3aa2:	82 2b       	or	r24, r18
    3aa4:	93 2b       	or	r25, r19
    3aa6:	98 8b       	std	Y+16, r25	; 0x10
    3aa8:	8f 87       	std	Y+15, r24	; 0x0f

	// Set single-ended input channel
	switch (channel)
    3aaa:	8b 89       	ldd	r24, Y+19	; 0x13
    3aac:	28 2f       	mov	r18, r24
    3aae:	30 e0       	ldi	r19, 0x00	; 0
    3ab0:	3d 8b       	std	Y+21, r19	; 0x15
    3ab2:	2c 8b       	std	Y+20, r18	; 0x14
    3ab4:	4c 89       	ldd	r20, Y+20	; 0x14
    3ab6:	5d 89       	ldd	r21, Y+21	; 0x15
    3ab8:	41 30       	cpi	r20, 0x01	; 1
    3aba:	51 05       	cpc	r21, r1
    3abc:	e1 f0       	breq	.+56     	; 0x3af6 <ADS1015_readADC_SingleEnded+0x8e>
    3abe:	8c 89       	ldd	r24, Y+20	; 0x14
    3ac0:	9d 89       	ldd	r25, Y+21	; 0x15
    3ac2:	82 30       	cpi	r24, 0x02	; 2
    3ac4:	91 05       	cpc	r25, r1
    3ac6:	34 f4       	brge	.+12     	; 0x3ad4 <ADS1015_readADC_SingleEnded+0x6c>
    3ac8:	2c 89       	ldd	r18, Y+20	; 0x14
    3aca:	3d 89       	ldd	r19, Y+21	; 0x15
    3acc:	21 15       	cp	r18, r1
    3ace:	31 05       	cpc	r19, r1
    3ad0:	61 f0       	breq	.+24     	; 0x3aea <ADS1015_readADC_SingleEnded+0x82>
    3ad2:	22 c0       	rjmp	.+68     	; 0x3b18 <ADS1015_readADC_SingleEnded+0xb0>
    3ad4:	4c 89       	ldd	r20, Y+20	; 0x14
    3ad6:	5d 89       	ldd	r21, Y+21	; 0x15
    3ad8:	42 30       	cpi	r20, 0x02	; 2
    3ada:	51 05       	cpc	r21, r1
    3adc:	91 f0       	breq	.+36     	; 0x3b02 <ADS1015_readADC_SingleEnded+0x9a>
    3ade:	8c 89       	ldd	r24, Y+20	; 0x14
    3ae0:	9d 89       	ldd	r25, Y+21	; 0x15
    3ae2:	83 30       	cpi	r24, 0x03	; 3
    3ae4:	91 05       	cpc	r25, r1
    3ae6:	99 f0       	breq	.+38     	; 0x3b0e <ADS1015_readADC_SingleEnded+0xa6>
    3ae8:	17 c0       	rjmp	.+46     	; 0x3b18 <ADS1015_readADC_SingleEnded+0xb0>
	{
	case (0):
	    		  config |= ADS1015_REG_CONFIG_MUX_SINGLE_0;
    3aea:	8f 85       	ldd	r24, Y+15	; 0x0f
    3aec:	98 89       	ldd	r25, Y+16	; 0x10
    3aee:	90 64       	ori	r25, 0x40	; 64
    3af0:	98 8b       	std	Y+16, r25	; 0x10
    3af2:	8f 87       	std	Y+15, r24	; 0x0f
    3af4:	11 c0       	rjmp	.+34     	; 0x3b18 <ADS1015_readADC_SingleEnded+0xb0>
	break;
	case (1):
	    		  config |= ADS1015_REG_CONFIG_MUX_SINGLE_1;
    3af6:	8f 85       	ldd	r24, Y+15	; 0x0f
    3af8:	98 89       	ldd	r25, Y+16	; 0x10
    3afa:	90 65       	ori	r25, 0x50	; 80
    3afc:	98 8b       	std	Y+16, r25	; 0x10
    3afe:	8f 87       	std	Y+15, r24	; 0x0f
    3b00:	0b c0       	rjmp	.+22     	; 0x3b18 <ADS1015_readADC_SingleEnded+0xb0>
	break;
	case (2):
	    		  config |= ADS1015_REG_CONFIG_MUX_SINGLE_2;
    3b02:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b04:	98 89       	ldd	r25, Y+16	; 0x10
    3b06:	90 66       	ori	r25, 0x60	; 96
    3b08:	98 8b       	std	Y+16, r25	; 0x10
    3b0a:	8f 87       	std	Y+15, r24	; 0x0f
    3b0c:	05 c0       	rjmp	.+10     	; 0x3b18 <ADS1015_readADC_SingleEnded+0xb0>
	break;
	case (3):
	    		  config |= ADS1015_REG_CONFIG_MUX_SINGLE_3;
    3b0e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b10:	98 89       	ldd	r25, Y+16	; 0x10
    3b12:	90 67       	ori	r25, 0x70	; 112
    3b14:	98 8b       	std	Y+16, r25	; 0x10
    3b16:	8f 87       	std	Y+15, r24	; 0x0f
	break;
	}

	// Set 'start single-conversion' bit
	config |= ADS1015_REG_CONFIG_OS_SINGLE;
    3b18:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b1a:	98 89       	ldd	r25, Y+16	; 0x10
    3b1c:	90 68       	ori	r25, 0x80	; 128
    3b1e:	98 8b       	std	Y+16, r25	; 0x10
    3b20:	8f 87       	std	Y+15, r24	; 0x0f

	// Write config register to the ADC
	writeRegister(ads->i2cAddress, ADS1015_REG_POINTER_CONFIG, config);
    3b22:	e9 89       	ldd	r30, Y+17	; 0x11
    3b24:	fa 89       	ldd	r31, Y+18	; 0x12
    3b26:	80 81       	ld	r24, Z
    3b28:	2f 85       	ldd	r18, Y+15	; 0x0f
    3b2a:	38 89       	ldd	r19, Y+16	; 0x10
    3b2c:	61 e0       	ldi	r22, 0x01	; 1
    3b2e:	a9 01       	movw	r20, r18
    3b30:	0e 94 96 1c 	call	0x392c	; 0x392c <writeRegister>

	// Wait for the conversion to complete
	_delay_ms(ads->conversionDelay);
    3b34:	e9 89       	ldd	r30, Y+17	; 0x11
    3b36:	fa 89       	ldd	r31, Y+18	; 0x12
    3b38:	81 81       	ldd	r24, Z+1	; 0x01
    3b3a:	88 2f       	mov	r24, r24
    3b3c:	90 e0       	ldi	r25, 0x00	; 0
    3b3e:	a0 e0       	ldi	r26, 0x00	; 0
    3b40:	b0 e0       	ldi	r27, 0x00	; 0
    3b42:	bc 01       	movw	r22, r24
    3b44:	cd 01       	movw	r24, r26
    3b46:	0e 94 2b 26 	call	0x4c56	; 0x4c56 <__floatunsisf>
    3b4a:	dc 01       	movw	r26, r24
    3b4c:	cb 01       	movw	r24, r22
    3b4e:	8b 87       	std	Y+11, r24	; 0x0b
    3b50:	9c 87       	std	Y+12, r25	; 0x0c
    3b52:	ad 87       	std	Y+13, r26	; 0x0d
    3b54:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b56:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b58:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b5e:	20 e0       	ldi	r18, 0x00	; 0
    3b60:	30 e0       	ldi	r19, 0x00	; 0
    3b62:	4a e7       	ldi	r20, 0x7A	; 122
    3b64:	55 e4       	ldi	r21, 0x45	; 69
    3b66:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__mulsf3>
    3b6a:	dc 01       	movw	r26, r24
    3b6c:	cb 01       	movw	r24, r22
    3b6e:	8f 83       	std	Y+7, r24	; 0x07
    3b70:	98 87       	std	Y+8, r25	; 0x08
    3b72:	a9 87       	std	Y+9, r26	; 0x09
    3b74:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b76:	6f 81       	ldd	r22, Y+7	; 0x07
    3b78:	78 85       	ldd	r23, Y+8	; 0x08
    3b7a:	89 85       	ldd	r24, Y+9	; 0x09
    3b7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b7e:	20 e0       	ldi	r18, 0x00	; 0
    3b80:	30 e0       	ldi	r19, 0x00	; 0
    3b82:	40 e8       	ldi	r20, 0x80	; 128
    3b84:	5f e3       	ldi	r21, 0x3F	; 63
    3b86:	0e 94 93 25 	call	0x4b26	; 0x4b26 <__cmpsf2>
    3b8a:	88 23       	and	r24, r24
    3b8c:	2c f4       	brge	.+10     	; 0x3b98 <ADS1015_readADC_SingleEnded+0x130>
		__ticks = 1;
    3b8e:	81 e0       	ldi	r24, 0x01	; 1
    3b90:	90 e0       	ldi	r25, 0x00	; 0
    3b92:	9e 83       	std	Y+6, r25	; 0x06
    3b94:	8d 83       	std	Y+5, r24	; 0x05
    3b96:	3f c0       	rjmp	.+126    	; 0x3c16 <ADS1015_readADC_SingleEnded+0x1ae>
	else if (__tmp > 65535)
    3b98:	6f 81       	ldd	r22, Y+7	; 0x07
    3b9a:	78 85       	ldd	r23, Y+8	; 0x08
    3b9c:	89 85       	ldd	r24, Y+9	; 0x09
    3b9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ba0:	20 e0       	ldi	r18, 0x00	; 0
    3ba2:	3f ef       	ldi	r19, 0xFF	; 255
    3ba4:	4f e7       	ldi	r20, 0x7F	; 127
    3ba6:	57 e4       	ldi	r21, 0x47	; 71
    3ba8:	0e 94 dd 26 	call	0x4dba	; 0x4dba <__gesf2>
    3bac:	18 16       	cp	r1, r24
    3bae:	4c f5       	brge	.+82     	; 0x3c02 <ADS1015_readADC_SingleEnded+0x19a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bb0:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bb2:	7c 85       	ldd	r23, Y+12	; 0x0c
    3bb4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bb6:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bb8:	20 e0       	ldi	r18, 0x00	; 0
    3bba:	30 e0       	ldi	r19, 0x00	; 0
    3bbc:	40 e2       	ldi	r20, 0x20	; 32
    3bbe:	51 e4       	ldi	r21, 0x41	; 65
    3bc0:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__mulsf3>
    3bc4:	dc 01       	movw	r26, r24
    3bc6:	cb 01       	movw	r24, r22
    3bc8:	bc 01       	movw	r22, r24
    3bca:	cd 01       	movw	r24, r26
    3bcc:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <__fixunssfsi>
    3bd0:	dc 01       	movw	r26, r24
    3bd2:	cb 01       	movw	r24, r22
    3bd4:	9e 83       	std	Y+6, r25	; 0x06
    3bd6:	8d 83       	std	Y+5, r24	; 0x05
    3bd8:	0f c0       	rjmp	.+30     	; 0x3bf8 <ADS1015_readADC_SingleEnded+0x190>
    3bda:	80 e9       	ldi	r24, 0x90	; 144
    3bdc:	91 e0       	ldi	r25, 0x01	; 1
    3bde:	9c 83       	std	Y+4, r25	; 0x04
    3be0:	8b 83       	std	Y+3, r24	; 0x03
    3be2:	8b 81       	ldd	r24, Y+3	; 0x03
    3be4:	9c 81       	ldd	r25, Y+4	; 0x04
    3be6:	01 97       	sbiw	r24, 0x01	; 1
    3be8:	f1 f7       	brne	.-4      	; 0x3be6 <ADS1015_readADC_SingleEnded+0x17e>
    3bea:	9c 83       	std	Y+4, r25	; 0x04
    3bec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bee:	8d 81       	ldd	r24, Y+5	; 0x05
    3bf0:	9e 81       	ldd	r25, Y+6	; 0x06
    3bf2:	01 97       	sbiw	r24, 0x01	; 1
    3bf4:	9e 83       	std	Y+6, r25	; 0x06
    3bf6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bf8:	8d 81       	ldd	r24, Y+5	; 0x05
    3bfa:	9e 81       	ldd	r25, Y+6	; 0x06
    3bfc:	00 97       	sbiw	r24, 0x00	; 0
    3bfe:	69 f7       	brne	.-38     	; 0x3bda <ADS1015_readADC_SingleEnded+0x172>
    3c00:	14 c0       	rjmp	.+40     	; 0x3c2a <ADS1015_readADC_SingleEnded+0x1c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c02:	6f 81       	ldd	r22, Y+7	; 0x07
    3c04:	78 85       	ldd	r23, Y+8	; 0x08
    3c06:	89 85       	ldd	r24, Y+9	; 0x09
    3c08:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c0a:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <__fixunssfsi>
    3c0e:	dc 01       	movw	r26, r24
    3c10:	cb 01       	movw	r24, r22
    3c12:	9e 83       	std	Y+6, r25	; 0x06
    3c14:	8d 83       	std	Y+5, r24	; 0x05
    3c16:	8d 81       	ldd	r24, Y+5	; 0x05
    3c18:	9e 81       	ldd	r25, Y+6	; 0x06
    3c1a:	9a 83       	std	Y+2, r25	; 0x02
    3c1c:	89 83       	std	Y+1, r24	; 0x01
    3c1e:	89 81       	ldd	r24, Y+1	; 0x01
    3c20:	9a 81       	ldd	r25, Y+2	; 0x02
    3c22:	01 97       	sbiw	r24, 0x01	; 1
    3c24:	f1 f7       	brne	.-4      	; 0x3c22 <ADS1015_readADC_SingleEnded+0x1ba>
    3c26:	9a 83       	std	Y+2, r25	; 0x02
    3c28:	89 83       	std	Y+1, r24	; 0x01

	// Read the conversion results
	// Shift 12-bit results right 4 bits for the ADS1015
	return readRegister(ads->i2cAddress, ADS1015_REG_POINTER_CONVERT) >> ads->bitShift;
    3c2a:	e9 89       	ldd	r30, Y+17	; 0x11
    3c2c:	fa 89       	ldd	r31, Y+18	; 0x12
    3c2e:	80 81       	ld	r24, Z
    3c30:	60 e0       	ldi	r22, 0x00	; 0
    3c32:	0e 94 b8 1c 	call	0x3970	; 0x3970 <readRegister>
    3c36:	9c 01       	movw	r18, r24
    3c38:	e9 89       	ldd	r30, Y+17	; 0x11
    3c3a:	fa 89       	ldd	r31, Y+18	; 0x12
    3c3c:	82 81       	ldd	r24, Z+2	; 0x02
    3c3e:	88 2f       	mov	r24, r24
    3c40:	90 e0       	ldi	r25, 0x00	; 0
    3c42:	a9 01       	movw	r20, r18
    3c44:	02 c0       	rjmp	.+4      	; 0x3c4a <ADS1015_readADC_SingleEnded+0x1e2>
    3c46:	56 95       	lsr	r21
    3c48:	47 95       	ror	r20
    3c4a:	8a 95       	dec	r24
    3c4c:	e2 f7       	brpl	.-8      	; 0x3c46 <ADS1015_readADC_SingleEnded+0x1de>
    3c4e:	5f 8b       	std	Y+23, r21	; 0x17
    3c50:	4e 8b       	std	Y+22, r20	; 0x16
    3c52:	8e 89       	ldd	r24, Y+22	; 0x16
    3c54:	9f 89       	ldd	r25, Y+23	; 0x17
}
    3c56:	67 96       	adiw	r28, 0x17	; 23
    3c58:	0f b6       	in	r0, 0x3f	; 63
    3c5a:	f8 94       	cli
    3c5c:	de bf       	out	0x3e, r29	; 62
    3c5e:	0f be       	out	0x3f, r0	; 63
    3c60:	cd bf       	out	0x3d, r28	; 61
    3c62:	cf 91       	pop	r28
    3c64:	df 91       	pop	r29
    3c66:	08 95       	ret

00003c68 <ADS1015_readADC_Differential_0_1>:
            a signed value since the difference can be either
            positive or negative.
*/
/**************************************************************************/
int16_t ADS1015_readADC_Differential_0_1(ADS1015* ads)
{
    3c68:	df 93       	push	r29
    3c6a:	cf 93       	push	r28
    3c6c:	cd b7       	in	r28, 0x3d	; 61
    3c6e:	de b7       	in	r29, 0x3e	; 62
    3c70:	66 97       	sbiw	r28, 0x16	; 22
    3c72:	0f b6       	in	r0, 0x3f	; 63
    3c74:	f8 94       	cli
    3c76:	de bf       	out	0x3e, r29	; 62
    3c78:	0f be       	out	0x3f, r0	; 63
    3c7a:	cd bf       	out	0x3d, r28	; 61
    3c7c:	9c 8b       	std	Y+20, r25	; 0x14
    3c7e:	8b 8b       	std	Y+19, r24	; 0x13
  uint16_t config = ADS1015_REG_CONFIG_CQUE_NONE    | // Disable the comparator (default val)
                    ADS1015_REG_CONFIG_CLAT_NONLAT  | // Non-latching (default val)
                    ADS1015_REG_CONFIG_CPOL_ACTVLOW | // Alert/Rdy active low   (default val)
                    ADS1015_REG_CONFIG_CMODE_TRAD   | // Traditional comparator (default val)
                    ADS1015_REG_CONFIG_DR_1600SPS   | // 1600 samples per second (default)
                    ADS1015_REG_CONFIG_MODE_SINGLE;   // Single-shot mode (default)
    3c80:	83 e8       	ldi	r24, 0x83	; 131
    3c82:	91 e0       	ldi	r25, 0x01	; 1
    3c84:	9a 8b       	std	Y+18, r25	; 0x12
    3c86:	89 8b       	std	Y+17, r24	; 0x11

  // Set PGA/voltage range
  config |= ads->gain;
    3c88:	eb 89       	ldd	r30, Y+19	; 0x13
    3c8a:	fc 89       	ldd	r31, Y+20	; 0x14
    3c8c:	23 81       	ldd	r18, Z+3	; 0x03
    3c8e:	34 81       	ldd	r19, Z+4	; 0x04
    3c90:	89 89       	ldd	r24, Y+17	; 0x11
    3c92:	9a 89       	ldd	r25, Y+18	; 0x12
    3c94:	82 2b       	or	r24, r18
    3c96:	93 2b       	or	r25, r19
    3c98:	9a 8b       	std	Y+18, r25	; 0x12
    3c9a:	89 8b       	std	Y+17, r24	; 0x11

  // Set channels
  config |= ADS1015_REG_CONFIG_MUX_DIFF_0_1;          // AIN0 = P, AIN1 = N

  // Set 'start single-conversion' bit
  config |= ADS1015_REG_CONFIG_OS_SINGLE;
    3c9c:	89 89       	ldd	r24, Y+17	; 0x11
    3c9e:	9a 89       	ldd	r25, Y+18	; 0x12
    3ca0:	90 68       	ori	r25, 0x80	; 128
    3ca2:	9a 8b       	std	Y+18, r25	; 0x12
    3ca4:	89 8b       	std	Y+17, r24	; 0x11

  // Write config register to the ADC
  writeRegister(ads->i2cAddress, ADS1015_REG_POINTER_CONFIG, config);
    3ca6:	eb 89       	ldd	r30, Y+19	; 0x13
    3ca8:	fc 89       	ldd	r31, Y+20	; 0x14
    3caa:	80 81       	ld	r24, Z
    3cac:	29 89       	ldd	r18, Y+17	; 0x11
    3cae:	3a 89       	ldd	r19, Y+18	; 0x12
    3cb0:	61 e0       	ldi	r22, 0x01	; 1
    3cb2:	a9 01       	movw	r20, r18
    3cb4:	0e 94 96 1c 	call	0x392c	; 0x392c <writeRegister>

  // Wait for the conversion to complete
  _delay_ms(ads->conversionDelay);
    3cb8:	eb 89       	ldd	r30, Y+19	; 0x13
    3cba:	fc 89       	ldd	r31, Y+20	; 0x14
    3cbc:	81 81       	ldd	r24, Z+1	; 0x01
    3cbe:	88 2f       	mov	r24, r24
    3cc0:	90 e0       	ldi	r25, 0x00	; 0
    3cc2:	a0 e0       	ldi	r26, 0x00	; 0
    3cc4:	b0 e0       	ldi	r27, 0x00	; 0
    3cc6:	bc 01       	movw	r22, r24
    3cc8:	cd 01       	movw	r24, r26
    3cca:	0e 94 2b 26 	call	0x4c56	; 0x4c56 <__floatunsisf>
    3cce:	dc 01       	movw	r26, r24
    3cd0:	cb 01       	movw	r24, r22
    3cd2:	8b 87       	std	Y+11, r24	; 0x0b
    3cd4:	9c 87       	std	Y+12, r25	; 0x0c
    3cd6:	ad 87       	std	Y+13, r26	; 0x0d
    3cd8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cda:	6b 85       	ldd	r22, Y+11	; 0x0b
    3cdc:	7c 85       	ldd	r23, Y+12	; 0x0c
    3cde:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ce0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ce2:	20 e0       	ldi	r18, 0x00	; 0
    3ce4:	30 e0       	ldi	r19, 0x00	; 0
    3ce6:	4a e7       	ldi	r20, 0x7A	; 122
    3ce8:	55 e4       	ldi	r21, 0x45	; 69
    3cea:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__mulsf3>
    3cee:	dc 01       	movw	r26, r24
    3cf0:	cb 01       	movw	r24, r22
    3cf2:	8f 83       	std	Y+7, r24	; 0x07
    3cf4:	98 87       	std	Y+8, r25	; 0x08
    3cf6:	a9 87       	std	Y+9, r26	; 0x09
    3cf8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3cfa:	6f 81       	ldd	r22, Y+7	; 0x07
    3cfc:	78 85       	ldd	r23, Y+8	; 0x08
    3cfe:	89 85       	ldd	r24, Y+9	; 0x09
    3d00:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d02:	20 e0       	ldi	r18, 0x00	; 0
    3d04:	30 e0       	ldi	r19, 0x00	; 0
    3d06:	40 e8       	ldi	r20, 0x80	; 128
    3d08:	5f e3       	ldi	r21, 0x3F	; 63
    3d0a:	0e 94 93 25 	call	0x4b26	; 0x4b26 <__cmpsf2>
    3d0e:	88 23       	and	r24, r24
    3d10:	2c f4       	brge	.+10     	; 0x3d1c <ADS1015_readADC_Differential_0_1+0xb4>
		__ticks = 1;
    3d12:	81 e0       	ldi	r24, 0x01	; 1
    3d14:	90 e0       	ldi	r25, 0x00	; 0
    3d16:	9e 83       	std	Y+6, r25	; 0x06
    3d18:	8d 83       	std	Y+5, r24	; 0x05
    3d1a:	3f c0       	rjmp	.+126    	; 0x3d9a <ADS1015_readADC_Differential_0_1+0x132>
	else if (__tmp > 65535)
    3d1c:	6f 81       	ldd	r22, Y+7	; 0x07
    3d1e:	78 85       	ldd	r23, Y+8	; 0x08
    3d20:	89 85       	ldd	r24, Y+9	; 0x09
    3d22:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d24:	20 e0       	ldi	r18, 0x00	; 0
    3d26:	3f ef       	ldi	r19, 0xFF	; 255
    3d28:	4f e7       	ldi	r20, 0x7F	; 127
    3d2a:	57 e4       	ldi	r21, 0x47	; 71
    3d2c:	0e 94 dd 26 	call	0x4dba	; 0x4dba <__gesf2>
    3d30:	18 16       	cp	r1, r24
    3d32:	4c f5       	brge	.+82     	; 0x3d86 <ADS1015_readADC_Differential_0_1+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d34:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d36:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d38:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d3c:	20 e0       	ldi	r18, 0x00	; 0
    3d3e:	30 e0       	ldi	r19, 0x00	; 0
    3d40:	40 e2       	ldi	r20, 0x20	; 32
    3d42:	51 e4       	ldi	r21, 0x41	; 65
    3d44:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__mulsf3>
    3d48:	dc 01       	movw	r26, r24
    3d4a:	cb 01       	movw	r24, r22
    3d4c:	bc 01       	movw	r22, r24
    3d4e:	cd 01       	movw	r24, r26
    3d50:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <__fixunssfsi>
    3d54:	dc 01       	movw	r26, r24
    3d56:	cb 01       	movw	r24, r22
    3d58:	9e 83       	std	Y+6, r25	; 0x06
    3d5a:	8d 83       	std	Y+5, r24	; 0x05
    3d5c:	0f c0       	rjmp	.+30     	; 0x3d7c <ADS1015_readADC_Differential_0_1+0x114>
    3d5e:	80 e9       	ldi	r24, 0x90	; 144
    3d60:	91 e0       	ldi	r25, 0x01	; 1
    3d62:	9c 83       	std	Y+4, r25	; 0x04
    3d64:	8b 83       	std	Y+3, r24	; 0x03
    3d66:	8b 81       	ldd	r24, Y+3	; 0x03
    3d68:	9c 81       	ldd	r25, Y+4	; 0x04
    3d6a:	01 97       	sbiw	r24, 0x01	; 1
    3d6c:	f1 f7       	brne	.-4      	; 0x3d6a <ADS1015_readADC_Differential_0_1+0x102>
    3d6e:	9c 83       	std	Y+4, r25	; 0x04
    3d70:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d72:	8d 81       	ldd	r24, Y+5	; 0x05
    3d74:	9e 81       	ldd	r25, Y+6	; 0x06
    3d76:	01 97       	sbiw	r24, 0x01	; 1
    3d78:	9e 83       	std	Y+6, r25	; 0x06
    3d7a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d7c:	8d 81       	ldd	r24, Y+5	; 0x05
    3d7e:	9e 81       	ldd	r25, Y+6	; 0x06
    3d80:	00 97       	sbiw	r24, 0x00	; 0
    3d82:	69 f7       	brne	.-38     	; 0x3d5e <ADS1015_readADC_Differential_0_1+0xf6>
    3d84:	14 c0       	rjmp	.+40     	; 0x3dae <ADS1015_readADC_Differential_0_1+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d86:	6f 81       	ldd	r22, Y+7	; 0x07
    3d88:	78 85       	ldd	r23, Y+8	; 0x08
    3d8a:	89 85       	ldd	r24, Y+9	; 0x09
    3d8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d8e:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <__fixunssfsi>
    3d92:	dc 01       	movw	r26, r24
    3d94:	cb 01       	movw	r24, r22
    3d96:	9e 83       	std	Y+6, r25	; 0x06
    3d98:	8d 83       	std	Y+5, r24	; 0x05
    3d9a:	8d 81       	ldd	r24, Y+5	; 0x05
    3d9c:	9e 81       	ldd	r25, Y+6	; 0x06
    3d9e:	9a 83       	std	Y+2, r25	; 0x02
    3da0:	89 83       	std	Y+1, r24	; 0x01
    3da2:	89 81       	ldd	r24, Y+1	; 0x01
    3da4:	9a 81       	ldd	r25, Y+2	; 0x02
    3da6:	01 97       	sbiw	r24, 0x01	; 1
    3da8:	f1 f7       	brne	.-4      	; 0x3da6 <ADS1015_readADC_Differential_0_1+0x13e>
    3daa:	9a 83       	std	Y+2, r25	; 0x02
    3dac:	89 83       	std	Y+1, r24	; 0x01

  // Read the conversion results
  uint16_t res = readRegister(ads->i2cAddress, ADS1015_REG_POINTER_CONVERT) >> ads->bitShift;
    3dae:	eb 89       	ldd	r30, Y+19	; 0x13
    3db0:	fc 89       	ldd	r31, Y+20	; 0x14
    3db2:	80 81       	ld	r24, Z
    3db4:	60 e0       	ldi	r22, 0x00	; 0
    3db6:	0e 94 b8 1c 	call	0x3970	; 0x3970 <readRegister>
    3dba:	9c 01       	movw	r18, r24
    3dbc:	eb 89       	ldd	r30, Y+19	; 0x13
    3dbe:	fc 89       	ldd	r31, Y+20	; 0x14
    3dc0:	82 81       	ldd	r24, Z+2	; 0x02
    3dc2:	88 2f       	mov	r24, r24
    3dc4:	90 e0       	ldi	r25, 0x00	; 0
    3dc6:	a9 01       	movw	r20, r18
    3dc8:	02 c0       	rjmp	.+4      	; 0x3dce <ADS1015_readADC_Differential_0_1+0x166>
    3dca:	56 95       	lsr	r21
    3dcc:	47 95       	ror	r20
    3dce:	8a 95       	dec	r24
    3dd0:	e2 f7       	brpl	.-8      	; 0x3dca <ADS1015_readADC_Differential_0_1+0x162>
    3dd2:	ca 01       	movw	r24, r20
    3dd4:	98 8b       	std	Y+16, r25	; 0x10
    3dd6:	8f 87       	std	Y+15, r24	; 0x0f
  if (ads->bitShift == 0)
    3dd8:	eb 89       	ldd	r30, Y+19	; 0x13
    3dda:	fc 89       	ldd	r31, Y+20	; 0x14
    3ddc:	82 81       	ldd	r24, Z+2	; 0x02
    3dde:	88 23       	and	r24, r24
    3de0:	29 f4       	brne	.+10     	; 0x3dec <ADS1015_readADC_Differential_0_1+0x184>
  {
    return (int16_t)res;
    3de2:	8f 85       	ldd	r24, Y+15	; 0x0f
    3de4:	98 89       	ldd	r25, Y+16	; 0x10
    3de6:	9e 8b       	std	Y+22, r25	; 0x16
    3de8:	8d 8b       	std	Y+21, r24	; 0x15
    3dea:	0f c0       	rjmp	.+30     	; 0x3e0a <ADS1015_readADC_Differential_0_1+0x1a2>
  }
  else
  {
    // Shift 12-bit results right 4 bits for the ADS1015,
    // making sure we keep the sign bit intact
    if (res > 0x07FF)
    3dec:	8f 85       	ldd	r24, Y+15	; 0x0f
    3dee:	98 89       	ldd	r25, Y+16	; 0x10
    3df0:	28 e0       	ldi	r18, 0x08	; 8
    3df2:	80 30       	cpi	r24, 0x00	; 0
    3df4:	92 07       	cpc	r25, r18
    3df6:	28 f0       	brcs	.+10     	; 0x3e02 <ADS1015_readADC_Differential_0_1+0x19a>
    {
      // negative number - extend the sign to 16th bit
      res |= 0xF000;
    3df8:	8f 85       	ldd	r24, Y+15	; 0x0f
    3dfa:	98 89       	ldd	r25, Y+16	; 0x10
    3dfc:	90 6f       	ori	r25, 0xF0	; 240
    3dfe:	98 8b       	std	Y+16, r25	; 0x10
    3e00:	8f 87       	std	Y+15, r24	; 0x0f
    }
    return (int16_t)res;
    3e02:	4f 85       	ldd	r20, Y+15	; 0x0f
    3e04:	58 89       	ldd	r21, Y+16	; 0x10
    3e06:	5e 8b       	std	Y+22, r21	; 0x16
    3e08:	4d 8b       	std	Y+21, r20	; 0x15
    3e0a:	8d 89       	ldd	r24, Y+21	; 0x15
    3e0c:	9e 89       	ldd	r25, Y+22	; 0x16
  }
}
    3e0e:	66 96       	adiw	r28, 0x16	; 22
    3e10:	0f b6       	in	r0, 0x3f	; 63
    3e12:	f8 94       	cli
    3e14:	de bf       	out	0x3e, r29	; 62
    3e16:	0f be       	out	0x3f, r0	; 63
    3e18:	cd bf       	out	0x3d, r28	; 61
    3e1a:	cf 91       	pop	r28
    3e1c:	df 91       	pop	r29
    3e1e:	08 95       	ret

00003e20 <ADS1015_readADC_Differential_2_3>:
            difference between the P (AIN2) and N (AIN3) input.  Generates
            a signed value since the difference can be either
            positive or negative.
*/
/**************************************************************************/
int16_t ADS1015_readADC_Differential_2_3(ADS1015* ads) {
    3e20:	df 93       	push	r29
    3e22:	cf 93       	push	r28
    3e24:	cd b7       	in	r28, 0x3d	; 61
    3e26:	de b7       	in	r29, 0x3e	; 62
    3e28:	66 97       	sbiw	r28, 0x16	; 22
    3e2a:	0f b6       	in	r0, 0x3f	; 63
    3e2c:	f8 94       	cli
    3e2e:	de bf       	out	0x3e, r29	; 62
    3e30:	0f be       	out	0x3f, r0	; 63
    3e32:	cd bf       	out	0x3d, r28	; 61
    3e34:	9c 8b       	std	Y+20, r25	; 0x14
    3e36:	8b 8b       	std	Y+19, r24	; 0x13
  uint16_t config = ADS1015_REG_CONFIG_CQUE_NONE    | // Disable the comparator (default val)
                    ADS1015_REG_CONFIG_CLAT_NONLAT  | // Non-latching (default val)
                    ADS1015_REG_CONFIG_CPOL_ACTVLOW | // Alert/Rdy active low   (default val)
                    ADS1015_REG_CONFIG_CMODE_TRAD   | // Traditional comparator (default val)
                    ADS1015_REG_CONFIG_DR_1600SPS   | // 1600 samples per second (default)
                    ADS1015_REG_CONFIG_MODE_SINGLE;   // Single-shot mode (default)
    3e38:	83 e8       	ldi	r24, 0x83	; 131
    3e3a:	91 e0       	ldi	r25, 0x01	; 1
    3e3c:	9a 8b       	std	Y+18, r25	; 0x12
    3e3e:	89 8b       	std	Y+17, r24	; 0x11

  // Set PGA/voltage range
  config |= ads->gain;
    3e40:	eb 89       	ldd	r30, Y+19	; 0x13
    3e42:	fc 89       	ldd	r31, Y+20	; 0x14
    3e44:	23 81       	ldd	r18, Z+3	; 0x03
    3e46:	34 81       	ldd	r19, Z+4	; 0x04
    3e48:	89 89       	ldd	r24, Y+17	; 0x11
    3e4a:	9a 89       	ldd	r25, Y+18	; 0x12
    3e4c:	82 2b       	or	r24, r18
    3e4e:	93 2b       	or	r25, r19
    3e50:	9a 8b       	std	Y+18, r25	; 0x12
    3e52:	89 8b       	std	Y+17, r24	; 0x11

  // Set channels
  config |= ADS1015_REG_CONFIG_MUX_DIFF_2_3;          // AIN2 = P, AIN3 = N
    3e54:	89 89       	ldd	r24, Y+17	; 0x11
    3e56:	9a 89       	ldd	r25, Y+18	; 0x12
    3e58:	90 63       	ori	r25, 0x30	; 48
    3e5a:	9a 8b       	std	Y+18, r25	; 0x12
    3e5c:	89 8b       	std	Y+17, r24	; 0x11

  // Set 'start single-conversion' bit
  config |= ADS1015_REG_CONFIG_OS_SINGLE;
    3e5e:	89 89       	ldd	r24, Y+17	; 0x11
    3e60:	9a 89       	ldd	r25, Y+18	; 0x12
    3e62:	90 68       	ori	r25, 0x80	; 128
    3e64:	9a 8b       	std	Y+18, r25	; 0x12
    3e66:	89 8b       	std	Y+17, r24	; 0x11

  // Write config register to the ADC
  writeRegister(ads->i2cAddress, ADS1015_REG_POINTER_CONFIG, config);
    3e68:	eb 89       	ldd	r30, Y+19	; 0x13
    3e6a:	fc 89       	ldd	r31, Y+20	; 0x14
    3e6c:	80 81       	ld	r24, Z
    3e6e:	29 89       	ldd	r18, Y+17	; 0x11
    3e70:	3a 89       	ldd	r19, Y+18	; 0x12
    3e72:	61 e0       	ldi	r22, 0x01	; 1
    3e74:	a9 01       	movw	r20, r18
    3e76:	0e 94 96 1c 	call	0x392c	; 0x392c <writeRegister>

  // Wait for the conversion to complete
  _delay_ms(ads->conversionDelay);
    3e7a:	eb 89       	ldd	r30, Y+19	; 0x13
    3e7c:	fc 89       	ldd	r31, Y+20	; 0x14
    3e7e:	81 81       	ldd	r24, Z+1	; 0x01
    3e80:	88 2f       	mov	r24, r24
    3e82:	90 e0       	ldi	r25, 0x00	; 0
    3e84:	a0 e0       	ldi	r26, 0x00	; 0
    3e86:	b0 e0       	ldi	r27, 0x00	; 0
    3e88:	bc 01       	movw	r22, r24
    3e8a:	cd 01       	movw	r24, r26
    3e8c:	0e 94 2b 26 	call	0x4c56	; 0x4c56 <__floatunsisf>
    3e90:	dc 01       	movw	r26, r24
    3e92:	cb 01       	movw	r24, r22
    3e94:	8b 87       	std	Y+11, r24	; 0x0b
    3e96:	9c 87       	std	Y+12, r25	; 0x0c
    3e98:	ad 87       	std	Y+13, r26	; 0x0d
    3e9a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e9c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e9e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ea0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ea2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ea4:	20 e0       	ldi	r18, 0x00	; 0
    3ea6:	30 e0       	ldi	r19, 0x00	; 0
    3ea8:	4a e7       	ldi	r20, 0x7A	; 122
    3eaa:	55 e4       	ldi	r21, 0x45	; 69
    3eac:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__mulsf3>
    3eb0:	dc 01       	movw	r26, r24
    3eb2:	cb 01       	movw	r24, r22
    3eb4:	8f 83       	std	Y+7, r24	; 0x07
    3eb6:	98 87       	std	Y+8, r25	; 0x08
    3eb8:	a9 87       	std	Y+9, r26	; 0x09
    3eba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3ebc:	6f 81       	ldd	r22, Y+7	; 0x07
    3ebe:	78 85       	ldd	r23, Y+8	; 0x08
    3ec0:	89 85       	ldd	r24, Y+9	; 0x09
    3ec2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ec4:	20 e0       	ldi	r18, 0x00	; 0
    3ec6:	30 e0       	ldi	r19, 0x00	; 0
    3ec8:	40 e8       	ldi	r20, 0x80	; 128
    3eca:	5f e3       	ldi	r21, 0x3F	; 63
    3ecc:	0e 94 93 25 	call	0x4b26	; 0x4b26 <__cmpsf2>
    3ed0:	88 23       	and	r24, r24
    3ed2:	2c f4       	brge	.+10     	; 0x3ede <ADS1015_readADC_Differential_2_3+0xbe>
		__ticks = 1;
    3ed4:	81 e0       	ldi	r24, 0x01	; 1
    3ed6:	90 e0       	ldi	r25, 0x00	; 0
    3ed8:	9e 83       	std	Y+6, r25	; 0x06
    3eda:	8d 83       	std	Y+5, r24	; 0x05
    3edc:	3f c0       	rjmp	.+126    	; 0x3f5c <ADS1015_readADC_Differential_2_3+0x13c>
	else if (__tmp > 65535)
    3ede:	6f 81       	ldd	r22, Y+7	; 0x07
    3ee0:	78 85       	ldd	r23, Y+8	; 0x08
    3ee2:	89 85       	ldd	r24, Y+9	; 0x09
    3ee4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ee6:	20 e0       	ldi	r18, 0x00	; 0
    3ee8:	3f ef       	ldi	r19, 0xFF	; 255
    3eea:	4f e7       	ldi	r20, 0x7F	; 127
    3eec:	57 e4       	ldi	r21, 0x47	; 71
    3eee:	0e 94 dd 26 	call	0x4dba	; 0x4dba <__gesf2>
    3ef2:	18 16       	cp	r1, r24
    3ef4:	4c f5       	brge	.+82     	; 0x3f48 <ADS1015_readADC_Differential_2_3+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ef6:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ef8:	7c 85       	ldd	r23, Y+12	; 0x0c
    3efa:	8d 85       	ldd	r24, Y+13	; 0x0d
    3efc:	9e 85       	ldd	r25, Y+14	; 0x0e
    3efe:	20 e0       	ldi	r18, 0x00	; 0
    3f00:	30 e0       	ldi	r19, 0x00	; 0
    3f02:	40 e2       	ldi	r20, 0x20	; 32
    3f04:	51 e4       	ldi	r21, 0x41	; 65
    3f06:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__mulsf3>
    3f0a:	dc 01       	movw	r26, r24
    3f0c:	cb 01       	movw	r24, r22
    3f0e:	bc 01       	movw	r22, r24
    3f10:	cd 01       	movw	r24, r26
    3f12:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <__fixunssfsi>
    3f16:	dc 01       	movw	r26, r24
    3f18:	cb 01       	movw	r24, r22
    3f1a:	9e 83       	std	Y+6, r25	; 0x06
    3f1c:	8d 83       	std	Y+5, r24	; 0x05
    3f1e:	0f c0       	rjmp	.+30     	; 0x3f3e <ADS1015_readADC_Differential_2_3+0x11e>
    3f20:	80 e9       	ldi	r24, 0x90	; 144
    3f22:	91 e0       	ldi	r25, 0x01	; 1
    3f24:	9c 83       	std	Y+4, r25	; 0x04
    3f26:	8b 83       	std	Y+3, r24	; 0x03
    3f28:	8b 81       	ldd	r24, Y+3	; 0x03
    3f2a:	9c 81       	ldd	r25, Y+4	; 0x04
    3f2c:	01 97       	sbiw	r24, 0x01	; 1
    3f2e:	f1 f7       	brne	.-4      	; 0x3f2c <ADS1015_readADC_Differential_2_3+0x10c>
    3f30:	9c 83       	std	Y+4, r25	; 0x04
    3f32:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f34:	8d 81       	ldd	r24, Y+5	; 0x05
    3f36:	9e 81       	ldd	r25, Y+6	; 0x06
    3f38:	01 97       	sbiw	r24, 0x01	; 1
    3f3a:	9e 83       	std	Y+6, r25	; 0x06
    3f3c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f3e:	8d 81       	ldd	r24, Y+5	; 0x05
    3f40:	9e 81       	ldd	r25, Y+6	; 0x06
    3f42:	00 97       	sbiw	r24, 0x00	; 0
    3f44:	69 f7       	brne	.-38     	; 0x3f20 <ADS1015_readADC_Differential_2_3+0x100>
    3f46:	14 c0       	rjmp	.+40     	; 0x3f70 <ADS1015_readADC_Differential_2_3+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f48:	6f 81       	ldd	r22, Y+7	; 0x07
    3f4a:	78 85       	ldd	r23, Y+8	; 0x08
    3f4c:	89 85       	ldd	r24, Y+9	; 0x09
    3f4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f50:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <__fixunssfsi>
    3f54:	dc 01       	movw	r26, r24
    3f56:	cb 01       	movw	r24, r22
    3f58:	9e 83       	std	Y+6, r25	; 0x06
    3f5a:	8d 83       	std	Y+5, r24	; 0x05
    3f5c:	8d 81       	ldd	r24, Y+5	; 0x05
    3f5e:	9e 81       	ldd	r25, Y+6	; 0x06
    3f60:	9a 83       	std	Y+2, r25	; 0x02
    3f62:	89 83       	std	Y+1, r24	; 0x01
    3f64:	89 81       	ldd	r24, Y+1	; 0x01
    3f66:	9a 81       	ldd	r25, Y+2	; 0x02
    3f68:	01 97       	sbiw	r24, 0x01	; 1
    3f6a:	f1 f7       	brne	.-4      	; 0x3f68 <ADS1015_readADC_Differential_2_3+0x148>
    3f6c:	9a 83       	std	Y+2, r25	; 0x02
    3f6e:	89 83       	std	Y+1, r24	; 0x01

  // Read the conversion results
  uint16_t res = readRegister(ads->i2cAddress, ADS1015_REG_POINTER_CONVERT) >> ads->bitShift;
    3f70:	eb 89       	ldd	r30, Y+19	; 0x13
    3f72:	fc 89       	ldd	r31, Y+20	; 0x14
    3f74:	80 81       	ld	r24, Z
    3f76:	60 e0       	ldi	r22, 0x00	; 0
    3f78:	0e 94 b8 1c 	call	0x3970	; 0x3970 <readRegister>
    3f7c:	9c 01       	movw	r18, r24
    3f7e:	eb 89       	ldd	r30, Y+19	; 0x13
    3f80:	fc 89       	ldd	r31, Y+20	; 0x14
    3f82:	82 81       	ldd	r24, Z+2	; 0x02
    3f84:	88 2f       	mov	r24, r24
    3f86:	90 e0       	ldi	r25, 0x00	; 0
    3f88:	a9 01       	movw	r20, r18
    3f8a:	02 c0       	rjmp	.+4      	; 0x3f90 <ADS1015_readADC_Differential_2_3+0x170>
    3f8c:	56 95       	lsr	r21
    3f8e:	47 95       	ror	r20
    3f90:	8a 95       	dec	r24
    3f92:	e2 f7       	brpl	.-8      	; 0x3f8c <ADS1015_readADC_Differential_2_3+0x16c>
    3f94:	ca 01       	movw	r24, r20
    3f96:	98 8b       	std	Y+16, r25	; 0x10
    3f98:	8f 87       	std	Y+15, r24	; 0x0f
  if (ads->bitShift == 0)
    3f9a:	eb 89       	ldd	r30, Y+19	; 0x13
    3f9c:	fc 89       	ldd	r31, Y+20	; 0x14
    3f9e:	82 81       	ldd	r24, Z+2	; 0x02
    3fa0:	88 23       	and	r24, r24
    3fa2:	29 f4       	brne	.+10     	; 0x3fae <ADS1015_readADC_Differential_2_3+0x18e>
  {
    return (int16_t)res;
    3fa4:	8f 85       	ldd	r24, Y+15	; 0x0f
    3fa6:	98 89       	ldd	r25, Y+16	; 0x10
    3fa8:	9e 8b       	std	Y+22, r25	; 0x16
    3faa:	8d 8b       	std	Y+21, r24	; 0x15
    3fac:	0f c0       	rjmp	.+30     	; 0x3fcc <ADS1015_readADC_Differential_2_3+0x1ac>
  }
  else
  {
    // Shift 12-bit results right 4 bits for the ADS1015,
    // making sure we keep the sign bit intact
    if (res > 0x07FF)
    3fae:	8f 85       	ldd	r24, Y+15	; 0x0f
    3fb0:	98 89       	ldd	r25, Y+16	; 0x10
    3fb2:	28 e0       	ldi	r18, 0x08	; 8
    3fb4:	80 30       	cpi	r24, 0x00	; 0
    3fb6:	92 07       	cpc	r25, r18
    3fb8:	28 f0       	brcs	.+10     	; 0x3fc4 <ADS1015_readADC_Differential_2_3+0x1a4>
    {
      // negative number - extend the sign to 16th bit
      res |= 0xF000;
    3fba:	8f 85       	ldd	r24, Y+15	; 0x0f
    3fbc:	98 89       	ldd	r25, Y+16	; 0x10
    3fbe:	90 6f       	ori	r25, 0xF0	; 240
    3fc0:	98 8b       	std	Y+16, r25	; 0x10
    3fc2:	8f 87       	std	Y+15, r24	; 0x0f
    }
    return (int16_t)res;
    3fc4:	4f 85       	ldd	r20, Y+15	; 0x0f
    3fc6:	58 89       	ldd	r21, Y+16	; 0x10
    3fc8:	5e 8b       	std	Y+22, r21	; 0x16
    3fca:	4d 8b       	std	Y+21, r20	; 0x15
    3fcc:	8d 89       	ldd	r24, Y+21	; 0x15
    3fce:	9e 89       	ldd	r25, Y+22	; 0x16
  }
}
    3fd0:	66 96       	adiw	r28, 0x16	; 22
    3fd2:	0f b6       	in	r0, 0x3f	; 63
    3fd4:	f8 94       	cli
    3fd6:	de bf       	out	0x3e, r29	; 62
    3fd8:	0f be       	out	0x3f, r0	; 63
    3fda:	cd bf       	out	0x3d, r28	; 61
    3fdc:	cf 91       	pop	r28
    3fde:	df 91       	pop	r29
    3fe0:	08 95       	ret

00003fe2 <ADS1015_startComparator_SingleEnded>:

            This will also set the ADC in continuous conversion mode.
*/
/**************************************************************************/
void ADS1015_startComparator_SingleEnded(ADS1015* ads, uint8_t channel, int16_t threshold)
{
    3fe2:	df 93       	push	r29
    3fe4:	cf 93       	push	r28
    3fe6:	cd b7       	in	r28, 0x3d	; 61
    3fe8:	de b7       	in	r29, 0x3e	; 62
    3fea:	29 97       	sbiw	r28, 0x09	; 9
    3fec:	0f b6       	in	r0, 0x3f	; 63
    3fee:	f8 94       	cli
    3ff0:	de bf       	out	0x3e, r29	; 62
    3ff2:	0f be       	out	0x3f, r0	; 63
    3ff4:	cd bf       	out	0x3d, r28	; 61
    3ff6:	9c 83       	std	Y+4, r25	; 0x04
    3ff8:	8b 83       	std	Y+3, r24	; 0x03
    3ffa:	6d 83       	std	Y+5, r22	; 0x05
    3ffc:	5f 83       	std	Y+7, r21	; 0x07
    3ffe:	4e 83       	std	Y+6, r20	; 0x06
                    ADS1015_REG_CONFIG_CLAT_LATCH   | // Latching mode
                    ADS1015_REG_CONFIG_CPOL_ACTVLOW | // Alert/Rdy active low   (default val)
                    ADS1015_REG_CONFIG_CMODE_TRAD   | // Traditional comparator (default val)
                    ADS1015_REG_CONFIG_DR_1600SPS   | // 1600 samples per second (default)
                    ADS1015_REG_CONFIG_MODE_CONTIN  | // Continuous conversion mode
                    ADS1015_REG_CONFIG_MODE_CONTIN;   // Continuous conversion mode
    4000:	84 e8       	ldi	r24, 0x84	; 132
    4002:	90 e0       	ldi	r25, 0x00	; 0
    4004:	9a 83       	std	Y+2, r25	; 0x02
    4006:	89 83       	std	Y+1, r24	; 0x01

  // Set PGA/voltage range
  config |= ads->gain;
    4008:	eb 81       	ldd	r30, Y+3	; 0x03
    400a:	fc 81       	ldd	r31, Y+4	; 0x04
    400c:	23 81       	ldd	r18, Z+3	; 0x03
    400e:	34 81       	ldd	r19, Z+4	; 0x04
    4010:	89 81       	ldd	r24, Y+1	; 0x01
    4012:	9a 81       	ldd	r25, Y+2	; 0x02
    4014:	82 2b       	or	r24, r18
    4016:	93 2b       	or	r25, r19
    4018:	9a 83       	std	Y+2, r25	; 0x02
    401a:	89 83       	std	Y+1, r24	; 0x01

  // Set single-ended input channel
  switch (channel)
    401c:	8d 81       	ldd	r24, Y+5	; 0x05
    401e:	28 2f       	mov	r18, r24
    4020:	30 e0       	ldi	r19, 0x00	; 0
    4022:	39 87       	std	Y+9, r19	; 0x09
    4024:	28 87       	std	Y+8, r18	; 0x08
    4026:	88 85       	ldd	r24, Y+8	; 0x08
    4028:	99 85       	ldd	r25, Y+9	; 0x09
    402a:	81 30       	cpi	r24, 0x01	; 1
    402c:	91 05       	cpc	r25, r1
    402e:	d9 f0       	breq	.+54     	; 0x4066 <ADS1015_startComparator_SingleEnded+0x84>
    4030:	28 85       	ldd	r18, Y+8	; 0x08
    4032:	39 85       	ldd	r19, Y+9	; 0x09
    4034:	22 30       	cpi	r18, 0x02	; 2
    4036:	31 05       	cpc	r19, r1
    4038:	2c f4       	brge	.+10     	; 0x4044 <ADS1015_startComparator_SingleEnded+0x62>
    403a:	88 85       	ldd	r24, Y+8	; 0x08
    403c:	99 85       	ldd	r25, Y+9	; 0x09
    403e:	00 97       	sbiw	r24, 0x00	; 0
    4040:	61 f0       	breq	.+24     	; 0x405a <ADS1015_startComparator_SingleEnded+0x78>
    4042:	22 c0       	rjmp	.+68     	; 0x4088 <ADS1015_startComparator_SingleEnded+0xa6>
    4044:	28 85       	ldd	r18, Y+8	; 0x08
    4046:	39 85       	ldd	r19, Y+9	; 0x09
    4048:	22 30       	cpi	r18, 0x02	; 2
    404a:	31 05       	cpc	r19, r1
    404c:	91 f0       	breq	.+36     	; 0x4072 <ADS1015_startComparator_SingleEnded+0x90>
    404e:	88 85       	ldd	r24, Y+8	; 0x08
    4050:	99 85       	ldd	r25, Y+9	; 0x09
    4052:	83 30       	cpi	r24, 0x03	; 3
    4054:	91 05       	cpc	r25, r1
    4056:	99 f0       	breq	.+38     	; 0x407e <ADS1015_startComparator_SingleEnded+0x9c>
    4058:	17 c0       	rjmp	.+46     	; 0x4088 <ADS1015_startComparator_SingleEnded+0xa6>
  {
    case (0):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_0;
    405a:	89 81       	ldd	r24, Y+1	; 0x01
    405c:	9a 81       	ldd	r25, Y+2	; 0x02
    405e:	90 64       	ori	r25, 0x40	; 64
    4060:	9a 83       	std	Y+2, r25	; 0x02
    4062:	89 83       	std	Y+1, r24	; 0x01
    4064:	11 c0       	rjmp	.+34     	; 0x4088 <ADS1015_startComparator_SingleEnded+0xa6>
      break;
    case (1):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_1;
    4066:	89 81       	ldd	r24, Y+1	; 0x01
    4068:	9a 81       	ldd	r25, Y+2	; 0x02
    406a:	90 65       	ori	r25, 0x50	; 80
    406c:	9a 83       	std	Y+2, r25	; 0x02
    406e:	89 83       	std	Y+1, r24	; 0x01
    4070:	0b c0       	rjmp	.+22     	; 0x4088 <ADS1015_startComparator_SingleEnded+0xa6>
      break;
    case (2):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_2;
    4072:	89 81       	ldd	r24, Y+1	; 0x01
    4074:	9a 81       	ldd	r25, Y+2	; 0x02
    4076:	90 66       	ori	r25, 0x60	; 96
    4078:	9a 83       	std	Y+2, r25	; 0x02
    407a:	89 83       	std	Y+1, r24	; 0x01
    407c:	05 c0       	rjmp	.+10     	; 0x4088 <ADS1015_startComparator_SingleEnded+0xa6>
      break;
    case (3):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_3;
    407e:	89 81       	ldd	r24, Y+1	; 0x01
    4080:	9a 81       	ldd	r25, Y+2	; 0x02
    4082:	90 67       	ori	r25, 0x70	; 112
    4084:	9a 83       	std	Y+2, r25	; 0x02
    4086:	89 83       	std	Y+1, r24	; 0x01
      break;
  }

  // Set the high threshold register
  // Shift 12-bit results left 4 bits for the ADS1015
  writeRegister(ads->i2cAddress, ADS1015_REG_POINTER_HITHRESH, threshold << ads->bitShift);
    4088:	eb 81       	ldd	r30, Y+3	; 0x03
    408a:	fc 81       	ldd	r31, Y+4	; 0x04
    408c:	40 81       	ld	r20, Z
    408e:	eb 81       	ldd	r30, Y+3	; 0x03
    4090:	fc 81       	ldd	r31, Y+4	; 0x04
    4092:	82 81       	ldd	r24, Z+2	; 0x02
    4094:	28 2f       	mov	r18, r24
    4096:	30 e0       	ldi	r19, 0x00	; 0
    4098:	8e 81       	ldd	r24, Y+6	; 0x06
    409a:	9f 81       	ldd	r25, Y+7	; 0x07
    409c:	02 c0       	rjmp	.+4      	; 0x40a2 <ADS1015_startComparator_SingleEnded+0xc0>
    409e:	88 0f       	add	r24, r24
    40a0:	99 1f       	adc	r25, r25
    40a2:	2a 95       	dec	r18
    40a4:	e2 f7       	brpl	.-8      	; 0x409e <ADS1015_startComparator_SingleEnded+0xbc>
    40a6:	9c 01       	movw	r18, r24
    40a8:	84 2f       	mov	r24, r20
    40aa:	63 e0       	ldi	r22, 0x03	; 3
    40ac:	a9 01       	movw	r20, r18
    40ae:	0e 94 96 1c 	call	0x392c	; 0x392c <writeRegister>

  // Write config register to the ADC
  writeRegister(ads->i2cAddress, ADS1015_REG_POINTER_CONFIG, config);
    40b2:	eb 81       	ldd	r30, Y+3	; 0x03
    40b4:	fc 81       	ldd	r31, Y+4	; 0x04
    40b6:	80 81       	ld	r24, Z
    40b8:	29 81       	ldd	r18, Y+1	; 0x01
    40ba:	3a 81       	ldd	r19, Y+2	; 0x02
    40bc:	61 e0       	ldi	r22, 0x01	; 1
    40be:	a9 01       	movw	r20, r18
    40c0:	0e 94 96 1c 	call	0x392c	; 0x392c <writeRegister>
}
    40c4:	29 96       	adiw	r28, 0x09	; 9
    40c6:	0f b6       	in	r0, 0x3f	; 63
    40c8:	f8 94       	cli
    40ca:	de bf       	out	0x3e, r29	; 62
    40cc:	0f be       	out	0x3f, r0	; 63
    40ce:	cd bf       	out	0x3d, r28	; 61
    40d0:	cf 91       	pop	r28
    40d2:	df 91       	pop	r29
    40d4:	08 95       	ret

000040d6 <ADS1015_getLastConversionResults>:
            conversion results.  This function reads the last conversion
            results without changing the config value.
*/
/**************************************************************************/
int16_t ADS1015_getLastConversionResults(ADS1015* ads)
{
    40d6:	df 93       	push	r29
    40d8:	cf 93       	push	r28
    40da:	cd b7       	in	r28, 0x3d	; 61
    40dc:	de b7       	in	r29, 0x3e	; 62
    40de:	64 97       	sbiw	r28, 0x14	; 20
    40e0:	0f b6       	in	r0, 0x3f	; 63
    40e2:	f8 94       	cli
    40e4:	de bf       	out	0x3e, r29	; 62
    40e6:	0f be       	out	0x3f, r0	; 63
    40e8:	cd bf       	out	0x3d, r28	; 61
    40ea:	9a 8b       	std	Y+18, r25	; 0x12
    40ec:	89 8b       	std	Y+17, r24	; 0x11
  // Wait for the conversion to complete
  _delay_ms(ads->conversionDelay);
    40ee:	e9 89       	ldd	r30, Y+17	; 0x11
    40f0:	fa 89       	ldd	r31, Y+18	; 0x12
    40f2:	81 81       	ldd	r24, Z+1	; 0x01
    40f4:	88 2f       	mov	r24, r24
    40f6:	90 e0       	ldi	r25, 0x00	; 0
    40f8:	a0 e0       	ldi	r26, 0x00	; 0
    40fa:	b0 e0       	ldi	r27, 0x00	; 0
    40fc:	bc 01       	movw	r22, r24
    40fe:	cd 01       	movw	r24, r26
    4100:	0e 94 2b 26 	call	0x4c56	; 0x4c56 <__floatunsisf>
    4104:	dc 01       	movw	r26, r24
    4106:	cb 01       	movw	r24, r22
    4108:	8b 87       	std	Y+11, r24	; 0x0b
    410a:	9c 87       	std	Y+12, r25	; 0x0c
    410c:	ad 87       	std	Y+13, r26	; 0x0d
    410e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4110:	6b 85       	ldd	r22, Y+11	; 0x0b
    4112:	7c 85       	ldd	r23, Y+12	; 0x0c
    4114:	8d 85       	ldd	r24, Y+13	; 0x0d
    4116:	9e 85       	ldd	r25, Y+14	; 0x0e
    4118:	20 e0       	ldi	r18, 0x00	; 0
    411a:	30 e0       	ldi	r19, 0x00	; 0
    411c:	4a e7       	ldi	r20, 0x7A	; 122
    411e:	55 e4       	ldi	r21, 0x45	; 69
    4120:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__mulsf3>
    4124:	dc 01       	movw	r26, r24
    4126:	cb 01       	movw	r24, r22
    4128:	8f 83       	std	Y+7, r24	; 0x07
    412a:	98 87       	std	Y+8, r25	; 0x08
    412c:	a9 87       	std	Y+9, r26	; 0x09
    412e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4130:	6f 81       	ldd	r22, Y+7	; 0x07
    4132:	78 85       	ldd	r23, Y+8	; 0x08
    4134:	89 85       	ldd	r24, Y+9	; 0x09
    4136:	9a 85       	ldd	r25, Y+10	; 0x0a
    4138:	20 e0       	ldi	r18, 0x00	; 0
    413a:	30 e0       	ldi	r19, 0x00	; 0
    413c:	40 e8       	ldi	r20, 0x80	; 128
    413e:	5f e3       	ldi	r21, 0x3F	; 63
    4140:	0e 94 93 25 	call	0x4b26	; 0x4b26 <__cmpsf2>
    4144:	88 23       	and	r24, r24
    4146:	2c f4       	brge	.+10     	; 0x4152 <ADS1015_getLastConversionResults+0x7c>
		__ticks = 1;
    4148:	81 e0       	ldi	r24, 0x01	; 1
    414a:	90 e0       	ldi	r25, 0x00	; 0
    414c:	9e 83       	std	Y+6, r25	; 0x06
    414e:	8d 83       	std	Y+5, r24	; 0x05
    4150:	3f c0       	rjmp	.+126    	; 0x41d0 <ADS1015_getLastConversionResults+0xfa>
	else if (__tmp > 65535)
    4152:	6f 81       	ldd	r22, Y+7	; 0x07
    4154:	78 85       	ldd	r23, Y+8	; 0x08
    4156:	89 85       	ldd	r24, Y+9	; 0x09
    4158:	9a 85       	ldd	r25, Y+10	; 0x0a
    415a:	20 e0       	ldi	r18, 0x00	; 0
    415c:	3f ef       	ldi	r19, 0xFF	; 255
    415e:	4f e7       	ldi	r20, 0x7F	; 127
    4160:	57 e4       	ldi	r21, 0x47	; 71
    4162:	0e 94 dd 26 	call	0x4dba	; 0x4dba <__gesf2>
    4166:	18 16       	cp	r1, r24
    4168:	4c f5       	brge	.+82     	; 0x41bc <ADS1015_getLastConversionResults+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    416a:	6b 85       	ldd	r22, Y+11	; 0x0b
    416c:	7c 85       	ldd	r23, Y+12	; 0x0c
    416e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4170:	9e 85       	ldd	r25, Y+14	; 0x0e
    4172:	20 e0       	ldi	r18, 0x00	; 0
    4174:	30 e0       	ldi	r19, 0x00	; 0
    4176:	40 e2       	ldi	r20, 0x20	; 32
    4178:	51 e4       	ldi	r21, 0x41	; 65
    417a:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__mulsf3>
    417e:	dc 01       	movw	r26, r24
    4180:	cb 01       	movw	r24, r22
    4182:	bc 01       	movw	r22, r24
    4184:	cd 01       	movw	r24, r26
    4186:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <__fixunssfsi>
    418a:	dc 01       	movw	r26, r24
    418c:	cb 01       	movw	r24, r22
    418e:	9e 83       	std	Y+6, r25	; 0x06
    4190:	8d 83       	std	Y+5, r24	; 0x05
    4192:	0f c0       	rjmp	.+30     	; 0x41b2 <ADS1015_getLastConversionResults+0xdc>
    4194:	80 e9       	ldi	r24, 0x90	; 144
    4196:	91 e0       	ldi	r25, 0x01	; 1
    4198:	9c 83       	std	Y+4, r25	; 0x04
    419a:	8b 83       	std	Y+3, r24	; 0x03
    419c:	8b 81       	ldd	r24, Y+3	; 0x03
    419e:	9c 81       	ldd	r25, Y+4	; 0x04
    41a0:	01 97       	sbiw	r24, 0x01	; 1
    41a2:	f1 f7       	brne	.-4      	; 0x41a0 <ADS1015_getLastConversionResults+0xca>
    41a4:	9c 83       	std	Y+4, r25	; 0x04
    41a6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41a8:	8d 81       	ldd	r24, Y+5	; 0x05
    41aa:	9e 81       	ldd	r25, Y+6	; 0x06
    41ac:	01 97       	sbiw	r24, 0x01	; 1
    41ae:	9e 83       	std	Y+6, r25	; 0x06
    41b0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41b2:	8d 81       	ldd	r24, Y+5	; 0x05
    41b4:	9e 81       	ldd	r25, Y+6	; 0x06
    41b6:	00 97       	sbiw	r24, 0x00	; 0
    41b8:	69 f7       	brne	.-38     	; 0x4194 <ADS1015_getLastConversionResults+0xbe>
    41ba:	14 c0       	rjmp	.+40     	; 0x41e4 <ADS1015_getLastConversionResults+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41bc:	6f 81       	ldd	r22, Y+7	; 0x07
    41be:	78 85       	ldd	r23, Y+8	; 0x08
    41c0:	89 85       	ldd	r24, Y+9	; 0x09
    41c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    41c4:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <__fixunssfsi>
    41c8:	dc 01       	movw	r26, r24
    41ca:	cb 01       	movw	r24, r22
    41cc:	9e 83       	std	Y+6, r25	; 0x06
    41ce:	8d 83       	std	Y+5, r24	; 0x05
    41d0:	8d 81       	ldd	r24, Y+5	; 0x05
    41d2:	9e 81       	ldd	r25, Y+6	; 0x06
    41d4:	9a 83       	std	Y+2, r25	; 0x02
    41d6:	89 83       	std	Y+1, r24	; 0x01
    41d8:	89 81       	ldd	r24, Y+1	; 0x01
    41da:	9a 81       	ldd	r25, Y+2	; 0x02
    41dc:	01 97       	sbiw	r24, 0x01	; 1
    41de:	f1 f7       	brne	.-4      	; 0x41dc <ADS1015_getLastConversionResults+0x106>
    41e0:	9a 83       	std	Y+2, r25	; 0x02
    41e2:	89 83       	std	Y+1, r24	; 0x01

  // Read the conversion results
  uint16_t res = readRegister(ads->i2cAddress, ADS1015_REG_POINTER_CONVERT) >> ads->bitShift;
    41e4:	e9 89       	ldd	r30, Y+17	; 0x11
    41e6:	fa 89       	ldd	r31, Y+18	; 0x12
    41e8:	80 81       	ld	r24, Z
    41ea:	60 e0       	ldi	r22, 0x00	; 0
    41ec:	0e 94 b8 1c 	call	0x3970	; 0x3970 <readRegister>
    41f0:	9c 01       	movw	r18, r24
    41f2:	e9 89       	ldd	r30, Y+17	; 0x11
    41f4:	fa 89       	ldd	r31, Y+18	; 0x12
    41f6:	82 81       	ldd	r24, Z+2	; 0x02
    41f8:	88 2f       	mov	r24, r24
    41fa:	90 e0       	ldi	r25, 0x00	; 0
    41fc:	a9 01       	movw	r20, r18
    41fe:	02 c0       	rjmp	.+4      	; 0x4204 <ADS1015_getLastConversionResults+0x12e>
    4200:	56 95       	lsr	r21
    4202:	47 95       	ror	r20
    4204:	8a 95       	dec	r24
    4206:	e2 f7       	brpl	.-8      	; 0x4200 <ADS1015_getLastConversionResults+0x12a>
    4208:	ca 01       	movw	r24, r20
    420a:	98 8b       	std	Y+16, r25	; 0x10
    420c:	8f 87       	std	Y+15, r24	; 0x0f
  if (ads->bitShift == 0)
    420e:	e9 89       	ldd	r30, Y+17	; 0x11
    4210:	fa 89       	ldd	r31, Y+18	; 0x12
    4212:	82 81       	ldd	r24, Z+2	; 0x02
    4214:	88 23       	and	r24, r24
    4216:	29 f4       	brne	.+10     	; 0x4222 <ADS1015_getLastConversionResults+0x14c>
  {
    return (int16_t)res;
    4218:	8f 85       	ldd	r24, Y+15	; 0x0f
    421a:	98 89       	ldd	r25, Y+16	; 0x10
    421c:	9c 8b       	std	Y+20, r25	; 0x14
    421e:	8b 8b       	std	Y+19, r24	; 0x13
    4220:	0f c0       	rjmp	.+30     	; 0x4240 <ADS1015_getLastConversionResults+0x16a>
  }
  else
  {
    // Shift 12-bit results right 4 bits for the ADS1015,
    // making sure we keep the sign bit intact
    if (res > 0x07FF)
    4222:	8f 85       	ldd	r24, Y+15	; 0x0f
    4224:	98 89       	ldd	r25, Y+16	; 0x10
    4226:	28 e0       	ldi	r18, 0x08	; 8
    4228:	80 30       	cpi	r24, 0x00	; 0
    422a:	92 07       	cpc	r25, r18
    422c:	28 f0       	brcs	.+10     	; 0x4238 <ADS1015_getLastConversionResults+0x162>
    {
      // negative number - extend the sign to 16th bit
      res |= 0xF000;
    422e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4230:	98 89       	ldd	r25, Y+16	; 0x10
    4232:	90 6f       	ori	r25, 0xF0	; 240
    4234:	98 8b       	std	Y+16, r25	; 0x10
    4236:	8f 87       	std	Y+15, r24	; 0x0f
    }
    return (int16_t)res;
    4238:	4f 85       	ldd	r20, Y+15	; 0x0f
    423a:	58 89       	ldd	r21, Y+16	; 0x10
    423c:	5c 8b       	std	Y+20, r21	; 0x14
    423e:	4b 8b       	std	Y+19, r20	; 0x13
    4240:	8b 89       	ldd	r24, Y+19	; 0x13
    4242:	9c 89       	ldd	r25, Y+20	; 0x14
  }
}
    4244:	64 96       	adiw	r28, 0x14	; 20
    4246:	0f b6       	in	r0, 0x3f	; 63
    4248:	f8 94       	cli
    424a:	de bf       	out	0x3e, r29	; 62
    424c:	0f be       	out	0x3f, r0	; 63
    424e:	cd bf       	out	0x3d, r28	; 61
    4250:	cf 91       	pop	r28
    4252:	df 91       	pop	r29
    4254:	08 95       	ret

00004256 <main>:
/*______________________________________________________________________________
 |                                Main Function                                 |
 |______________________________________________________________________________|
 */

int main(void){
    4256:	df 93       	push	r29
    4258:	cf 93       	push	r28
    425a:	cd b7       	in	r28, 0x3d	; 61
    425c:	de b7       	in	r29, 0x3e	; 62
    425e:	c9 56       	subi	r28, 0x69	; 105
    4260:	d0 40       	sbci	r29, 0x00	; 0
    4262:	0f b6       	in	r0, 0x3f	; 63
    4264:	f8 94       	cli
    4266:	de bf       	out	0x3e, r29	; 62
    4268:	0f be       	out	0x3f, r0	; 63
    426a:	cd bf       	out	0x3d, r28	; 61

	/* Local Variables */
	ADC_ConfigType  ADC_MyConfig = {Ext_AVCC , PRESCALER_128}; /* ADC Configuration */
    426c:	fe 01       	movw	r30, r28
    426e:	e3 5b       	subi	r30, 0xB3	; 179
    4270:	ff 4f       	sbci	r31, 0xFF	; 255
    4272:	81 e0       	ldi	r24, 0x01	; 1
    4274:	80 83       	st	Z, r24
    4276:	fe 01       	movw	r30, r28
    4278:	e3 5b       	subi	r30, 0xB3	; 179
    427a:	ff 4f       	sbci	r31, 0xFF	; 255
    427c:	87 e0       	ldi	r24, 0x07	; 7
    427e:	81 83       	std	Z+1, r24	; 0x01
	ADS1015 ads; /* ADS1015 Configuration */

	float resistance, voltage, capacitance, inductance, current; /* Measurement variables */

	uint8 ohmSymbol[] = {0x0E, 0x11, 0x11, 0x11, 0x1B, 0x0A, 0x1B}; /* Custom symbol for Ohms */
    4280:	ce 01       	movw	r24, r28
    4282:	8c 5a       	subi	r24, 0xAC	; 172
    4284:	9f 4f       	sbci	r25, 0xFF	; 255
    4286:	a7 96       	adiw	r28, 0x27	; 39
    4288:	9f af       	std	Y+63, r25	; 0x3f
    428a:	8e af       	std	Y+62, r24	; 0x3e
    428c:	a7 97       	sbiw	r28, 0x27	; 39
    428e:	2a e2       	ldi	r18, 0x2A	; 42
    4290:	31 e0       	ldi	r19, 0x01	; 1
    4292:	a9 96       	adiw	r28, 0x29	; 41
    4294:	3f af       	std	Y+63, r19	; 0x3f
    4296:	2e af       	std	Y+62, r18	; 0x3e
    4298:	a9 97       	sbiw	r28, 0x29	; 41
    429a:	37 e0       	ldi	r19, 0x07	; 7
    429c:	aa 96       	adiw	r28, 0x2a	; 42
    429e:	3f af       	std	Y+63, r19	; 0x3f
    42a0:	aa 97       	sbiw	r28, 0x2a	; 42
    42a2:	a9 96       	adiw	r28, 0x29	; 41
    42a4:	ee ad       	ldd	r30, Y+62	; 0x3e
    42a6:	ff ad       	ldd	r31, Y+63	; 0x3f
    42a8:	a9 97       	sbiw	r28, 0x29	; 41
    42aa:	00 80       	ld	r0, Z
    42ac:	a9 96       	adiw	r28, 0x29	; 41
    42ae:	2e ad       	ldd	r18, Y+62	; 0x3e
    42b0:	3f ad       	ldd	r19, Y+63	; 0x3f
    42b2:	a9 97       	sbiw	r28, 0x29	; 41
    42b4:	2f 5f       	subi	r18, 0xFF	; 255
    42b6:	3f 4f       	sbci	r19, 0xFF	; 255
    42b8:	a9 96       	adiw	r28, 0x29	; 41
    42ba:	3f af       	std	Y+63, r19	; 0x3f
    42bc:	2e af       	std	Y+62, r18	; 0x3e
    42be:	a9 97       	sbiw	r28, 0x29	; 41
    42c0:	a7 96       	adiw	r28, 0x27	; 39
    42c2:	ee ad       	ldd	r30, Y+62	; 0x3e
    42c4:	ff ad       	ldd	r31, Y+63	; 0x3f
    42c6:	a7 97       	sbiw	r28, 0x27	; 39
    42c8:	00 82       	st	Z, r0
    42ca:	a7 96       	adiw	r28, 0x27	; 39
    42cc:	2e ad       	ldd	r18, Y+62	; 0x3e
    42ce:	3f ad       	ldd	r19, Y+63	; 0x3f
    42d0:	a7 97       	sbiw	r28, 0x27	; 39
    42d2:	2f 5f       	subi	r18, 0xFF	; 255
    42d4:	3f 4f       	sbci	r19, 0xFF	; 255
    42d6:	a7 96       	adiw	r28, 0x27	; 39
    42d8:	3f af       	std	Y+63, r19	; 0x3f
    42da:	2e af       	std	Y+62, r18	; 0x3e
    42dc:	a7 97       	sbiw	r28, 0x27	; 39
    42de:	aa 96       	adiw	r28, 0x2a	; 42
    42e0:	3f ad       	ldd	r19, Y+63	; 0x3f
    42e2:	aa 97       	sbiw	r28, 0x2a	; 42
    42e4:	31 50       	subi	r19, 0x01	; 1
    42e6:	aa 96       	adiw	r28, 0x2a	; 42
    42e8:	3f af       	std	Y+63, r19	; 0x3f
    42ea:	aa 97       	sbiw	r28, 0x2a	; 42
    42ec:	aa 96       	adiw	r28, 0x2a	; 42
    42ee:	8f ad       	ldd	r24, Y+63	; 0x3f
    42f0:	aa 97       	sbiw	r28, 0x2a	; 42
    42f2:	88 23       	and	r24, r24
    42f4:	b1 f6       	brne	.-84     	; 0x42a2 <main+0x4c>

	OHMMETER_unitType resistanceUnit; /* Resistance unit */
	CAPACITANCE_unitType capacitanceUnit = NO_SCALE; /* Capacitance unit */
    42f6:	fe 01       	movw	r30, r28
    42f8:	e4 5a       	subi	r30, 0xA4	; 164
    42fa:	ff 4f       	sbci	r31, 0xFF	; 255
    42fc:	85 e0       	ldi	r24, 0x05	; 5
    42fe:	80 83       	st	Z, r24

	Mode_type currentMode, previousMode = NO_MODE; /* Mode selection */
    4300:	fe 01       	movw	r30, r28
    4302:	e2 5a       	subi	r30, 0xA2	; 162
    4304:	ff 4f       	sbci	r31, 0xFF	; 255
    4306:	85 e0       	ldi	r24, 0x05	; 5
    4308:	80 83       	st	Z, r24

	/* Enable global interrupts */
	SREG |= 1<<7;
    430a:	af e5       	ldi	r26, 0x5F	; 95
    430c:	b0 e0       	ldi	r27, 0x00	; 0
    430e:	ef e5       	ldi	r30, 0x5F	; 95
    4310:	f0 e0       	ldi	r31, 0x00	; 0
    4312:	80 81       	ld	r24, Z
    4314:	80 68       	ori	r24, 0x80	; 128
    4316:	8c 93       	st	X, r24

	/* Initialization Functions */
	ADC_init(&ADC_MyConfig); /* Initialize ADC */
    4318:	ce 01       	movw	r24, r28
    431a:	83 5b       	subi	r24, 0xB3	; 179
    431c:	9f 4f       	sbci	r25, 0xFF	; 255
    431e:	0e 94 76 07 	call	0xeec	; 0xeec <ADC_init>

	ADS1015_init(&ads, ADS1015_ADDRESS); /* Initialize ADS1015 */
    4322:	ce 01       	movw	r24, r28
    4324:	81 5b       	subi	r24, 0xB1	; 177
    4326:	9f 4f       	sbci	r25, 0xFF	; 255
    4328:	68 e4       	ldi	r22, 0x48	; 72
    432a:	0e 94 e0 1c 	call	0x39c0	; 0x39c0 <ADS1015_init>
	ADS1015_begin(&ads); /* Begin ADS1015 */
    432e:	ce 01       	movw	r24, r28
    4330:	81 5b       	subi	r24, 0xB1	; 177
    4332:	9f 4f       	sbci	r25, 0xFF	; 255
    4334:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <ADS1015_begin>
	ADS1015_setGain(&ads, GAIN_TWOTHIRDS); /* Set gain for ADS1015 */
    4338:	ce 01       	movw	r24, r28
    433a:	81 5b       	subi	r24, 0xB1	; 177
    433c:	9f 4f       	sbci	r25, 0xFF	; 255
    433e:	60 e0       	ldi	r22, 0x00	; 0
    4340:	70 e0       	ldi	r23, 0x00	; 0
    4342:	0e 94 0d 1d 	call	0x3a1a	; 0x3a1a <ADS1015_setGain>

	LCD_init(); /* Initialize LCD */
    4346:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <LCD_init>
	LCD_StoreCustomPtrn(ohmSymbol, 0); /* Store custom Ohm symbol */
    434a:	ce 01       	movw	r24, r28
    434c:	8c 5a       	subi	r24, 0xAC	; 172
    434e:	9f 4f       	sbci	r25, 0xFF	; 255
    4350:	60 e0       	ldi	r22, 0x00	; 0
    4352:	0e 94 84 15 	call	0x2b08	; 0x2b08 <LCD_StoreCustomPtrn>

	/* Welcome Message */

	LCD_displayString("  Auto-Ranging  ");
    4356:	85 eb       	ldi	r24, 0xB5	; 181
    4358:	90 e0       	ldi	r25, 0x00	; 0
    435a:	0e 94 90 14 	call	0x2920	; 0x2920 <LCD_displayString>
	LCD_moveCursor(1,0);
    435e:	81 e0       	ldi	r24, 0x01	; 1
    4360:	60 e0       	ldi	r22, 0x00	; 0
    4362:	0e 94 b9 14 	call	0x2972	; 0x2972 <LCD_moveCursor>
	LCD_displayString("   Multimeter   ");
    4366:	86 ec       	ldi	r24, 0xC6	; 198
    4368:	90 e0       	ldi	r25, 0x00	; 0
    436a:	0e 94 90 14 	call	0x2920	; 0x2920 <LCD_displayString>
    436e:	80 e0       	ldi	r24, 0x00	; 0
    4370:	90 e0       	ldi	r25, 0x00	; 0
    4372:	aa e7       	ldi	r26, 0x7A	; 122
    4374:	b4 e4       	ldi	r27, 0x44	; 68
    4376:	8d ab       	std	Y+53, r24	; 0x35
    4378:	9e ab       	std	Y+54, r25	; 0x36
    437a:	af ab       	std	Y+55, r26	; 0x37
    437c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    437e:	6d a9       	ldd	r22, Y+53	; 0x35
    4380:	7e a9       	ldd	r23, Y+54	; 0x36
    4382:	8f a9       	ldd	r24, Y+55	; 0x37
    4384:	98 ad       	ldd	r25, Y+56	; 0x38
    4386:	20 e0       	ldi	r18, 0x00	; 0
    4388:	30 e0       	ldi	r19, 0x00	; 0
    438a:	4a e7       	ldi	r20, 0x7A	; 122
    438c:	55 e4       	ldi	r21, 0x45	; 69
    438e:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__mulsf3>
    4392:	dc 01       	movw	r26, r24
    4394:	cb 01       	movw	r24, r22
    4396:	89 ab       	std	Y+49, r24	; 0x31
    4398:	9a ab       	std	Y+50, r25	; 0x32
    439a:	ab ab       	std	Y+51, r26	; 0x33
    439c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    439e:	69 a9       	ldd	r22, Y+49	; 0x31
    43a0:	7a a9       	ldd	r23, Y+50	; 0x32
    43a2:	8b a9       	ldd	r24, Y+51	; 0x33
    43a4:	9c a9       	ldd	r25, Y+52	; 0x34
    43a6:	20 e0       	ldi	r18, 0x00	; 0
    43a8:	30 e0       	ldi	r19, 0x00	; 0
    43aa:	40 e8       	ldi	r20, 0x80	; 128
    43ac:	5f e3       	ldi	r21, 0x3F	; 63
    43ae:	0e 94 93 25 	call	0x4b26	; 0x4b26 <__cmpsf2>
    43b2:	88 23       	and	r24, r24
    43b4:	2c f4       	brge	.+10     	; 0x43c0 <main+0x16a>
		__ticks = 1;
    43b6:	81 e0       	ldi	r24, 0x01	; 1
    43b8:	90 e0       	ldi	r25, 0x00	; 0
    43ba:	98 ab       	std	Y+48, r25	; 0x30
    43bc:	8f a7       	std	Y+47, r24	; 0x2f
    43be:	3f c0       	rjmp	.+126    	; 0x443e <main+0x1e8>
	else if (__tmp > 65535)
    43c0:	69 a9       	ldd	r22, Y+49	; 0x31
    43c2:	7a a9       	ldd	r23, Y+50	; 0x32
    43c4:	8b a9       	ldd	r24, Y+51	; 0x33
    43c6:	9c a9       	ldd	r25, Y+52	; 0x34
    43c8:	20 e0       	ldi	r18, 0x00	; 0
    43ca:	3f ef       	ldi	r19, 0xFF	; 255
    43cc:	4f e7       	ldi	r20, 0x7F	; 127
    43ce:	57 e4       	ldi	r21, 0x47	; 71
    43d0:	0e 94 dd 26 	call	0x4dba	; 0x4dba <__gesf2>
    43d4:	18 16       	cp	r1, r24
    43d6:	4c f5       	brge	.+82     	; 0x442a <main+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43d8:	6d a9       	ldd	r22, Y+53	; 0x35
    43da:	7e a9       	ldd	r23, Y+54	; 0x36
    43dc:	8f a9       	ldd	r24, Y+55	; 0x37
    43de:	98 ad       	ldd	r25, Y+56	; 0x38
    43e0:	20 e0       	ldi	r18, 0x00	; 0
    43e2:	30 e0       	ldi	r19, 0x00	; 0
    43e4:	40 e2       	ldi	r20, 0x20	; 32
    43e6:	51 e4       	ldi	r21, 0x41	; 65
    43e8:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__mulsf3>
    43ec:	dc 01       	movw	r26, r24
    43ee:	cb 01       	movw	r24, r22
    43f0:	bc 01       	movw	r22, r24
    43f2:	cd 01       	movw	r24, r26
    43f4:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <__fixunssfsi>
    43f8:	dc 01       	movw	r26, r24
    43fa:	cb 01       	movw	r24, r22
    43fc:	98 ab       	std	Y+48, r25	; 0x30
    43fe:	8f a7       	std	Y+47, r24	; 0x2f
    4400:	0f c0       	rjmp	.+30     	; 0x4420 <main+0x1ca>
    4402:	80 e9       	ldi	r24, 0x90	; 144
    4404:	91 e0       	ldi	r25, 0x01	; 1
    4406:	9e a7       	std	Y+46, r25	; 0x2e
    4408:	8d a7       	std	Y+45, r24	; 0x2d
    440a:	8d a5       	ldd	r24, Y+45	; 0x2d
    440c:	9e a5       	ldd	r25, Y+46	; 0x2e
    440e:	01 97       	sbiw	r24, 0x01	; 1
    4410:	f1 f7       	brne	.-4      	; 0x440e <main+0x1b8>
    4412:	9e a7       	std	Y+46, r25	; 0x2e
    4414:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4416:	8f a5       	ldd	r24, Y+47	; 0x2f
    4418:	98 a9       	ldd	r25, Y+48	; 0x30
    441a:	01 97       	sbiw	r24, 0x01	; 1
    441c:	98 ab       	std	Y+48, r25	; 0x30
    441e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4420:	8f a5       	ldd	r24, Y+47	; 0x2f
    4422:	98 a9       	ldd	r25, Y+48	; 0x30
    4424:	00 97       	sbiw	r24, 0x00	; 0
    4426:	69 f7       	brne	.-38     	; 0x4402 <main+0x1ac>
    4428:	14 c0       	rjmp	.+40     	; 0x4452 <main+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    442a:	69 a9       	ldd	r22, Y+49	; 0x31
    442c:	7a a9       	ldd	r23, Y+50	; 0x32
    442e:	8b a9       	ldd	r24, Y+51	; 0x33
    4430:	9c a9       	ldd	r25, Y+52	; 0x34
    4432:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <__fixunssfsi>
    4436:	dc 01       	movw	r26, r24
    4438:	cb 01       	movw	r24, r22
    443a:	98 ab       	std	Y+48, r25	; 0x30
    443c:	8f a7       	std	Y+47, r24	; 0x2f
    443e:	8f a5       	ldd	r24, Y+47	; 0x2f
    4440:	98 a9       	ldd	r25, Y+48	; 0x30
    4442:	9c a7       	std	Y+44, r25	; 0x2c
    4444:	8b a7       	std	Y+43, r24	; 0x2b
    4446:	8b a5       	ldd	r24, Y+43	; 0x2b
    4448:	9c a5       	ldd	r25, Y+44	; 0x2c
    444a:	01 97       	sbiw	r24, 0x01	; 1
    444c:	f1 f7       	brne	.-4      	; 0x444a <main+0x1f4>
    444e:	9c a7       	std	Y+44, r25	; 0x2c
    4450:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1000);
	LCD_clearScreen();
    4452:	0e 94 14 15 	call	0x2a28	; 0x2a28 <LCD_clearScreen>
	LCD_displayString("  Developed By  ");
    4456:	87 ed       	ldi	r24, 0xD7	; 215
    4458:	90 e0       	ldi	r25, 0x00	; 0
    445a:	0e 94 90 14 	call	0x2920	; 0x2920 <LCD_displayString>
	LCD_moveCursor(1,0);
    445e:	81 e0       	ldi	r24, 0x01	; 1
    4460:	60 e0       	ldi	r22, 0x00	; 0
    4462:	0e 94 b9 14 	call	0x2972	; 0x2972 <LCD_moveCursor>
	LCD_displayString(" Youssif Hossam ");
    4466:	88 ee       	ldi	r24, 0xE8	; 232
    4468:	90 e0       	ldi	r25, 0x00	; 0
    446a:	0e 94 90 14 	call	0x2920	; 0x2920 <LCD_displayString>
    446e:	80 e0       	ldi	r24, 0x00	; 0
    4470:	90 e0       	ldi	r25, 0x00	; 0
    4472:	aa e7       	ldi	r26, 0x7A	; 122
    4474:	b4 e4       	ldi	r27, 0x44	; 68
    4476:	8f a3       	std	Y+39, r24	; 0x27
    4478:	98 a7       	std	Y+40, r25	; 0x28
    447a:	a9 a7       	std	Y+41, r26	; 0x29
    447c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    447e:	6f a1       	ldd	r22, Y+39	; 0x27
    4480:	78 a5       	ldd	r23, Y+40	; 0x28
    4482:	89 a5       	ldd	r24, Y+41	; 0x29
    4484:	9a a5       	ldd	r25, Y+42	; 0x2a
    4486:	20 e0       	ldi	r18, 0x00	; 0
    4488:	30 e0       	ldi	r19, 0x00	; 0
    448a:	4a e7       	ldi	r20, 0x7A	; 122
    448c:	55 e4       	ldi	r21, 0x45	; 69
    448e:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__mulsf3>
    4492:	dc 01       	movw	r26, r24
    4494:	cb 01       	movw	r24, r22
    4496:	8b a3       	std	Y+35, r24	; 0x23
    4498:	9c a3       	std	Y+36, r25	; 0x24
    449a:	ad a3       	std	Y+37, r26	; 0x25
    449c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    449e:	6b a1       	ldd	r22, Y+35	; 0x23
    44a0:	7c a1       	ldd	r23, Y+36	; 0x24
    44a2:	8d a1       	ldd	r24, Y+37	; 0x25
    44a4:	9e a1       	ldd	r25, Y+38	; 0x26
    44a6:	20 e0       	ldi	r18, 0x00	; 0
    44a8:	30 e0       	ldi	r19, 0x00	; 0
    44aa:	40 e8       	ldi	r20, 0x80	; 128
    44ac:	5f e3       	ldi	r21, 0x3F	; 63
    44ae:	0e 94 93 25 	call	0x4b26	; 0x4b26 <__cmpsf2>
    44b2:	88 23       	and	r24, r24
    44b4:	2c f4       	brge	.+10     	; 0x44c0 <main+0x26a>
		__ticks = 1;
    44b6:	81 e0       	ldi	r24, 0x01	; 1
    44b8:	90 e0       	ldi	r25, 0x00	; 0
    44ba:	9a a3       	std	Y+34, r25	; 0x22
    44bc:	89 a3       	std	Y+33, r24	; 0x21
    44be:	3f c0       	rjmp	.+126    	; 0x453e <main+0x2e8>
	else if (__tmp > 65535)
    44c0:	6b a1       	ldd	r22, Y+35	; 0x23
    44c2:	7c a1       	ldd	r23, Y+36	; 0x24
    44c4:	8d a1       	ldd	r24, Y+37	; 0x25
    44c6:	9e a1       	ldd	r25, Y+38	; 0x26
    44c8:	20 e0       	ldi	r18, 0x00	; 0
    44ca:	3f ef       	ldi	r19, 0xFF	; 255
    44cc:	4f e7       	ldi	r20, 0x7F	; 127
    44ce:	57 e4       	ldi	r21, 0x47	; 71
    44d0:	0e 94 dd 26 	call	0x4dba	; 0x4dba <__gesf2>
    44d4:	18 16       	cp	r1, r24
    44d6:	4c f5       	brge	.+82     	; 0x452a <main+0x2d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44d8:	6f a1       	ldd	r22, Y+39	; 0x27
    44da:	78 a5       	ldd	r23, Y+40	; 0x28
    44dc:	89 a5       	ldd	r24, Y+41	; 0x29
    44de:	9a a5       	ldd	r25, Y+42	; 0x2a
    44e0:	20 e0       	ldi	r18, 0x00	; 0
    44e2:	30 e0       	ldi	r19, 0x00	; 0
    44e4:	40 e2       	ldi	r20, 0x20	; 32
    44e6:	51 e4       	ldi	r21, 0x41	; 65
    44e8:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__mulsf3>
    44ec:	dc 01       	movw	r26, r24
    44ee:	cb 01       	movw	r24, r22
    44f0:	bc 01       	movw	r22, r24
    44f2:	cd 01       	movw	r24, r26
    44f4:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <__fixunssfsi>
    44f8:	dc 01       	movw	r26, r24
    44fa:	cb 01       	movw	r24, r22
    44fc:	9a a3       	std	Y+34, r25	; 0x22
    44fe:	89 a3       	std	Y+33, r24	; 0x21
    4500:	0f c0       	rjmp	.+30     	; 0x4520 <main+0x2ca>
    4502:	80 e9       	ldi	r24, 0x90	; 144
    4504:	91 e0       	ldi	r25, 0x01	; 1
    4506:	98 a3       	std	Y+32, r25	; 0x20
    4508:	8f 8f       	std	Y+31, r24	; 0x1f
    450a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    450c:	98 a1       	ldd	r25, Y+32	; 0x20
    450e:	01 97       	sbiw	r24, 0x01	; 1
    4510:	f1 f7       	brne	.-4      	; 0x450e <main+0x2b8>
    4512:	98 a3       	std	Y+32, r25	; 0x20
    4514:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4516:	89 a1       	ldd	r24, Y+33	; 0x21
    4518:	9a a1       	ldd	r25, Y+34	; 0x22
    451a:	01 97       	sbiw	r24, 0x01	; 1
    451c:	9a a3       	std	Y+34, r25	; 0x22
    451e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4520:	89 a1       	ldd	r24, Y+33	; 0x21
    4522:	9a a1       	ldd	r25, Y+34	; 0x22
    4524:	00 97       	sbiw	r24, 0x00	; 0
    4526:	69 f7       	brne	.-38     	; 0x4502 <main+0x2ac>
    4528:	14 c0       	rjmp	.+40     	; 0x4552 <main+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    452a:	6b a1       	ldd	r22, Y+35	; 0x23
    452c:	7c a1       	ldd	r23, Y+36	; 0x24
    452e:	8d a1       	ldd	r24, Y+37	; 0x25
    4530:	9e a1       	ldd	r25, Y+38	; 0x26
    4532:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <__fixunssfsi>
    4536:	dc 01       	movw	r26, r24
    4538:	cb 01       	movw	r24, r22
    453a:	9a a3       	std	Y+34, r25	; 0x22
    453c:	89 a3       	std	Y+33, r24	; 0x21
    453e:	89 a1       	ldd	r24, Y+33	; 0x21
    4540:	9a a1       	ldd	r25, Y+34	; 0x22
    4542:	9e 8f       	std	Y+30, r25	; 0x1e
    4544:	8d 8f       	std	Y+29, r24	; 0x1d
    4546:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4548:	9e 8d       	ldd	r25, Y+30	; 0x1e
    454a:	01 97       	sbiw	r24, 0x01	; 1
    454c:	f1 f7       	brne	.-4      	; 0x454a <main+0x2f4>
    454e:	9e 8f       	std	Y+30, r25	; 0x1e
    4550:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1000);
	LCD_clearScreen();
    4552:	0e 94 14 15 	call	0x2a28	; 0x2a28 <LCD_clearScreen>
    4556:	80 e0       	ldi	r24, 0x00	; 0
    4558:	90 e0       	ldi	r25, 0x00	; 0
    455a:	aa ef       	ldi	r26, 0xFA	; 250
    455c:	b3 e4       	ldi	r27, 0x43	; 67
    455e:	89 8f       	std	Y+25, r24	; 0x19
    4560:	9a 8f       	std	Y+26, r25	; 0x1a
    4562:	ab 8f       	std	Y+27, r26	; 0x1b
    4564:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4566:	69 8d       	ldd	r22, Y+25	; 0x19
    4568:	7a 8d       	ldd	r23, Y+26	; 0x1a
    456a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    456c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    456e:	20 e0       	ldi	r18, 0x00	; 0
    4570:	30 e0       	ldi	r19, 0x00	; 0
    4572:	4a e7       	ldi	r20, 0x7A	; 122
    4574:	55 e4       	ldi	r21, 0x45	; 69
    4576:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__mulsf3>
    457a:	dc 01       	movw	r26, r24
    457c:	cb 01       	movw	r24, r22
    457e:	8d 8b       	std	Y+21, r24	; 0x15
    4580:	9e 8b       	std	Y+22, r25	; 0x16
    4582:	af 8b       	std	Y+23, r26	; 0x17
    4584:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4586:	6d 89       	ldd	r22, Y+21	; 0x15
    4588:	7e 89       	ldd	r23, Y+22	; 0x16
    458a:	8f 89       	ldd	r24, Y+23	; 0x17
    458c:	98 8d       	ldd	r25, Y+24	; 0x18
    458e:	20 e0       	ldi	r18, 0x00	; 0
    4590:	30 e0       	ldi	r19, 0x00	; 0
    4592:	40 e8       	ldi	r20, 0x80	; 128
    4594:	5f e3       	ldi	r21, 0x3F	; 63
    4596:	0e 94 93 25 	call	0x4b26	; 0x4b26 <__cmpsf2>
    459a:	88 23       	and	r24, r24
    459c:	2c f4       	brge	.+10     	; 0x45a8 <main+0x352>
		__ticks = 1;
    459e:	81 e0       	ldi	r24, 0x01	; 1
    45a0:	90 e0       	ldi	r25, 0x00	; 0
    45a2:	9c 8b       	std	Y+20, r25	; 0x14
    45a4:	8b 8b       	std	Y+19, r24	; 0x13
    45a6:	3f c0       	rjmp	.+126    	; 0x4626 <main+0x3d0>
	else if (__tmp > 65535)
    45a8:	6d 89       	ldd	r22, Y+21	; 0x15
    45aa:	7e 89       	ldd	r23, Y+22	; 0x16
    45ac:	8f 89       	ldd	r24, Y+23	; 0x17
    45ae:	98 8d       	ldd	r25, Y+24	; 0x18
    45b0:	20 e0       	ldi	r18, 0x00	; 0
    45b2:	3f ef       	ldi	r19, 0xFF	; 255
    45b4:	4f e7       	ldi	r20, 0x7F	; 127
    45b6:	57 e4       	ldi	r21, 0x47	; 71
    45b8:	0e 94 dd 26 	call	0x4dba	; 0x4dba <__gesf2>
    45bc:	18 16       	cp	r1, r24
    45be:	4c f5       	brge	.+82     	; 0x4612 <main+0x3bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45c0:	69 8d       	ldd	r22, Y+25	; 0x19
    45c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    45c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    45c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    45c8:	20 e0       	ldi	r18, 0x00	; 0
    45ca:	30 e0       	ldi	r19, 0x00	; 0
    45cc:	40 e2       	ldi	r20, 0x20	; 32
    45ce:	51 e4       	ldi	r21, 0x41	; 65
    45d0:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__mulsf3>
    45d4:	dc 01       	movw	r26, r24
    45d6:	cb 01       	movw	r24, r22
    45d8:	bc 01       	movw	r22, r24
    45da:	cd 01       	movw	r24, r26
    45dc:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <__fixunssfsi>
    45e0:	dc 01       	movw	r26, r24
    45e2:	cb 01       	movw	r24, r22
    45e4:	9c 8b       	std	Y+20, r25	; 0x14
    45e6:	8b 8b       	std	Y+19, r24	; 0x13
    45e8:	0f c0       	rjmp	.+30     	; 0x4608 <main+0x3b2>
    45ea:	80 e9       	ldi	r24, 0x90	; 144
    45ec:	91 e0       	ldi	r25, 0x01	; 1
    45ee:	9a 8b       	std	Y+18, r25	; 0x12
    45f0:	89 8b       	std	Y+17, r24	; 0x11
    45f2:	89 89       	ldd	r24, Y+17	; 0x11
    45f4:	9a 89       	ldd	r25, Y+18	; 0x12
    45f6:	01 97       	sbiw	r24, 0x01	; 1
    45f8:	f1 f7       	brne	.-4      	; 0x45f6 <main+0x3a0>
    45fa:	9a 8b       	std	Y+18, r25	; 0x12
    45fc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45fe:	8b 89       	ldd	r24, Y+19	; 0x13
    4600:	9c 89       	ldd	r25, Y+20	; 0x14
    4602:	01 97       	sbiw	r24, 0x01	; 1
    4604:	9c 8b       	std	Y+20, r25	; 0x14
    4606:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4608:	8b 89       	ldd	r24, Y+19	; 0x13
    460a:	9c 89       	ldd	r25, Y+20	; 0x14
    460c:	00 97       	sbiw	r24, 0x00	; 0
    460e:	69 f7       	brne	.-38     	; 0x45ea <main+0x394>
    4610:	14 c0       	rjmp	.+40     	; 0x463a <main+0x3e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4612:	6d 89       	ldd	r22, Y+21	; 0x15
    4614:	7e 89       	ldd	r23, Y+22	; 0x16
    4616:	8f 89       	ldd	r24, Y+23	; 0x17
    4618:	98 8d       	ldd	r25, Y+24	; 0x18
    461a:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <__fixunssfsi>
    461e:	dc 01       	movw	r26, r24
    4620:	cb 01       	movw	r24, r22
    4622:	9c 8b       	std	Y+20, r25	; 0x14
    4624:	8b 8b       	std	Y+19, r24	; 0x13
    4626:	8b 89       	ldd	r24, Y+19	; 0x13
    4628:	9c 89       	ldd	r25, Y+20	; 0x14
    462a:	98 8b       	std	Y+16, r25	; 0x10
    462c:	8f 87       	std	Y+15, r24	; 0x0f
    462e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4630:	98 89       	ldd	r25, Y+16	; 0x10
    4632:	01 97       	sbiw	r24, 0x01	; 1
    4634:	f1 f7       	brne	.-4      	; 0x4632 <main+0x3dc>
    4636:	98 8b       	std	Y+16, r25	; 0x10
    4638:	8f 87       	std	Y+15, r24	; 0x0f

	/* Main Loop */
	while(1){

		/* Run mode selector to get current mode */
		MODE_SELECTOR_run(&currentMode, &previousMode);
    463a:	ce 01       	movw	r24, r28
    463c:	83 5a       	subi	r24, 0xA3	; 163
    463e:	9f 4f       	sbci	r25, 0xFF	; 255
    4640:	9e 01       	movw	r18, r28
    4642:	22 5a       	subi	r18, 0xA2	; 162
    4644:	3f 4f       	sbci	r19, 0xFF	; 255
    4646:	b9 01       	movw	r22, r18
    4648:	0e 94 05 0a 	call	0x140a	; 0x140a <MODE_SELECTOR_run>

		/* Clear previous measurement display */
		LCD_moveCursor(1,5);
    464c:	81 e0       	ldi	r24, 0x01	; 1
    464e:	65 e0       	ldi	r22, 0x05	; 5
    4650:	0e 94 b9 14 	call	0x2972	; 0x2972 <LCD_moveCursor>
		LCD_displayString("           ");
    4654:	89 ef       	ldi	r24, 0xF9	; 249
    4656:	90 e0       	ldi	r25, 0x00	; 0
    4658:	0e 94 90 14 	call	0x2920	; 0x2920 <LCD_displayString>
		LCD_moveCursor(1,5);
    465c:	81 e0       	ldi	r24, 0x01	; 1
    465e:	65 e0       	ldi	r22, 0x05	; 5
    4660:	0e 94 b9 14 	call	0x2972	; 0x2972 <LCD_moveCursor>

		/* Process current mode */
		switch(currentMode){
    4664:	fe 01       	movw	r30, r28
    4666:	e3 5a       	subi	r30, 0xA3	; 163
    4668:	ff 4f       	sbci	r31, 0xFF	; 255
    466a:	80 81       	ld	r24, Z
    466c:	e8 2f       	mov	r30, r24
    466e:	f0 e0       	ldi	r31, 0x00	; 0
    4670:	a5 96       	adiw	r28, 0x25	; 37
    4672:	ff af       	std	Y+63, r31	; 0x3f
    4674:	ee af       	std	Y+62, r30	; 0x3e
    4676:	a5 97       	sbiw	r28, 0x25	; 37
    4678:	a5 96       	adiw	r28, 0x25	; 37
    467a:	2e ad       	ldd	r18, Y+62	; 0x3e
    467c:	3f ad       	ldd	r19, Y+63	; 0x3f
    467e:	a5 97       	sbiw	r28, 0x25	; 37
    4680:	22 30       	cpi	r18, 0x02	; 2
    4682:	31 05       	cpc	r19, r1
    4684:	09 f4       	brne	.+2      	; 0x4688 <main+0x432>
    4686:	93 c0       	rjmp	.+294    	; 0x47ae <main+0x558>
    4688:	a5 96       	adiw	r28, 0x25	; 37
    468a:	8e ad       	ldd	r24, Y+62	; 0x3e
    468c:	9f ad       	ldd	r25, Y+63	; 0x3f
    468e:	a5 97       	sbiw	r28, 0x25	; 37
    4690:	83 30       	cpi	r24, 0x03	; 3
    4692:	91 05       	cpc	r25, r1
    4694:	7c f4       	brge	.+30     	; 0x46b4 <main+0x45e>
    4696:	a5 96       	adiw	r28, 0x25	; 37
    4698:	ee ad       	ldd	r30, Y+62	; 0x3e
    469a:	ff ad       	ldd	r31, Y+63	; 0x3f
    469c:	a5 97       	sbiw	r28, 0x25	; 37
    469e:	30 97       	sbiw	r30, 0x00	; 0
    46a0:	d1 f0       	breq	.+52     	; 0x46d6 <main+0x480>
    46a2:	a5 96       	adiw	r28, 0x25	; 37
    46a4:	2e ad       	ldd	r18, Y+62	; 0x3e
    46a6:	3f ad       	ldd	r19, Y+63	; 0x3f
    46a8:	a5 97       	sbiw	r28, 0x25	; 37
    46aa:	21 30       	cpi	r18, 0x01	; 1
    46ac:	31 05       	cpc	r19, r1
    46ae:	09 f4       	brne	.+2      	; 0x46b2 <main+0x45c>
    46b0:	61 c0       	rjmp	.+194    	; 0x4774 <main+0x51e>
    46b2:	61 c1       	rjmp	.+706    	; 0x4976 <main+0x720>
    46b4:	a5 96       	adiw	r28, 0x25	; 37
    46b6:	8e ad       	ldd	r24, Y+62	; 0x3e
    46b8:	9f ad       	ldd	r25, Y+63	; 0x3f
    46ba:	a5 97       	sbiw	r28, 0x25	; 37
    46bc:	83 30       	cpi	r24, 0x03	; 3
    46be:	91 05       	cpc	r25, r1
    46c0:	09 f4       	brne	.+2      	; 0x46c4 <main+0x46e>
    46c2:	e3 c0       	rjmp	.+454    	; 0x488a <main+0x634>
    46c4:	a5 96       	adiw	r28, 0x25	; 37
    46c6:	ee ad       	ldd	r30, Y+62	; 0x3e
    46c8:	ff ad       	ldd	r31, Y+63	; 0x3f
    46ca:	a5 97       	sbiw	r28, 0x25	; 37
    46cc:	e4 30       	cpi	r30, 0x04	; 4
    46ce:	f1 05       	cpc	r31, r1
    46d0:	09 f4       	brne	.+2      	; 0x46d4 <main+0x47e>
    46d2:	19 c1       	rjmp	.+562    	; 0x4906 <main+0x6b0>
    46d4:	50 c1       	rjmp	.+672    	; 0x4976 <main+0x720>

		case OHMMETER_MODE:
			/* Measure resistance */
			resistance = OHMMETER_getReading(&ads, &resistanceUnit);
    46d6:	ce 01       	movw	r24, r28
    46d8:	81 5b       	subi	r24, 0xB1	; 177
    46da:	9f 4f       	sbci	r25, 0xFF	; 255
    46dc:	9e 01       	movw	r18, r28
    46de:	25 5a       	subi	r18, 0xA5	; 165
    46e0:	3f 4f       	sbci	r19, 0xFF	; 255
    46e2:	b9 01       	movw	r22, r18
    46e4:	0e 94 55 08 	call	0x10aa	; 0x10aa <OHMMETER_getReading>
    46e8:	dc 01       	movw	r26, r24
    46ea:	cb 01       	movw	r24, r22
    46ec:	fe 01       	movw	r30, r28
    46ee:	e7 5b       	subi	r30, 0xB7	; 183
    46f0:	ff 4f       	sbci	r31, 0xFF	; 255
    46f2:	80 83       	st	Z, r24
    46f4:	91 83       	std	Z+1, r25	; 0x01
    46f6:	a2 83       	std	Z+2, r26	; 0x02
    46f8:	b3 83       	std	Z+3, r27	; 0x03
			LCD_floatToString(resistance); /* Display resistance value */
    46fa:	fe 01       	movw	r30, r28
    46fc:	e7 5b       	subi	r30, 0xB7	; 183
    46fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4700:	80 81       	ld	r24, Z
    4702:	91 81       	ldd	r25, Z+1	; 0x01
    4704:	a2 81       	ldd	r26, Z+2	; 0x02
    4706:	b3 81       	ldd	r27, Z+3	; 0x03
    4708:	bc 01       	movw	r22, r24
    470a:	cd 01       	movw	r24, r26
    470c:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <LCD_floatToString>
			switch(resistanceUnit){
    4710:	fe 01       	movw	r30, r28
    4712:	e5 5a       	subi	r30, 0xA5	; 165
    4714:	ff 4f       	sbci	r31, 0xFF	; 255
    4716:	80 81       	ld	r24, Z
    4718:	28 2f       	mov	r18, r24
    471a:	30 e0       	ldi	r19, 0x00	; 0
    471c:	a3 96       	adiw	r28, 0x23	; 35
    471e:	3f af       	std	Y+63, r19	; 0x3f
    4720:	2e af       	std	Y+62, r18	; 0x3e
    4722:	a3 97       	sbiw	r28, 0x23	; 35
    4724:	a3 96       	adiw	r28, 0x23	; 35
    4726:	8e ad       	ldd	r24, Y+62	; 0x3e
    4728:	9f ad       	ldd	r25, Y+63	; 0x3f
    472a:	a3 97       	sbiw	r28, 0x23	; 35
    472c:	81 30       	cpi	r24, 0x01	; 1
    472e:	91 05       	cpc	r25, r1
    4730:	99 f0       	breq	.+38     	; 0x4758 <main+0x502>
    4732:	a3 96       	adiw	r28, 0x23	; 35
    4734:	ee ad       	ldd	r30, Y+62	; 0x3e
    4736:	ff ad       	ldd	r31, Y+63	; 0x3f
    4738:	a3 97       	sbiw	r28, 0x23	; 35
    473a:	e2 30       	cpi	r30, 0x02	; 2
    473c:	f1 05       	cpc	r31, r1
    473e:	99 f0       	breq	.+38     	; 0x4766 <main+0x510>
    4740:	a3 96       	adiw	r28, 0x23	; 35
    4742:	2e ad       	ldd	r18, Y+62	; 0x3e
    4744:	3f ad       	ldd	r19, Y+63	; 0x3f
    4746:	a3 97       	sbiw	r28, 0x23	; 35
    4748:	21 15       	cp	r18, r1
    474a:	31 05       	cpc	r19, r1
    474c:	09 f0       	breq	.+2      	; 0x4750 <main+0x4fa>
    474e:	13 c1       	rjmp	.+550    	; 0x4976 <main+0x720>
			case OHMS:
				LCD_DisplayCustomPtrn(0); /* Display Ohm symbol */
    4750:	80 e0       	ldi	r24, 0x00	; 0
    4752:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <LCD_DisplayCustomPtrn>
    4756:	0f c1       	rjmp	.+542    	; 0x4976 <main+0x720>
				break;
			case K_OHMS:
				LCD_displayCharacter('K');
    4758:	8b e4       	ldi	r24, 0x4B	; 75
    475a:	0e 94 15 10 	call	0x202a	; 0x202a <LCD_displayCharacter>
				LCD_DisplayCustomPtrn(0);
    475e:	80 e0       	ldi	r24, 0x00	; 0
    4760:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <LCD_DisplayCustomPtrn>
    4764:	08 c1       	rjmp	.+528    	; 0x4976 <main+0x720>
				break;
			case M_OHMS:
				LCD_displayCharacter('M');
    4766:	8d e4       	ldi	r24, 0x4D	; 77
    4768:	0e 94 15 10 	call	0x202a	; 0x202a <LCD_displayCharacter>
				LCD_DisplayCustomPtrn(0);
    476c:	80 e0       	ldi	r24, 0x00	; 0
    476e:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <LCD_DisplayCustomPtrn>
    4772:	01 c1       	rjmp	.+514    	; 0x4976 <main+0x720>
			}
			break;

			case VOLTMETER_MODE:
				/* Measure voltage */
				voltage = VOLTMETER_getReading(&ads);
    4774:	ce 01       	movw	r24, r28
    4776:	81 5b       	subi	r24, 0xB1	; 177
    4778:	9f 4f       	sbci	r25, 0xFF	; 255
    477a:	0e 94 04 08 	call	0x1008	; 0x1008 <VOLTMETER_getReading>
    477e:	dc 01       	movw	r26, r24
    4780:	cb 01       	movw	r24, r22
    4782:	fe 01       	movw	r30, r28
    4784:	eb 5b       	subi	r30, 0xBB	; 187
    4786:	ff 4f       	sbci	r31, 0xFF	; 255
    4788:	80 83       	st	Z, r24
    478a:	91 83       	std	Z+1, r25	; 0x01
    478c:	a2 83       	std	Z+2, r26	; 0x02
    478e:	b3 83       	std	Z+3, r27	; 0x03
				LCD_floatToString(voltage); /* Display voltage value */
    4790:	fe 01       	movw	r30, r28
    4792:	eb 5b       	subi	r30, 0xBB	; 187
    4794:	ff 4f       	sbci	r31, 0xFF	; 255
    4796:	80 81       	ld	r24, Z
    4798:	91 81       	ldd	r25, Z+1	; 0x01
    479a:	a2 81       	ldd	r26, Z+2	; 0x02
    479c:	b3 81       	ldd	r27, Z+3	; 0x03
    479e:	bc 01       	movw	r22, r24
    47a0:	cd 01       	movw	r24, r26
    47a2:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <LCD_floatToString>
				LCD_displayCharacter('V');
    47a6:	86 e5       	ldi	r24, 0x56	; 86
    47a8:	0e 94 15 10 	call	0x202a	; 0x202a <LCD_displayCharacter>
    47ac:	e4 c0       	rjmp	.+456    	; 0x4976 <main+0x720>
				break;

			case CAPMETER_MODE:
				/* Measure capacitance */
				capacitance = CAPACITANCE_METER_getReading(&capacitanceUnit);
    47ae:	ce 01       	movw	r24, r28
    47b0:	84 5a       	subi	r24, 0xA4	; 164
    47b2:	9f 4f       	sbci	r25, 0xFF	; 255
    47b4:	0e 94 09 19 	call	0x3212	; 0x3212 <CAPACITANCE_METER_getReading>
    47b8:	dc 01       	movw	r26, r24
    47ba:	cb 01       	movw	r24, r22
    47bc:	fe 01       	movw	r30, r28
    47be:	ef 5b       	subi	r30, 0xBF	; 191
    47c0:	ff 4f       	sbci	r31, 0xFF	; 255
    47c2:	80 83       	st	Z, r24
    47c4:	91 83       	std	Z+1, r25	; 0x01
    47c6:	a2 83       	std	Z+2, r26	; 0x02
    47c8:	b3 83       	std	Z+3, r27	; 0x03
				if(capacitanceUnit != NO_SCALE){
    47ca:	fe 01       	movw	r30, r28
    47cc:	e4 5a       	subi	r30, 0xA4	; 164
    47ce:	ff 4f       	sbci	r31, 0xFF	; 255
    47d0:	80 81       	ld	r24, Z
    47d2:	85 30       	cpi	r24, 0x05	; 5
    47d4:	09 f4       	brne	.+2      	; 0x47d8 <main+0x582>
    47d6:	cf c0       	rjmp	.+414    	; 0x4976 <main+0x720>
					LCD_floatToString(capacitance); /* Display capacitance value */
    47d8:	fe 01       	movw	r30, r28
    47da:	ef 5b       	subi	r30, 0xBF	; 191
    47dc:	ff 4f       	sbci	r31, 0xFF	; 255
    47de:	80 81       	ld	r24, Z
    47e0:	91 81       	ldd	r25, Z+1	; 0x01
    47e2:	a2 81       	ldd	r26, Z+2	; 0x02
    47e4:	b3 81       	ldd	r27, Z+3	; 0x03
    47e6:	bc 01       	movw	r22, r24
    47e8:	cd 01       	movw	r24, r26
    47ea:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <LCD_floatToString>
					switch(capacitanceUnit){
    47ee:	fe 01       	movw	r30, r28
    47f0:	e4 5a       	subi	r30, 0xA4	; 164
    47f2:	ff 4f       	sbci	r31, 0xFF	; 255
    47f4:	80 81       	ld	r24, Z
    47f6:	e8 2f       	mov	r30, r24
    47f8:	f0 e0       	ldi	r31, 0x00	; 0
    47fa:	a1 96       	adiw	r28, 0x21	; 33
    47fc:	ff af       	std	Y+63, r31	; 0x3f
    47fe:	ee af       	std	Y+62, r30	; 0x3e
    4800:	a1 97       	sbiw	r28, 0x21	; 33
    4802:	a1 96       	adiw	r28, 0x21	; 33
    4804:	2e ad       	ldd	r18, Y+62	; 0x3e
    4806:	3f ad       	ldd	r19, Y+63	; 0x3f
    4808:	a1 97       	sbiw	r28, 0x21	; 33
    480a:	22 30       	cpi	r18, 0x02	; 2
    480c:	31 05       	cpc	r19, r1
    480e:	71 f1       	breq	.+92     	; 0x486c <main+0x616>
    4810:	a1 96       	adiw	r28, 0x21	; 33
    4812:	8e ad       	ldd	r24, Y+62	; 0x3e
    4814:	9f ad       	ldd	r25, Y+63	; 0x3f
    4816:	a1 97       	sbiw	r28, 0x21	; 33
    4818:	83 30       	cpi	r24, 0x03	; 3
    481a:	91 05       	cpc	r25, r1
    481c:	74 f4       	brge	.+28     	; 0x483a <main+0x5e4>
    481e:	a1 96       	adiw	r28, 0x21	; 33
    4820:	ee ad       	ldd	r30, Y+62	; 0x3e
    4822:	ff ad       	ldd	r31, Y+63	; 0x3f
    4824:	a1 97       	sbiw	r28, 0x21	; 33
    4826:	30 97       	sbiw	r30, 0x00	; 0
    4828:	b9 f0       	breq	.+46     	; 0x4858 <main+0x602>
    482a:	a1 96       	adiw	r28, 0x21	; 33
    482c:	2e ad       	ldd	r18, Y+62	; 0x3e
    482e:	3f ad       	ldd	r19, Y+63	; 0x3f
    4830:	a1 97       	sbiw	r28, 0x21	; 33
    4832:	21 30       	cpi	r18, 0x01	; 1
    4834:	31 05       	cpc	r19, r1
    4836:	a9 f0       	breq	.+42     	; 0x4862 <main+0x60c>
    4838:	9e c0       	rjmp	.+316    	; 0x4976 <main+0x720>
    483a:	a1 96       	adiw	r28, 0x21	; 33
    483c:	8e ad       	ldd	r24, Y+62	; 0x3e
    483e:	9f ad       	ldd	r25, Y+63	; 0x3f
    4840:	a1 97       	sbiw	r28, 0x21	; 33
    4842:	83 30       	cpi	r24, 0x03	; 3
    4844:	91 05       	cpc	r25, r1
    4846:	b9 f0       	breq	.+46     	; 0x4876 <main+0x620>
    4848:	a1 96       	adiw	r28, 0x21	; 33
    484a:	ee ad       	ldd	r30, Y+62	; 0x3e
    484c:	ff ad       	ldd	r31, Y+63	; 0x3f
    484e:	a1 97       	sbiw	r28, 0x21	; 33
    4850:	e4 30       	cpi	r30, 0x04	; 4
    4852:	f1 05       	cpc	r31, r1
    4854:	a9 f0       	breq	.+42     	; 0x4880 <main+0x62a>
    4856:	8f c0       	rjmp	.+286    	; 0x4976 <main+0x720>
					case PICO_FARAD:
						LCD_displayString("pF");
    4858:	85 e0       	ldi	r24, 0x05	; 5
    485a:	91 e0       	ldi	r25, 0x01	; 1
    485c:	0e 94 90 14 	call	0x2920	; 0x2920 <LCD_displayString>
    4860:	8a c0       	rjmp	.+276    	; 0x4976 <main+0x720>
						break;
					case NANO_FARAD:
						LCD_displayString("nF");
    4862:	88 e0       	ldi	r24, 0x08	; 8
    4864:	91 e0       	ldi	r25, 0x01	; 1
    4866:	0e 94 90 14 	call	0x2920	; 0x2920 <LCD_displayString>
    486a:	85 c0       	rjmp	.+266    	; 0x4976 <main+0x720>
						break;
					case MICRO_FARAD:
						LCD_displayString("uF");
    486c:	8b e0       	ldi	r24, 0x0B	; 11
    486e:	91 e0       	ldi	r25, 0x01	; 1
    4870:	0e 94 90 14 	call	0x2920	; 0x2920 <LCD_displayString>
    4874:	80 c0       	rjmp	.+256    	; 0x4976 <main+0x720>
						break;
					case MILLI_FARAD:
						LCD_displayString("mF");
    4876:	8e e0       	ldi	r24, 0x0E	; 14
    4878:	91 e0       	ldi	r25, 0x01	; 1
    487a:	0e 94 90 14 	call	0x2920	; 0x2920 <LCD_displayString>
    487e:	7b c0       	rjmp	.+246    	; 0x4976 <main+0x720>
						break;
					case FARAD:
						LCD_displayString("F");
    4880:	81 e1       	ldi	r24, 0x11	; 17
    4882:	91 e0       	ldi	r25, 0x01	; 1
    4884:	0e 94 90 14 	call	0x2920	; 0x2920 <LCD_displayString>
    4888:	76 c0       	rjmp	.+236    	; 0x4976 <main+0x720>
				}
				break;

			case INDUCTOMETER_MODE:
				/* Measure inductance */
				inductance = INDUCTANCE_METER_getReading();
    488a:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <INDUCTANCE_METER_getReading>
    488e:	dc 01       	movw	r26, r24
    4890:	cb 01       	movw	r24, r22
    4892:	fe 01       	movw	r30, r28
    4894:	fd 96       	adiw	r30, 0x3d	; 61
    4896:	80 83       	st	Z, r24
    4898:	91 83       	std	Z+1, r25	; 0x01
    489a:	a2 83       	std	Z+2, r26	; 0x02
    489c:	b3 83       	std	Z+3, r27	; 0x03
				if(inductance < 1000){
    489e:	fe 01       	movw	r30, r28
    48a0:	fd 96       	adiw	r30, 0x3d	; 61
    48a2:	60 81       	ld	r22, Z
    48a4:	71 81       	ldd	r23, Z+1	; 0x01
    48a6:	82 81       	ldd	r24, Z+2	; 0x02
    48a8:	93 81       	ldd	r25, Z+3	; 0x03
    48aa:	20 e0       	ldi	r18, 0x00	; 0
    48ac:	30 e0       	ldi	r19, 0x00	; 0
    48ae:	4a e7       	ldi	r20, 0x7A	; 122
    48b0:	54 e4       	ldi	r21, 0x44	; 68
    48b2:	0e 94 93 25 	call	0x4b26	; 0x4b26 <__cmpsf2>
    48b6:	88 23       	and	r24, r24
    48b8:	7c f4       	brge	.+30     	; 0x48d8 <main+0x682>
					LCD_floatToString(inductance); /* Display inductance value */
    48ba:	fe 01       	movw	r30, r28
    48bc:	fd 96       	adiw	r30, 0x3d	; 61
    48be:	80 81       	ld	r24, Z
    48c0:	91 81       	ldd	r25, Z+1	; 0x01
    48c2:	a2 81       	ldd	r26, Z+2	; 0x02
    48c4:	b3 81       	ldd	r27, Z+3	; 0x03
    48c6:	bc 01       	movw	r22, r24
    48c8:	cd 01       	movw	r24, r26
    48ca:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <LCD_floatToString>
					LCD_displayString("uH");
    48ce:	83 e1       	ldi	r24, 0x13	; 19
    48d0:	91 e0       	ldi	r25, 0x01	; 1
    48d2:	0e 94 90 14 	call	0x2920	; 0x2920 <LCD_displayString>
    48d6:	4f c0       	rjmp	.+158    	; 0x4976 <main+0x720>
				}
				else{
					LCD_floatToString(inductance/1000); /* Display inductance value */
    48d8:	fe 01       	movw	r30, r28
    48da:	fd 96       	adiw	r30, 0x3d	; 61
    48dc:	60 81       	ld	r22, Z
    48de:	71 81       	ldd	r23, Z+1	; 0x01
    48e0:	82 81       	ldd	r24, Z+2	; 0x02
    48e2:	93 81       	ldd	r25, Z+3	; 0x03
    48e4:	20 e0       	ldi	r18, 0x00	; 0
    48e6:	30 e0       	ldi	r19, 0x00	; 0
    48e8:	4a e7       	ldi	r20, 0x7A	; 122
    48ea:	54 e4       	ldi	r21, 0x44	; 68
    48ec:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__divsf3>
    48f0:	dc 01       	movw	r26, r24
    48f2:	cb 01       	movw	r24, r22
    48f4:	bc 01       	movw	r22, r24
    48f6:	cd 01       	movw	r24, r26
    48f8:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <LCD_floatToString>
					LCD_displayString("mH");
    48fc:	86 e1       	ldi	r24, 0x16	; 22
    48fe:	91 e0       	ldi	r25, 0x01	; 1
    4900:	0e 94 90 14 	call	0x2920	; 0x2920 <LCD_displayString>
    4904:	38 c0       	rjmp	.+112    	; 0x4976 <main+0x720>

				break;

			case CURRENTMETER_MODE:
				/* Measure current */
				current = CURRENT_METER_getReading(&ads);
    4906:	ce 01       	movw	r24, r28
    4908:	81 5b       	subi	r24, 0xB1	; 177
    490a:	9f 4f       	sbci	r25, 0xFF	; 255
    490c:	0e 94 31 18 	call	0x3062	; 0x3062 <CURRENT_METER_getReading>
    4910:	dc 01       	movw	r26, r24
    4912:	cb 01       	movw	r24, r22
    4914:	89 af       	std	Y+57, r24	; 0x39
    4916:	9a af       	std	Y+58, r25	; 0x3a
    4918:	ab af       	std	Y+59, r26	; 0x3b
    491a:	bc af       	std	Y+60, r27	; 0x3c
				if(current < 1){
    491c:	69 ad       	ldd	r22, Y+57	; 0x39
    491e:	7a ad       	ldd	r23, Y+58	; 0x3a
    4920:	8b ad       	ldd	r24, Y+59	; 0x3b
    4922:	9c ad       	ldd	r25, Y+60	; 0x3c
    4924:	20 e0       	ldi	r18, 0x00	; 0
    4926:	30 e0       	ldi	r19, 0x00	; 0
    4928:	40 e8       	ldi	r20, 0x80	; 128
    492a:	5f e3       	ldi	r21, 0x3F	; 63
    492c:	0e 94 93 25 	call	0x4b26	; 0x4b26 <__cmpsf2>
    4930:	88 23       	and	r24, r24
    4932:	ac f4       	brge	.+42     	; 0x495e <main+0x708>
					LCD_floatToString(current*1000); /* Display current in mA */
    4934:	69 ad       	ldd	r22, Y+57	; 0x39
    4936:	7a ad       	ldd	r23, Y+58	; 0x3a
    4938:	8b ad       	ldd	r24, Y+59	; 0x3b
    493a:	9c ad       	ldd	r25, Y+60	; 0x3c
    493c:	20 e0       	ldi	r18, 0x00	; 0
    493e:	30 e0       	ldi	r19, 0x00	; 0
    4940:	4a e7       	ldi	r20, 0x7A	; 122
    4942:	54 e4       	ldi	r21, 0x44	; 68
    4944:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__mulsf3>
    4948:	dc 01       	movw	r26, r24
    494a:	cb 01       	movw	r24, r22
    494c:	bc 01       	movw	r22, r24
    494e:	cd 01       	movw	r24, r26
    4950:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <LCD_floatToString>
					LCD_displayString("mA");
    4954:	89 e1       	ldi	r24, 0x19	; 25
    4956:	91 e0       	ldi	r25, 0x01	; 1
    4958:	0e 94 90 14 	call	0x2920	; 0x2920 <LCD_displayString>
    495c:	0c c0       	rjmp	.+24     	; 0x4976 <main+0x720>
				}
				else{
					LCD_floatToString(current); /* Display current in A */
    495e:	89 ad       	ldd	r24, Y+57	; 0x39
    4960:	9a ad       	ldd	r25, Y+58	; 0x3a
    4962:	ab ad       	ldd	r26, Y+59	; 0x3b
    4964:	bc ad       	ldd	r27, Y+60	; 0x3c
    4966:	bc 01       	movw	r22, r24
    4968:	cd 01       	movw	r24, r26
    496a:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <LCD_floatToString>
					LCD_displayString("A");
    496e:	8c e1       	ldi	r24, 0x1C	; 28
    4970:	91 e0       	ldi	r25, 0x01	; 1
    4972:	0e 94 90 14 	call	0x2920	; 0x2920 <LCD_displayString>
    4976:	80 e0       	ldi	r24, 0x00	; 0
    4978:	90 e0       	ldi	r25, 0x00	; 0
    497a:	aa ef       	ldi	r26, 0xFA	; 250
    497c:	b3 e4       	ldi	r27, 0x43	; 67
    497e:	8b 87       	std	Y+11, r24	; 0x0b
    4980:	9c 87       	std	Y+12, r25	; 0x0c
    4982:	ad 87       	std	Y+13, r26	; 0x0d
    4984:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4986:	6b 85       	ldd	r22, Y+11	; 0x0b
    4988:	7c 85       	ldd	r23, Y+12	; 0x0c
    498a:	8d 85       	ldd	r24, Y+13	; 0x0d
    498c:	9e 85       	ldd	r25, Y+14	; 0x0e
    498e:	20 e0       	ldi	r18, 0x00	; 0
    4990:	30 e0       	ldi	r19, 0x00	; 0
    4992:	4a e7       	ldi	r20, 0x7A	; 122
    4994:	55 e4       	ldi	r21, 0x45	; 69
    4996:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__mulsf3>
    499a:	dc 01       	movw	r26, r24
    499c:	cb 01       	movw	r24, r22
    499e:	8f 83       	std	Y+7, r24	; 0x07
    49a0:	98 87       	std	Y+8, r25	; 0x08
    49a2:	a9 87       	std	Y+9, r26	; 0x09
    49a4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    49a6:	6f 81       	ldd	r22, Y+7	; 0x07
    49a8:	78 85       	ldd	r23, Y+8	; 0x08
    49aa:	89 85       	ldd	r24, Y+9	; 0x09
    49ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    49ae:	20 e0       	ldi	r18, 0x00	; 0
    49b0:	30 e0       	ldi	r19, 0x00	; 0
    49b2:	40 e8       	ldi	r20, 0x80	; 128
    49b4:	5f e3       	ldi	r21, 0x3F	; 63
    49b6:	0e 94 93 25 	call	0x4b26	; 0x4b26 <__cmpsf2>
    49ba:	88 23       	and	r24, r24
    49bc:	2c f4       	brge	.+10     	; 0x49c8 <main+0x772>
		__ticks = 1;
    49be:	81 e0       	ldi	r24, 0x01	; 1
    49c0:	90 e0       	ldi	r25, 0x00	; 0
    49c2:	9e 83       	std	Y+6, r25	; 0x06
    49c4:	8d 83       	std	Y+5, r24	; 0x05
    49c6:	3f c0       	rjmp	.+126    	; 0x4a46 <main+0x7f0>
	else if (__tmp > 65535)
    49c8:	6f 81       	ldd	r22, Y+7	; 0x07
    49ca:	78 85       	ldd	r23, Y+8	; 0x08
    49cc:	89 85       	ldd	r24, Y+9	; 0x09
    49ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    49d0:	20 e0       	ldi	r18, 0x00	; 0
    49d2:	3f ef       	ldi	r19, 0xFF	; 255
    49d4:	4f e7       	ldi	r20, 0x7F	; 127
    49d6:	57 e4       	ldi	r21, 0x47	; 71
    49d8:	0e 94 dd 26 	call	0x4dba	; 0x4dba <__gesf2>
    49dc:	18 16       	cp	r1, r24
    49de:	4c f5       	brge	.+82     	; 0x4a32 <main+0x7dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    49e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    49e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    49e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    49e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    49e8:	20 e0       	ldi	r18, 0x00	; 0
    49ea:	30 e0       	ldi	r19, 0x00	; 0
    49ec:	40 e2       	ldi	r20, 0x20	; 32
    49ee:	51 e4       	ldi	r21, 0x41	; 65
    49f0:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__mulsf3>
    49f4:	dc 01       	movw	r26, r24
    49f6:	cb 01       	movw	r24, r22
    49f8:	bc 01       	movw	r22, r24
    49fa:	cd 01       	movw	r24, r26
    49fc:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <__fixunssfsi>
    4a00:	dc 01       	movw	r26, r24
    4a02:	cb 01       	movw	r24, r22
    4a04:	9e 83       	std	Y+6, r25	; 0x06
    4a06:	8d 83       	std	Y+5, r24	; 0x05
    4a08:	0f c0       	rjmp	.+30     	; 0x4a28 <main+0x7d2>
    4a0a:	80 e9       	ldi	r24, 0x90	; 144
    4a0c:	91 e0       	ldi	r25, 0x01	; 1
    4a0e:	9c 83       	std	Y+4, r25	; 0x04
    4a10:	8b 83       	std	Y+3, r24	; 0x03
    4a12:	8b 81       	ldd	r24, Y+3	; 0x03
    4a14:	9c 81       	ldd	r25, Y+4	; 0x04
    4a16:	01 97       	sbiw	r24, 0x01	; 1
    4a18:	f1 f7       	brne	.-4      	; 0x4a16 <main+0x7c0>
    4a1a:	9c 83       	std	Y+4, r25	; 0x04
    4a1c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a1e:	8d 81       	ldd	r24, Y+5	; 0x05
    4a20:	9e 81       	ldd	r25, Y+6	; 0x06
    4a22:	01 97       	sbiw	r24, 0x01	; 1
    4a24:	9e 83       	std	Y+6, r25	; 0x06
    4a26:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a28:	8d 81       	ldd	r24, Y+5	; 0x05
    4a2a:	9e 81       	ldd	r25, Y+6	; 0x06
    4a2c:	00 97       	sbiw	r24, 0x00	; 0
    4a2e:	69 f7       	brne	.-38     	; 0x4a0a <main+0x7b4>
    4a30:	04 ce       	rjmp	.-1016   	; 0x463a <main+0x3e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a32:	6f 81       	ldd	r22, Y+7	; 0x07
    4a34:	78 85       	ldd	r23, Y+8	; 0x08
    4a36:	89 85       	ldd	r24, Y+9	; 0x09
    4a38:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a3a:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <__fixunssfsi>
    4a3e:	dc 01       	movw	r26, r24
    4a40:	cb 01       	movw	r24, r22
    4a42:	9e 83       	std	Y+6, r25	; 0x06
    4a44:	8d 83       	std	Y+5, r24	; 0x05
    4a46:	8d 81       	ldd	r24, Y+5	; 0x05
    4a48:	9e 81       	ldd	r25, Y+6	; 0x06
    4a4a:	9a 83       	std	Y+2, r25	; 0x02
    4a4c:	89 83       	std	Y+1, r24	; 0x01
    4a4e:	89 81       	ldd	r24, Y+1	; 0x01
    4a50:	9a 81       	ldd	r25, Y+2	; 0x02
    4a52:	01 97       	sbiw	r24, 0x01	; 1
    4a54:	f1 f7       	brne	.-4      	; 0x4a52 <main+0x7fc>
    4a56:	9a 83       	std	Y+2, r25	; 0x02
    4a58:	89 83       	std	Y+1, r24	; 0x01
    4a5a:	ef cd       	rjmp	.-1058   	; 0x463a <main+0x3e4>

00004a5c <__subsf3>:
    4a5c:	50 58       	subi	r21, 0x80	; 128

00004a5e <__addsf3>:
    4a5e:	bb 27       	eor	r27, r27
    4a60:	aa 27       	eor	r26, r26
    4a62:	0e d0       	rcall	.+28     	; 0x4a80 <__addsf3x>
    4a64:	70 c1       	rjmp	.+736    	; 0x4d46 <__fp_round>
    4a66:	61 d1       	rcall	.+706    	; 0x4d2a <__fp_pscA>
    4a68:	30 f0       	brcs	.+12     	; 0x4a76 <__addsf3+0x18>
    4a6a:	66 d1       	rcall	.+716    	; 0x4d38 <__fp_pscB>
    4a6c:	20 f0       	brcs	.+8      	; 0x4a76 <__addsf3+0x18>
    4a6e:	31 f4       	brne	.+12     	; 0x4a7c <__addsf3+0x1e>
    4a70:	9f 3f       	cpi	r25, 0xFF	; 255
    4a72:	11 f4       	brne	.+4      	; 0x4a78 <__addsf3+0x1a>
    4a74:	1e f4       	brtc	.+6      	; 0x4a7c <__addsf3+0x1e>
    4a76:	56 c1       	rjmp	.+684    	; 0x4d24 <__fp_nan>
    4a78:	0e f4       	brtc	.+2      	; 0x4a7c <__addsf3+0x1e>
    4a7a:	e0 95       	com	r30
    4a7c:	e7 fb       	bst	r30, 7
    4a7e:	4c c1       	rjmp	.+664    	; 0x4d18 <__fp_inf>

00004a80 <__addsf3x>:
    4a80:	e9 2f       	mov	r30, r25
    4a82:	72 d1       	rcall	.+740    	; 0x4d68 <__fp_split3>
    4a84:	80 f3       	brcs	.-32     	; 0x4a66 <__addsf3+0x8>
    4a86:	ba 17       	cp	r27, r26
    4a88:	62 07       	cpc	r22, r18
    4a8a:	73 07       	cpc	r23, r19
    4a8c:	84 07       	cpc	r24, r20
    4a8e:	95 07       	cpc	r25, r21
    4a90:	18 f0       	brcs	.+6      	; 0x4a98 <__addsf3x+0x18>
    4a92:	71 f4       	brne	.+28     	; 0x4ab0 <__addsf3x+0x30>
    4a94:	9e f5       	brtc	.+102    	; 0x4afc <__addsf3x+0x7c>
    4a96:	8a c1       	rjmp	.+788    	; 0x4dac <__fp_zero>
    4a98:	0e f4       	brtc	.+2      	; 0x4a9c <__addsf3x+0x1c>
    4a9a:	e0 95       	com	r30
    4a9c:	0b 2e       	mov	r0, r27
    4a9e:	ba 2f       	mov	r27, r26
    4aa0:	a0 2d       	mov	r26, r0
    4aa2:	0b 01       	movw	r0, r22
    4aa4:	b9 01       	movw	r22, r18
    4aa6:	90 01       	movw	r18, r0
    4aa8:	0c 01       	movw	r0, r24
    4aaa:	ca 01       	movw	r24, r20
    4aac:	a0 01       	movw	r20, r0
    4aae:	11 24       	eor	r1, r1
    4ab0:	ff 27       	eor	r31, r31
    4ab2:	59 1b       	sub	r21, r25
    4ab4:	99 f0       	breq	.+38     	; 0x4adc <__addsf3x+0x5c>
    4ab6:	59 3f       	cpi	r21, 0xF9	; 249
    4ab8:	50 f4       	brcc	.+20     	; 0x4ace <__addsf3x+0x4e>
    4aba:	50 3e       	cpi	r21, 0xE0	; 224
    4abc:	68 f1       	brcs	.+90     	; 0x4b18 <__addsf3x+0x98>
    4abe:	1a 16       	cp	r1, r26
    4ac0:	f0 40       	sbci	r31, 0x00	; 0
    4ac2:	a2 2f       	mov	r26, r18
    4ac4:	23 2f       	mov	r18, r19
    4ac6:	34 2f       	mov	r19, r20
    4ac8:	44 27       	eor	r20, r20
    4aca:	58 5f       	subi	r21, 0xF8	; 248
    4acc:	f3 cf       	rjmp	.-26     	; 0x4ab4 <__addsf3x+0x34>
    4ace:	46 95       	lsr	r20
    4ad0:	37 95       	ror	r19
    4ad2:	27 95       	ror	r18
    4ad4:	a7 95       	ror	r26
    4ad6:	f0 40       	sbci	r31, 0x00	; 0
    4ad8:	53 95       	inc	r21
    4ada:	c9 f7       	brne	.-14     	; 0x4ace <__addsf3x+0x4e>
    4adc:	7e f4       	brtc	.+30     	; 0x4afc <__addsf3x+0x7c>
    4ade:	1f 16       	cp	r1, r31
    4ae0:	ba 0b       	sbc	r27, r26
    4ae2:	62 0b       	sbc	r22, r18
    4ae4:	73 0b       	sbc	r23, r19
    4ae6:	84 0b       	sbc	r24, r20
    4ae8:	ba f0       	brmi	.+46     	; 0x4b18 <__addsf3x+0x98>
    4aea:	91 50       	subi	r25, 0x01	; 1
    4aec:	a1 f0       	breq	.+40     	; 0x4b16 <__addsf3x+0x96>
    4aee:	ff 0f       	add	r31, r31
    4af0:	bb 1f       	adc	r27, r27
    4af2:	66 1f       	adc	r22, r22
    4af4:	77 1f       	adc	r23, r23
    4af6:	88 1f       	adc	r24, r24
    4af8:	c2 f7       	brpl	.-16     	; 0x4aea <__addsf3x+0x6a>
    4afa:	0e c0       	rjmp	.+28     	; 0x4b18 <__addsf3x+0x98>
    4afc:	ba 0f       	add	r27, r26
    4afe:	62 1f       	adc	r22, r18
    4b00:	73 1f       	adc	r23, r19
    4b02:	84 1f       	adc	r24, r20
    4b04:	48 f4       	brcc	.+18     	; 0x4b18 <__addsf3x+0x98>
    4b06:	87 95       	ror	r24
    4b08:	77 95       	ror	r23
    4b0a:	67 95       	ror	r22
    4b0c:	b7 95       	ror	r27
    4b0e:	f7 95       	ror	r31
    4b10:	9e 3f       	cpi	r25, 0xFE	; 254
    4b12:	08 f0       	brcs	.+2      	; 0x4b16 <__addsf3x+0x96>
    4b14:	b3 cf       	rjmp	.-154    	; 0x4a7c <__addsf3+0x1e>
    4b16:	93 95       	inc	r25
    4b18:	88 0f       	add	r24, r24
    4b1a:	08 f0       	brcs	.+2      	; 0x4b1e <__addsf3x+0x9e>
    4b1c:	99 27       	eor	r25, r25
    4b1e:	ee 0f       	add	r30, r30
    4b20:	97 95       	ror	r25
    4b22:	87 95       	ror	r24
    4b24:	08 95       	ret

00004b26 <__cmpsf2>:
    4b26:	d4 d0       	rcall	.+424    	; 0x4cd0 <__fp_cmp>
    4b28:	08 f4       	brcc	.+2      	; 0x4b2c <__cmpsf2+0x6>
    4b2a:	81 e0       	ldi	r24, 0x01	; 1
    4b2c:	08 95       	ret

00004b2e <__divsf3>:
    4b2e:	0c d0       	rcall	.+24     	; 0x4b48 <__divsf3x>
    4b30:	0a c1       	rjmp	.+532    	; 0x4d46 <__fp_round>
    4b32:	02 d1       	rcall	.+516    	; 0x4d38 <__fp_pscB>
    4b34:	40 f0       	brcs	.+16     	; 0x4b46 <__divsf3+0x18>
    4b36:	f9 d0       	rcall	.+498    	; 0x4d2a <__fp_pscA>
    4b38:	30 f0       	brcs	.+12     	; 0x4b46 <__divsf3+0x18>
    4b3a:	21 f4       	brne	.+8      	; 0x4b44 <__divsf3+0x16>
    4b3c:	5f 3f       	cpi	r21, 0xFF	; 255
    4b3e:	19 f0       	breq	.+6      	; 0x4b46 <__divsf3+0x18>
    4b40:	eb c0       	rjmp	.+470    	; 0x4d18 <__fp_inf>
    4b42:	51 11       	cpse	r21, r1
    4b44:	34 c1       	rjmp	.+616    	; 0x4dae <__fp_szero>
    4b46:	ee c0       	rjmp	.+476    	; 0x4d24 <__fp_nan>

00004b48 <__divsf3x>:
    4b48:	0f d1       	rcall	.+542    	; 0x4d68 <__fp_split3>
    4b4a:	98 f3       	brcs	.-26     	; 0x4b32 <__divsf3+0x4>

00004b4c <__divsf3_pse>:
    4b4c:	99 23       	and	r25, r25
    4b4e:	c9 f3       	breq	.-14     	; 0x4b42 <__divsf3+0x14>
    4b50:	55 23       	and	r21, r21
    4b52:	b1 f3       	breq	.-20     	; 0x4b40 <__divsf3+0x12>
    4b54:	95 1b       	sub	r25, r21
    4b56:	55 0b       	sbc	r21, r21
    4b58:	bb 27       	eor	r27, r27
    4b5a:	aa 27       	eor	r26, r26
    4b5c:	62 17       	cp	r22, r18
    4b5e:	73 07       	cpc	r23, r19
    4b60:	84 07       	cpc	r24, r20
    4b62:	38 f0       	brcs	.+14     	; 0x4b72 <__divsf3_pse+0x26>
    4b64:	9f 5f       	subi	r25, 0xFF	; 255
    4b66:	5f 4f       	sbci	r21, 0xFF	; 255
    4b68:	22 0f       	add	r18, r18
    4b6a:	33 1f       	adc	r19, r19
    4b6c:	44 1f       	adc	r20, r20
    4b6e:	aa 1f       	adc	r26, r26
    4b70:	a9 f3       	breq	.-22     	; 0x4b5c <__divsf3_pse+0x10>
    4b72:	33 d0       	rcall	.+102    	; 0x4bda <__divsf3_pse+0x8e>
    4b74:	0e 2e       	mov	r0, r30
    4b76:	3a f0       	brmi	.+14     	; 0x4b86 <__divsf3_pse+0x3a>
    4b78:	e0 e8       	ldi	r30, 0x80	; 128
    4b7a:	30 d0       	rcall	.+96     	; 0x4bdc <__divsf3_pse+0x90>
    4b7c:	91 50       	subi	r25, 0x01	; 1
    4b7e:	50 40       	sbci	r21, 0x00	; 0
    4b80:	e6 95       	lsr	r30
    4b82:	00 1c       	adc	r0, r0
    4b84:	ca f7       	brpl	.-14     	; 0x4b78 <__divsf3_pse+0x2c>
    4b86:	29 d0       	rcall	.+82     	; 0x4bda <__divsf3_pse+0x8e>
    4b88:	fe 2f       	mov	r31, r30
    4b8a:	27 d0       	rcall	.+78     	; 0x4bda <__divsf3_pse+0x8e>
    4b8c:	66 0f       	add	r22, r22
    4b8e:	77 1f       	adc	r23, r23
    4b90:	88 1f       	adc	r24, r24
    4b92:	bb 1f       	adc	r27, r27
    4b94:	26 17       	cp	r18, r22
    4b96:	37 07       	cpc	r19, r23
    4b98:	48 07       	cpc	r20, r24
    4b9a:	ab 07       	cpc	r26, r27
    4b9c:	b0 e8       	ldi	r27, 0x80	; 128
    4b9e:	09 f0       	breq	.+2      	; 0x4ba2 <__divsf3_pse+0x56>
    4ba0:	bb 0b       	sbc	r27, r27
    4ba2:	80 2d       	mov	r24, r0
    4ba4:	bf 01       	movw	r22, r30
    4ba6:	ff 27       	eor	r31, r31
    4ba8:	93 58       	subi	r25, 0x83	; 131
    4baa:	5f 4f       	sbci	r21, 0xFF	; 255
    4bac:	2a f0       	brmi	.+10     	; 0x4bb8 <__divsf3_pse+0x6c>
    4bae:	9e 3f       	cpi	r25, 0xFE	; 254
    4bb0:	51 05       	cpc	r21, r1
    4bb2:	68 f0       	brcs	.+26     	; 0x4bce <__divsf3_pse+0x82>
    4bb4:	b1 c0       	rjmp	.+354    	; 0x4d18 <__fp_inf>
    4bb6:	fb c0       	rjmp	.+502    	; 0x4dae <__fp_szero>
    4bb8:	5f 3f       	cpi	r21, 0xFF	; 255
    4bba:	ec f3       	brlt	.-6      	; 0x4bb6 <__divsf3_pse+0x6a>
    4bbc:	98 3e       	cpi	r25, 0xE8	; 232
    4bbe:	dc f3       	brlt	.-10     	; 0x4bb6 <__divsf3_pse+0x6a>
    4bc0:	86 95       	lsr	r24
    4bc2:	77 95       	ror	r23
    4bc4:	67 95       	ror	r22
    4bc6:	b7 95       	ror	r27
    4bc8:	f7 95       	ror	r31
    4bca:	9f 5f       	subi	r25, 0xFF	; 255
    4bcc:	c9 f7       	brne	.-14     	; 0x4bc0 <__divsf3_pse+0x74>
    4bce:	88 0f       	add	r24, r24
    4bd0:	91 1d       	adc	r25, r1
    4bd2:	96 95       	lsr	r25
    4bd4:	87 95       	ror	r24
    4bd6:	97 f9       	bld	r25, 7
    4bd8:	08 95       	ret
    4bda:	e1 e0       	ldi	r30, 0x01	; 1
    4bdc:	66 0f       	add	r22, r22
    4bde:	77 1f       	adc	r23, r23
    4be0:	88 1f       	adc	r24, r24
    4be2:	bb 1f       	adc	r27, r27
    4be4:	62 17       	cp	r22, r18
    4be6:	73 07       	cpc	r23, r19
    4be8:	84 07       	cpc	r24, r20
    4bea:	ba 07       	cpc	r27, r26
    4bec:	20 f0       	brcs	.+8      	; 0x4bf6 <__divsf3_pse+0xaa>
    4bee:	62 1b       	sub	r22, r18
    4bf0:	73 0b       	sbc	r23, r19
    4bf2:	84 0b       	sbc	r24, r20
    4bf4:	ba 0b       	sbc	r27, r26
    4bf6:	ee 1f       	adc	r30, r30
    4bf8:	88 f7       	brcc	.-30     	; 0x4bdc <__divsf3_pse+0x90>
    4bfa:	e0 95       	com	r30
    4bfc:	08 95       	ret

00004bfe <__fixunssfsi>:
    4bfe:	bc d0       	rcall	.+376    	; 0x4d78 <__fp_splitA>
    4c00:	88 f0       	brcs	.+34     	; 0x4c24 <__fixunssfsi+0x26>
    4c02:	9f 57       	subi	r25, 0x7F	; 127
    4c04:	90 f0       	brcs	.+36     	; 0x4c2a <__fixunssfsi+0x2c>
    4c06:	b9 2f       	mov	r27, r25
    4c08:	99 27       	eor	r25, r25
    4c0a:	b7 51       	subi	r27, 0x17	; 23
    4c0c:	a0 f0       	brcs	.+40     	; 0x4c36 <__fixunssfsi+0x38>
    4c0e:	d1 f0       	breq	.+52     	; 0x4c44 <__fixunssfsi+0x46>
    4c10:	66 0f       	add	r22, r22
    4c12:	77 1f       	adc	r23, r23
    4c14:	88 1f       	adc	r24, r24
    4c16:	99 1f       	adc	r25, r25
    4c18:	1a f0       	brmi	.+6      	; 0x4c20 <__fixunssfsi+0x22>
    4c1a:	ba 95       	dec	r27
    4c1c:	c9 f7       	brne	.-14     	; 0x4c10 <__fixunssfsi+0x12>
    4c1e:	12 c0       	rjmp	.+36     	; 0x4c44 <__fixunssfsi+0x46>
    4c20:	b1 30       	cpi	r27, 0x01	; 1
    4c22:	81 f0       	breq	.+32     	; 0x4c44 <__fixunssfsi+0x46>
    4c24:	c3 d0       	rcall	.+390    	; 0x4dac <__fp_zero>
    4c26:	b1 e0       	ldi	r27, 0x01	; 1
    4c28:	08 95       	ret
    4c2a:	c0 c0       	rjmp	.+384    	; 0x4dac <__fp_zero>
    4c2c:	67 2f       	mov	r22, r23
    4c2e:	78 2f       	mov	r23, r24
    4c30:	88 27       	eor	r24, r24
    4c32:	b8 5f       	subi	r27, 0xF8	; 248
    4c34:	39 f0       	breq	.+14     	; 0x4c44 <__fixunssfsi+0x46>
    4c36:	b9 3f       	cpi	r27, 0xF9	; 249
    4c38:	cc f3       	brlt	.-14     	; 0x4c2c <__fixunssfsi+0x2e>
    4c3a:	86 95       	lsr	r24
    4c3c:	77 95       	ror	r23
    4c3e:	67 95       	ror	r22
    4c40:	b3 95       	inc	r27
    4c42:	d9 f7       	brne	.-10     	; 0x4c3a <__fixunssfsi+0x3c>
    4c44:	3e f4       	brtc	.+14     	; 0x4c54 <__fixunssfsi+0x56>
    4c46:	90 95       	com	r25
    4c48:	80 95       	com	r24
    4c4a:	70 95       	com	r23
    4c4c:	61 95       	neg	r22
    4c4e:	7f 4f       	sbci	r23, 0xFF	; 255
    4c50:	8f 4f       	sbci	r24, 0xFF	; 255
    4c52:	9f 4f       	sbci	r25, 0xFF	; 255
    4c54:	08 95       	ret

00004c56 <__floatunsisf>:
    4c56:	e8 94       	clt
    4c58:	09 c0       	rjmp	.+18     	; 0x4c6c <__floatsisf+0x12>

00004c5a <__floatsisf>:
    4c5a:	97 fb       	bst	r25, 7
    4c5c:	3e f4       	brtc	.+14     	; 0x4c6c <__floatsisf+0x12>
    4c5e:	90 95       	com	r25
    4c60:	80 95       	com	r24
    4c62:	70 95       	com	r23
    4c64:	61 95       	neg	r22
    4c66:	7f 4f       	sbci	r23, 0xFF	; 255
    4c68:	8f 4f       	sbci	r24, 0xFF	; 255
    4c6a:	9f 4f       	sbci	r25, 0xFF	; 255
    4c6c:	99 23       	and	r25, r25
    4c6e:	a9 f0       	breq	.+42     	; 0x4c9a <__floatsisf+0x40>
    4c70:	f9 2f       	mov	r31, r25
    4c72:	96 e9       	ldi	r25, 0x96	; 150
    4c74:	bb 27       	eor	r27, r27
    4c76:	93 95       	inc	r25
    4c78:	f6 95       	lsr	r31
    4c7a:	87 95       	ror	r24
    4c7c:	77 95       	ror	r23
    4c7e:	67 95       	ror	r22
    4c80:	b7 95       	ror	r27
    4c82:	f1 11       	cpse	r31, r1
    4c84:	f8 cf       	rjmp	.-16     	; 0x4c76 <__floatsisf+0x1c>
    4c86:	fa f4       	brpl	.+62     	; 0x4cc6 <__floatsisf+0x6c>
    4c88:	bb 0f       	add	r27, r27
    4c8a:	11 f4       	brne	.+4      	; 0x4c90 <__floatsisf+0x36>
    4c8c:	60 ff       	sbrs	r22, 0
    4c8e:	1b c0       	rjmp	.+54     	; 0x4cc6 <__floatsisf+0x6c>
    4c90:	6f 5f       	subi	r22, 0xFF	; 255
    4c92:	7f 4f       	sbci	r23, 0xFF	; 255
    4c94:	8f 4f       	sbci	r24, 0xFF	; 255
    4c96:	9f 4f       	sbci	r25, 0xFF	; 255
    4c98:	16 c0       	rjmp	.+44     	; 0x4cc6 <__floatsisf+0x6c>
    4c9a:	88 23       	and	r24, r24
    4c9c:	11 f0       	breq	.+4      	; 0x4ca2 <__floatsisf+0x48>
    4c9e:	96 e9       	ldi	r25, 0x96	; 150
    4ca0:	11 c0       	rjmp	.+34     	; 0x4cc4 <__floatsisf+0x6a>
    4ca2:	77 23       	and	r23, r23
    4ca4:	21 f0       	breq	.+8      	; 0x4cae <__floatsisf+0x54>
    4ca6:	9e e8       	ldi	r25, 0x8E	; 142
    4ca8:	87 2f       	mov	r24, r23
    4caa:	76 2f       	mov	r23, r22
    4cac:	05 c0       	rjmp	.+10     	; 0x4cb8 <__floatsisf+0x5e>
    4cae:	66 23       	and	r22, r22
    4cb0:	71 f0       	breq	.+28     	; 0x4cce <__floatsisf+0x74>
    4cb2:	96 e8       	ldi	r25, 0x86	; 134
    4cb4:	86 2f       	mov	r24, r22
    4cb6:	70 e0       	ldi	r23, 0x00	; 0
    4cb8:	60 e0       	ldi	r22, 0x00	; 0
    4cba:	2a f0       	brmi	.+10     	; 0x4cc6 <__floatsisf+0x6c>
    4cbc:	9a 95       	dec	r25
    4cbe:	66 0f       	add	r22, r22
    4cc0:	77 1f       	adc	r23, r23
    4cc2:	88 1f       	adc	r24, r24
    4cc4:	da f7       	brpl	.-10     	; 0x4cbc <__floatsisf+0x62>
    4cc6:	88 0f       	add	r24, r24
    4cc8:	96 95       	lsr	r25
    4cca:	87 95       	ror	r24
    4ccc:	97 f9       	bld	r25, 7
    4cce:	08 95       	ret

00004cd0 <__fp_cmp>:
    4cd0:	99 0f       	add	r25, r25
    4cd2:	00 08       	sbc	r0, r0
    4cd4:	55 0f       	add	r21, r21
    4cd6:	aa 0b       	sbc	r26, r26
    4cd8:	e0 e8       	ldi	r30, 0x80	; 128
    4cda:	fe ef       	ldi	r31, 0xFE	; 254
    4cdc:	16 16       	cp	r1, r22
    4cde:	17 06       	cpc	r1, r23
    4ce0:	e8 07       	cpc	r30, r24
    4ce2:	f9 07       	cpc	r31, r25
    4ce4:	c0 f0       	brcs	.+48     	; 0x4d16 <__fp_cmp+0x46>
    4ce6:	12 16       	cp	r1, r18
    4ce8:	13 06       	cpc	r1, r19
    4cea:	e4 07       	cpc	r30, r20
    4cec:	f5 07       	cpc	r31, r21
    4cee:	98 f0       	brcs	.+38     	; 0x4d16 <__fp_cmp+0x46>
    4cf0:	62 1b       	sub	r22, r18
    4cf2:	73 0b       	sbc	r23, r19
    4cf4:	84 0b       	sbc	r24, r20
    4cf6:	95 0b       	sbc	r25, r21
    4cf8:	39 f4       	brne	.+14     	; 0x4d08 <__fp_cmp+0x38>
    4cfa:	0a 26       	eor	r0, r26
    4cfc:	61 f0       	breq	.+24     	; 0x4d16 <__fp_cmp+0x46>
    4cfe:	23 2b       	or	r18, r19
    4d00:	24 2b       	or	r18, r20
    4d02:	25 2b       	or	r18, r21
    4d04:	21 f4       	brne	.+8      	; 0x4d0e <__fp_cmp+0x3e>
    4d06:	08 95       	ret
    4d08:	0a 26       	eor	r0, r26
    4d0a:	09 f4       	brne	.+2      	; 0x4d0e <__fp_cmp+0x3e>
    4d0c:	a1 40       	sbci	r26, 0x01	; 1
    4d0e:	a6 95       	lsr	r26
    4d10:	8f ef       	ldi	r24, 0xFF	; 255
    4d12:	81 1d       	adc	r24, r1
    4d14:	81 1d       	adc	r24, r1
    4d16:	08 95       	ret

00004d18 <__fp_inf>:
    4d18:	97 f9       	bld	r25, 7
    4d1a:	9f 67       	ori	r25, 0x7F	; 127
    4d1c:	80 e8       	ldi	r24, 0x80	; 128
    4d1e:	70 e0       	ldi	r23, 0x00	; 0
    4d20:	60 e0       	ldi	r22, 0x00	; 0
    4d22:	08 95       	ret

00004d24 <__fp_nan>:
    4d24:	9f ef       	ldi	r25, 0xFF	; 255
    4d26:	80 ec       	ldi	r24, 0xC0	; 192
    4d28:	08 95       	ret

00004d2a <__fp_pscA>:
    4d2a:	00 24       	eor	r0, r0
    4d2c:	0a 94       	dec	r0
    4d2e:	16 16       	cp	r1, r22
    4d30:	17 06       	cpc	r1, r23
    4d32:	18 06       	cpc	r1, r24
    4d34:	09 06       	cpc	r0, r25
    4d36:	08 95       	ret

00004d38 <__fp_pscB>:
    4d38:	00 24       	eor	r0, r0
    4d3a:	0a 94       	dec	r0
    4d3c:	12 16       	cp	r1, r18
    4d3e:	13 06       	cpc	r1, r19
    4d40:	14 06       	cpc	r1, r20
    4d42:	05 06       	cpc	r0, r21
    4d44:	08 95       	ret

00004d46 <__fp_round>:
    4d46:	09 2e       	mov	r0, r25
    4d48:	03 94       	inc	r0
    4d4a:	00 0c       	add	r0, r0
    4d4c:	11 f4       	brne	.+4      	; 0x4d52 <__fp_round+0xc>
    4d4e:	88 23       	and	r24, r24
    4d50:	52 f0       	brmi	.+20     	; 0x4d66 <__fp_round+0x20>
    4d52:	bb 0f       	add	r27, r27
    4d54:	40 f4       	brcc	.+16     	; 0x4d66 <__fp_round+0x20>
    4d56:	bf 2b       	or	r27, r31
    4d58:	11 f4       	brne	.+4      	; 0x4d5e <__fp_round+0x18>
    4d5a:	60 ff       	sbrs	r22, 0
    4d5c:	04 c0       	rjmp	.+8      	; 0x4d66 <__fp_round+0x20>
    4d5e:	6f 5f       	subi	r22, 0xFF	; 255
    4d60:	7f 4f       	sbci	r23, 0xFF	; 255
    4d62:	8f 4f       	sbci	r24, 0xFF	; 255
    4d64:	9f 4f       	sbci	r25, 0xFF	; 255
    4d66:	08 95       	ret

00004d68 <__fp_split3>:
    4d68:	57 fd       	sbrc	r21, 7
    4d6a:	90 58       	subi	r25, 0x80	; 128
    4d6c:	44 0f       	add	r20, r20
    4d6e:	55 1f       	adc	r21, r21
    4d70:	59 f0       	breq	.+22     	; 0x4d88 <__fp_splitA+0x10>
    4d72:	5f 3f       	cpi	r21, 0xFF	; 255
    4d74:	71 f0       	breq	.+28     	; 0x4d92 <__fp_splitA+0x1a>
    4d76:	47 95       	ror	r20

00004d78 <__fp_splitA>:
    4d78:	88 0f       	add	r24, r24
    4d7a:	97 fb       	bst	r25, 7
    4d7c:	99 1f       	adc	r25, r25
    4d7e:	61 f0       	breq	.+24     	; 0x4d98 <__fp_splitA+0x20>
    4d80:	9f 3f       	cpi	r25, 0xFF	; 255
    4d82:	79 f0       	breq	.+30     	; 0x4da2 <__fp_splitA+0x2a>
    4d84:	87 95       	ror	r24
    4d86:	08 95       	ret
    4d88:	12 16       	cp	r1, r18
    4d8a:	13 06       	cpc	r1, r19
    4d8c:	14 06       	cpc	r1, r20
    4d8e:	55 1f       	adc	r21, r21
    4d90:	f2 cf       	rjmp	.-28     	; 0x4d76 <__fp_split3+0xe>
    4d92:	46 95       	lsr	r20
    4d94:	f1 df       	rcall	.-30     	; 0x4d78 <__fp_splitA>
    4d96:	08 c0       	rjmp	.+16     	; 0x4da8 <__fp_splitA+0x30>
    4d98:	16 16       	cp	r1, r22
    4d9a:	17 06       	cpc	r1, r23
    4d9c:	18 06       	cpc	r1, r24
    4d9e:	99 1f       	adc	r25, r25
    4da0:	f1 cf       	rjmp	.-30     	; 0x4d84 <__fp_splitA+0xc>
    4da2:	86 95       	lsr	r24
    4da4:	71 05       	cpc	r23, r1
    4da6:	61 05       	cpc	r22, r1
    4da8:	08 94       	sec
    4daa:	08 95       	ret

00004dac <__fp_zero>:
    4dac:	e8 94       	clt

00004dae <__fp_szero>:
    4dae:	bb 27       	eor	r27, r27
    4db0:	66 27       	eor	r22, r22
    4db2:	77 27       	eor	r23, r23
    4db4:	cb 01       	movw	r24, r22
    4db6:	97 f9       	bld	r25, 7
    4db8:	08 95       	ret

00004dba <__gesf2>:
    4dba:	8a df       	rcall	.-236    	; 0x4cd0 <__fp_cmp>
    4dbc:	08 f4       	brcc	.+2      	; 0x4dc0 <__gesf2+0x6>
    4dbe:	8f ef       	ldi	r24, 0xFF	; 255
    4dc0:	08 95       	ret

00004dc2 <__mulsf3>:
    4dc2:	0b d0       	rcall	.+22     	; 0x4dda <__mulsf3x>
    4dc4:	c0 cf       	rjmp	.-128    	; 0x4d46 <__fp_round>
    4dc6:	b1 df       	rcall	.-158    	; 0x4d2a <__fp_pscA>
    4dc8:	28 f0       	brcs	.+10     	; 0x4dd4 <__mulsf3+0x12>
    4dca:	b6 df       	rcall	.-148    	; 0x4d38 <__fp_pscB>
    4dcc:	18 f0       	brcs	.+6      	; 0x4dd4 <__mulsf3+0x12>
    4dce:	95 23       	and	r25, r21
    4dd0:	09 f0       	breq	.+2      	; 0x4dd4 <__mulsf3+0x12>
    4dd2:	a2 cf       	rjmp	.-188    	; 0x4d18 <__fp_inf>
    4dd4:	a7 cf       	rjmp	.-178    	; 0x4d24 <__fp_nan>
    4dd6:	11 24       	eor	r1, r1
    4dd8:	ea cf       	rjmp	.-44     	; 0x4dae <__fp_szero>

00004dda <__mulsf3x>:
    4dda:	c6 df       	rcall	.-116    	; 0x4d68 <__fp_split3>
    4ddc:	a0 f3       	brcs	.-24     	; 0x4dc6 <__mulsf3+0x4>

00004dde <__mulsf3_pse>:
    4dde:	95 9f       	mul	r25, r21
    4de0:	d1 f3       	breq	.-12     	; 0x4dd6 <__mulsf3+0x14>
    4de2:	95 0f       	add	r25, r21
    4de4:	50 e0       	ldi	r21, 0x00	; 0
    4de6:	55 1f       	adc	r21, r21
    4de8:	62 9f       	mul	r22, r18
    4dea:	f0 01       	movw	r30, r0
    4dec:	72 9f       	mul	r23, r18
    4dee:	bb 27       	eor	r27, r27
    4df0:	f0 0d       	add	r31, r0
    4df2:	b1 1d       	adc	r27, r1
    4df4:	63 9f       	mul	r22, r19
    4df6:	aa 27       	eor	r26, r26
    4df8:	f0 0d       	add	r31, r0
    4dfa:	b1 1d       	adc	r27, r1
    4dfc:	aa 1f       	adc	r26, r26
    4dfe:	64 9f       	mul	r22, r20
    4e00:	66 27       	eor	r22, r22
    4e02:	b0 0d       	add	r27, r0
    4e04:	a1 1d       	adc	r26, r1
    4e06:	66 1f       	adc	r22, r22
    4e08:	82 9f       	mul	r24, r18
    4e0a:	22 27       	eor	r18, r18
    4e0c:	b0 0d       	add	r27, r0
    4e0e:	a1 1d       	adc	r26, r1
    4e10:	62 1f       	adc	r22, r18
    4e12:	73 9f       	mul	r23, r19
    4e14:	b0 0d       	add	r27, r0
    4e16:	a1 1d       	adc	r26, r1
    4e18:	62 1f       	adc	r22, r18
    4e1a:	83 9f       	mul	r24, r19
    4e1c:	a0 0d       	add	r26, r0
    4e1e:	61 1d       	adc	r22, r1
    4e20:	22 1f       	adc	r18, r18
    4e22:	74 9f       	mul	r23, r20
    4e24:	33 27       	eor	r19, r19
    4e26:	a0 0d       	add	r26, r0
    4e28:	61 1d       	adc	r22, r1
    4e2a:	23 1f       	adc	r18, r19
    4e2c:	84 9f       	mul	r24, r20
    4e2e:	60 0d       	add	r22, r0
    4e30:	21 1d       	adc	r18, r1
    4e32:	82 2f       	mov	r24, r18
    4e34:	76 2f       	mov	r23, r22
    4e36:	6a 2f       	mov	r22, r26
    4e38:	11 24       	eor	r1, r1
    4e3a:	9f 57       	subi	r25, 0x7F	; 127
    4e3c:	50 40       	sbci	r21, 0x00	; 0
    4e3e:	8a f0       	brmi	.+34     	; 0x4e62 <__mulsf3_pse+0x84>
    4e40:	e1 f0       	breq	.+56     	; 0x4e7a <__mulsf3_pse+0x9c>
    4e42:	88 23       	and	r24, r24
    4e44:	4a f0       	brmi	.+18     	; 0x4e58 <__mulsf3_pse+0x7a>
    4e46:	ee 0f       	add	r30, r30
    4e48:	ff 1f       	adc	r31, r31
    4e4a:	bb 1f       	adc	r27, r27
    4e4c:	66 1f       	adc	r22, r22
    4e4e:	77 1f       	adc	r23, r23
    4e50:	88 1f       	adc	r24, r24
    4e52:	91 50       	subi	r25, 0x01	; 1
    4e54:	50 40       	sbci	r21, 0x00	; 0
    4e56:	a9 f7       	brne	.-22     	; 0x4e42 <__mulsf3_pse+0x64>
    4e58:	9e 3f       	cpi	r25, 0xFE	; 254
    4e5a:	51 05       	cpc	r21, r1
    4e5c:	70 f0       	brcs	.+28     	; 0x4e7a <__mulsf3_pse+0x9c>
    4e5e:	5c cf       	rjmp	.-328    	; 0x4d18 <__fp_inf>
    4e60:	a6 cf       	rjmp	.-180    	; 0x4dae <__fp_szero>
    4e62:	5f 3f       	cpi	r21, 0xFF	; 255
    4e64:	ec f3       	brlt	.-6      	; 0x4e60 <__mulsf3_pse+0x82>
    4e66:	98 3e       	cpi	r25, 0xE8	; 232
    4e68:	dc f3       	brlt	.-10     	; 0x4e60 <__mulsf3_pse+0x82>
    4e6a:	86 95       	lsr	r24
    4e6c:	77 95       	ror	r23
    4e6e:	67 95       	ror	r22
    4e70:	b7 95       	ror	r27
    4e72:	f7 95       	ror	r31
    4e74:	e7 95       	ror	r30
    4e76:	9f 5f       	subi	r25, 0xFF	; 255
    4e78:	c1 f7       	brne	.-16     	; 0x4e6a <__mulsf3_pse+0x8c>
    4e7a:	fe 2b       	or	r31, r30
    4e7c:	88 0f       	add	r24, r24
    4e7e:	91 1d       	adc	r25, r1
    4e80:	96 95       	lsr	r25
    4e82:	87 95       	ror	r24
    4e84:	97 f9       	bld	r25, 7
    4e86:	08 95       	ret
    4e88:	11 f4       	brne	.+4      	; 0x4e8e <__mulsf3_pse+0xb0>
    4e8a:	0e f4       	brtc	.+2      	; 0x4e8e <__mulsf3_pse+0xb0>
    4e8c:	4b cf       	rjmp	.-362    	; 0x4d24 <__fp_nan>
    4e8e:	3e c0       	rjmp	.+124    	; 0x4f0c <__fp_mpack>

00004e90 <sqrt>:
    4e90:	73 df       	rcall	.-282    	; 0x4d78 <__fp_splitA>
    4e92:	d0 f3       	brcs	.-12     	; 0x4e88 <__mulsf3_pse+0xaa>
    4e94:	99 23       	and	r25, r25
    4e96:	d9 f3       	breq	.-10     	; 0x4e8e <__mulsf3_pse+0xb0>
    4e98:	ce f3       	brts	.-14     	; 0x4e8c <__mulsf3_pse+0xae>
    4e9a:	9f 57       	subi	r25, 0x7F	; 127
    4e9c:	55 0b       	sbc	r21, r21
    4e9e:	87 ff       	sbrs	r24, 7
    4ea0:	43 d0       	rcall	.+134    	; 0x4f28 <__fp_norm2>
    4ea2:	00 24       	eor	r0, r0
    4ea4:	a0 e6       	ldi	r26, 0x60	; 96
    4ea6:	40 ea       	ldi	r20, 0xA0	; 160
    4ea8:	90 01       	movw	r18, r0
    4eaa:	80 58       	subi	r24, 0x80	; 128
    4eac:	56 95       	lsr	r21
    4eae:	97 95       	ror	r25
    4eb0:	28 f4       	brcc	.+10     	; 0x4ebc <sqrt+0x2c>
    4eb2:	80 5c       	subi	r24, 0xC0	; 192
    4eb4:	66 0f       	add	r22, r22
    4eb6:	77 1f       	adc	r23, r23
    4eb8:	88 1f       	adc	r24, r24
    4eba:	20 f0       	brcs	.+8      	; 0x4ec4 <sqrt+0x34>
    4ebc:	26 17       	cp	r18, r22
    4ebe:	37 07       	cpc	r19, r23
    4ec0:	48 07       	cpc	r20, r24
    4ec2:	30 f4       	brcc	.+12     	; 0x4ed0 <sqrt+0x40>
    4ec4:	62 1b       	sub	r22, r18
    4ec6:	73 0b       	sbc	r23, r19
    4ec8:	84 0b       	sbc	r24, r20
    4eca:	20 29       	or	r18, r0
    4ecc:	31 29       	or	r19, r1
    4ece:	4a 2b       	or	r20, r26
    4ed0:	a6 95       	lsr	r26
    4ed2:	17 94       	ror	r1
    4ed4:	07 94       	ror	r0
    4ed6:	20 25       	eor	r18, r0
    4ed8:	31 25       	eor	r19, r1
    4eda:	4a 27       	eor	r20, r26
    4edc:	58 f7       	brcc	.-42     	; 0x4eb4 <sqrt+0x24>
    4ede:	66 0f       	add	r22, r22
    4ee0:	77 1f       	adc	r23, r23
    4ee2:	88 1f       	adc	r24, r24
    4ee4:	20 f0       	brcs	.+8      	; 0x4eee <sqrt+0x5e>
    4ee6:	26 17       	cp	r18, r22
    4ee8:	37 07       	cpc	r19, r23
    4eea:	48 07       	cpc	r20, r24
    4eec:	30 f4       	brcc	.+12     	; 0x4efa <sqrt+0x6a>
    4eee:	62 0b       	sbc	r22, r18
    4ef0:	73 0b       	sbc	r23, r19
    4ef2:	84 0b       	sbc	r24, r20
    4ef4:	20 0d       	add	r18, r0
    4ef6:	31 1d       	adc	r19, r1
    4ef8:	41 1d       	adc	r20, r1
    4efa:	a0 95       	com	r26
    4efc:	81 f7       	brne	.-32     	; 0x4ede <sqrt+0x4e>
    4efe:	b9 01       	movw	r22, r18
    4f00:	84 2f       	mov	r24, r20
    4f02:	91 58       	subi	r25, 0x81	; 129
    4f04:	88 0f       	add	r24, r24
    4f06:	96 95       	lsr	r25
    4f08:	87 95       	ror	r24
    4f0a:	08 95       	ret

00004f0c <__fp_mpack>:
    4f0c:	9f 3f       	cpi	r25, 0xFF	; 255
    4f0e:	31 f0       	breq	.+12     	; 0x4f1c <__fp_mpack_finite+0xc>

00004f10 <__fp_mpack_finite>:
    4f10:	91 50       	subi	r25, 0x01	; 1
    4f12:	20 f4       	brcc	.+8      	; 0x4f1c <__fp_mpack_finite+0xc>
    4f14:	87 95       	ror	r24
    4f16:	77 95       	ror	r23
    4f18:	67 95       	ror	r22
    4f1a:	b7 95       	ror	r27
    4f1c:	88 0f       	add	r24, r24
    4f1e:	91 1d       	adc	r25, r1
    4f20:	96 95       	lsr	r25
    4f22:	87 95       	ror	r24
    4f24:	97 f9       	bld	r25, 7
    4f26:	08 95       	ret

00004f28 <__fp_norm2>:
    4f28:	91 50       	subi	r25, 0x01	; 1
    4f2a:	50 40       	sbci	r21, 0x00	; 0
    4f2c:	66 0f       	add	r22, r22
    4f2e:	77 1f       	adc	r23, r23
    4f30:	88 1f       	adc	r24, r24
    4f32:	d2 f7       	brpl	.-12     	; 0x4f28 <__fp_norm2>
    4f34:	08 95       	ret

00004f36 <__udivmodsi4>:
    4f36:	a1 e2       	ldi	r26, 0x21	; 33
    4f38:	1a 2e       	mov	r1, r26
    4f3a:	aa 1b       	sub	r26, r26
    4f3c:	bb 1b       	sub	r27, r27
    4f3e:	fd 01       	movw	r30, r26
    4f40:	0d c0       	rjmp	.+26     	; 0x4f5c <__udivmodsi4_ep>

00004f42 <__udivmodsi4_loop>:
    4f42:	aa 1f       	adc	r26, r26
    4f44:	bb 1f       	adc	r27, r27
    4f46:	ee 1f       	adc	r30, r30
    4f48:	ff 1f       	adc	r31, r31
    4f4a:	a2 17       	cp	r26, r18
    4f4c:	b3 07       	cpc	r27, r19
    4f4e:	e4 07       	cpc	r30, r20
    4f50:	f5 07       	cpc	r31, r21
    4f52:	20 f0       	brcs	.+8      	; 0x4f5c <__udivmodsi4_ep>
    4f54:	a2 1b       	sub	r26, r18
    4f56:	b3 0b       	sbc	r27, r19
    4f58:	e4 0b       	sbc	r30, r20
    4f5a:	f5 0b       	sbc	r31, r21

00004f5c <__udivmodsi4_ep>:
    4f5c:	66 1f       	adc	r22, r22
    4f5e:	77 1f       	adc	r23, r23
    4f60:	88 1f       	adc	r24, r24
    4f62:	99 1f       	adc	r25, r25
    4f64:	1a 94       	dec	r1
    4f66:	69 f7       	brne	.-38     	; 0x4f42 <__udivmodsi4_loop>
    4f68:	60 95       	com	r22
    4f6a:	70 95       	com	r23
    4f6c:	80 95       	com	r24
    4f6e:	90 95       	com	r25
    4f70:	9b 01       	movw	r18, r22
    4f72:	ac 01       	movw	r20, r24
    4f74:	bd 01       	movw	r22, r26
    4f76:	cf 01       	movw	r24, r30
    4f78:	08 95       	ret

00004f7a <dtostrf>:
    4f7a:	ef 92       	push	r14
    4f7c:	ff 92       	push	r15
    4f7e:	0f 93       	push	r16
    4f80:	1f 93       	push	r17
    4f82:	f2 2f       	mov	r31, r18
    4f84:	f0 2e       	mov	r15, r16
    4f86:	47 fd       	sbrc	r20, 7
    4f88:	02 c0       	rjmp	.+4      	; 0x4f8e <dtostrf+0x14>
    4f8a:	e4 e0       	ldi	r30, 0x04	; 4
    4f8c:	01 c0       	rjmp	.+2      	; 0x4f90 <dtostrf+0x16>
    4f8e:	e4 e1       	ldi	r30, 0x14	; 20
    4f90:	24 2f       	mov	r18, r20
    4f92:	33 27       	eor	r19, r19
    4f94:	27 fd       	sbrc	r18, 7
    4f96:	30 95       	com	r19
    4f98:	37 ff       	sbrs	r19, 7
    4f9a:	03 c0       	rjmp	.+6      	; 0x4fa2 <dtostrf+0x28>
    4f9c:	30 95       	com	r19
    4f9e:	21 95       	neg	r18
    4fa0:	3f 4f       	sbci	r19, 0xFF	; 255
    4fa2:	4f 2d       	mov	r20, r15
    4fa4:	51 2f       	mov	r21, r17
    4fa6:	0f 2f       	mov	r16, r31
    4fa8:	ee 2e       	mov	r14, r30
    4faa:	0e 94 03 28 	call	0x5006	; 0x5006 <dtoa_prf>
    4fae:	8f 2d       	mov	r24, r15
    4fb0:	91 2f       	mov	r25, r17
    4fb2:	1f 91       	pop	r17
    4fb4:	0f 91       	pop	r16
    4fb6:	ff 90       	pop	r15
    4fb8:	ef 90       	pop	r14
    4fba:	08 95       	ret

00004fbc <ultoa>:
    4fbc:	fa 01       	movw	r30, r20
    4fbe:	cf 93       	push	r28
    4fc0:	ff 93       	push	r31
    4fc2:	ef 93       	push	r30
    4fc4:	22 30       	cpi	r18, 0x02	; 2
    4fc6:	cc f0       	brlt	.+50     	; 0x4ffa <ultoa+0x3e>
    4fc8:	25 32       	cpi	r18, 0x25	; 37
    4fca:	bc f4       	brge	.+46     	; 0x4ffa <ultoa+0x3e>
    4fcc:	c2 2f       	mov	r28, r18
    4fce:	2c 2f       	mov	r18, r28
    4fd0:	33 27       	eor	r19, r19
    4fd2:	44 27       	eor	r20, r20
    4fd4:	55 27       	eor	r21, r21
    4fd6:	ff 93       	push	r31
    4fd8:	ef 93       	push	r30
    4fda:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <__udivmodsi4>
    4fde:	ef 91       	pop	r30
    4fe0:	ff 91       	pop	r31
    4fe2:	60 5d       	subi	r22, 0xD0	; 208
    4fe4:	6a 33       	cpi	r22, 0x3A	; 58
    4fe6:	0c f0       	brlt	.+2      	; 0x4fea <ultoa+0x2e>
    4fe8:	69 5d       	subi	r22, 0xD9	; 217
    4fea:	61 93       	st	Z+, r22
    4fec:	b9 01       	movw	r22, r18
    4fee:	ca 01       	movw	r24, r20
    4ff0:	60 50       	subi	r22, 0x00	; 0
    4ff2:	70 40       	sbci	r23, 0x00	; 0
    4ff4:	80 40       	sbci	r24, 0x00	; 0
    4ff6:	90 40       	sbci	r25, 0x00	; 0
    4ff8:	51 f7       	brne	.-44     	; 0x4fce <ultoa+0x12>
    4ffa:	10 82       	st	Z, r1
    4ffc:	8f 91       	pop	r24
    4ffe:	9f 91       	pop	r25
    5000:	cf 91       	pop	r28
    5002:	0c 94 3d 2a 	jmp	0x547a	; 0x547a <strrev>

00005006 <dtoa_prf>:
    5006:	a9 e0       	ldi	r26, 0x09	; 9
    5008:	b0 e0       	ldi	r27, 0x00	; 0
    500a:	e9 e0       	ldi	r30, 0x09	; 9
    500c:	f8 e2       	ldi	r31, 0x28	; 40
    500e:	0c 94 51 2a 	jmp	0x54a2	; 0x54a2 <__prologue_saves__+0x8>
    5012:	6a 01       	movw	r12, r20
    5014:	12 2f       	mov	r17, r18
    5016:	a0 2e       	mov	r10, r16
    5018:	be 2c       	mov	r11, r14
    501a:	2b e3       	ldi	r18, 0x3B	; 59
    501c:	20 17       	cp	r18, r16
    501e:	18 f4       	brcc	.+6      	; 0x5026 <dtoa_prf+0x20>
    5020:	2c e3       	ldi	r18, 0x3C	; 60
    5022:	92 2e       	mov	r9, r18
    5024:	02 c0       	rjmp	.+4      	; 0x502a <dtoa_prf+0x24>
    5026:	90 2e       	mov	r9, r16
    5028:	93 94       	inc	r9
    502a:	ae 01       	movw	r20, r28
    502c:	4f 5f       	subi	r20, 0xFF	; 255
    502e:	5f 4f       	sbci	r21, 0xFF	; 255
    5030:	27 e0       	ldi	r18, 0x07	; 7
    5032:	09 2d       	mov	r16, r9
    5034:	0e 94 65 29 	call	0x52ca	; 0x52ca <__ftoa_engine>
    5038:	bc 01       	movw	r22, r24
    503a:	89 81       	ldd	r24, Y+1	; 0x01
    503c:	e8 2e       	mov	r14, r24
    503e:	ff 24       	eor	r15, r15
    5040:	c7 01       	movw	r24, r14
    5042:	89 70       	andi	r24, 0x09	; 9
    5044:	90 70       	andi	r25, 0x00	; 0
    5046:	01 97       	sbiw	r24, 0x01	; 1
    5048:	11 f4       	brne	.+4      	; 0x504e <dtoa_prf+0x48>
    504a:	ad e2       	ldi	r26, 0x2D	; 45
    504c:	09 c0       	rjmp	.+18     	; 0x5060 <dtoa_prf+0x5a>
    504e:	b1 fe       	sbrs	r11, 1
    5050:	02 c0       	rjmp	.+4      	; 0x5056 <dtoa_prf+0x50>
    5052:	ab e2       	ldi	r26, 0x2B	; 43
    5054:	05 c0       	rjmp	.+10     	; 0x5060 <dtoa_prf+0x5a>
    5056:	b0 fc       	sbrc	r11, 0
    5058:	02 c0       	rjmp	.+4      	; 0x505e <dtoa_prf+0x58>
    505a:	a0 e0       	ldi	r26, 0x00	; 0
    505c:	01 c0       	rjmp	.+2      	; 0x5060 <dtoa_prf+0x5a>
    505e:	a0 e2       	ldi	r26, 0x20	; 32
    5060:	e3 fe       	sbrs	r14, 3
    5062:	3b c0       	rjmp	.+118    	; 0x50da <dtoa_prf+0xd4>
    5064:	aa 23       	and	r26, r26
    5066:	11 f4       	brne	.+4      	; 0x506c <dtoa_prf+0x66>
    5068:	23 e0       	ldi	r18, 0x03	; 3
    506a:	01 c0       	rjmp	.+2      	; 0x506e <dtoa_prf+0x68>
    506c:	24 e0       	ldi	r18, 0x04	; 4
    506e:	21 17       	cp	r18, r17
    5070:	10 f0       	brcs	.+4      	; 0x5076 <dtoa_prf+0x70>
    5072:	20 e0       	ldi	r18, 0x00	; 0
    5074:	02 c0       	rjmp	.+4      	; 0x507a <dtoa_prf+0x74>
    5076:	12 1b       	sub	r17, r18
    5078:	21 2f       	mov	r18, r17
    507a:	eb 2c       	mov	r14, r11
    507c:	b4 fe       	sbrs	r11, 4
    507e:	02 c0       	rjmp	.+4      	; 0x5084 <dtoa_prf+0x7e>
    5080:	32 2f       	mov	r19, r18
    5082:	0a c0       	rjmp	.+20     	; 0x5098 <dtoa_prf+0x92>
    5084:	f6 01       	movw	r30, r12
    5086:	32 2f       	mov	r19, r18
    5088:	80 e2       	ldi	r24, 0x20	; 32
    508a:	02 c0       	rjmp	.+4      	; 0x5090 <dtoa_prf+0x8a>
    508c:	81 93       	st	Z+, r24
    508e:	31 50       	subi	r19, 0x01	; 1
    5090:	33 23       	and	r19, r19
    5092:	e1 f7       	brne	.-8      	; 0x508c <dtoa_prf+0x86>
    5094:	c2 0e       	add	r12, r18
    5096:	d1 1c       	adc	r13, r1
    5098:	aa 23       	and	r26, r26
    509a:	19 f0       	breq	.+6      	; 0x50a2 <dtoa_prf+0x9c>
    509c:	f6 01       	movw	r30, r12
    509e:	a1 93       	st	Z+, r26
    50a0:	6f 01       	movw	r12, r30
    50a2:	f6 01       	movw	r30, r12
    50a4:	31 96       	adiw	r30, 0x01	; 1
    50a6:	e2 fe       	sbrs	r14, 2
    50a8:	05 c0       	rjmp	.+10     	; 0x50b4 <dtoa_prf+0xae>
    50aa:	9e e4       	ldi	r25, 0x4E	; 78
    50ac:	d6 01       	movw	r26, r12
    50ae:	9c 93       	st	X, r25
    50b0:	81 e4       	ldi	r24, 0x41	; 65
    50b2:	04 c0       	rjmp	.+8      	; 0x50bc <dtoa_prf+0xb6>
    50b4:	9e e6       	ldi	r25, 0x6E	; 110
    50b6:	d6 01       	movw	r26, r12
    50b8:	9c 93       	st	X, r25
    50ba:	81 e6       	ldi	r24, 0x61	; 97
    50bc:	11 96       	adiw	r26, 0x01	; 1
    50be:	8c 93       	st	X, r24
    50c0:	91 83       	std	Z+1, r25	; 0x01
    50c2:	32 96       	adiw	r30, 0x02	; 2
    50c4:	df 01       	movw	r26, r30
    50c6:	83 2f       	mov	r24, r19
    50c8:	90 e2       	ldi	r25, 0x20	; 32
    50ca:	02 c0       	rjmp	.+4      	; 0x50d0 <dtoa_prf+0xca>
    50cc:	9d 93       	st	X+, r25
    50ce:	81 50       	subi	r24, 0x01	; 1
    50d0:	88 23       	and	r24, r24
    50d2:	e1 f7       	brne	.-8      	; 0x50cc <dtoa_prf+0xc6>
    50d4:	e3 0f       	add	r30, r19
    50d6:	f1 1d       	adc	r31, r1
    50d8:	40 c0       	rjmp	.+128    	; 0x515a <dtoa_prf+0x154>
    50da:	e2 fe       	sbrs	r14, 2
    50dc:	42 c0       	rjmp	.+132    	; 0x5162 <dtoa_prf+0x15c>
    50de:	aa 23       	and	r26, r26
    50e0:	11 f4       	brne	.+4      	; 0x50e6 <dtoa_prf+0xe0>
    50e2:	23 e0       	ldi	r18, 0x03	; 3
    50e4:	01 c0       	rjmp	.+2      	; 0x50e8 <dtoa_prf+0xe2>
    50e6:	24 e0       	ldi	r18, 0x04	; 4
    50e8:	21 17       	cp	r18, r17
    50ea:	10 f0       	brcs	.+4      	; 0x50f0 <dtoa_prf+0xea>
    50ec:	20 e0       	ldi	r18, 0x00	; 0
    50ee:	02 c0       	rjmp	.+4      	; 0x50f4 <dtoa_prf+0xee>
    50f0:	12 1b       	sub	r17, r18
    50f2:	21 2f       	mov	r18, r17
    50f4:	eb 2c       	mov	r14, r11
    50f6:	b4 fe       	sbrs	r11, 4
    50f8:	02 c0       	rjmp	.+4      	; 0x50fe <dtoa_prf+0xf8>
    50fa:	92 2f       	mov	r25, r18
    50fc:	0a c0       	rjmp	.+20     	; 0x5112 <dtoa_prf+0x10c>
    50fe:	f6 01       	movw	r30, r12
    5100:	92 2f       	mov	r25, r18
    5102:	80 e2       	ldi	r24, 0x20	; 32
    5104:	02 c0       	rjmp	.+4      	; 0x510a <dtoa_prf+0x104>
    5106:	81 93       	st	Z+, r24
    5108:	91 50       	subi	r25, 0x01	; 1
    510a:	99 23       	and	r25, r25
    510c:	e1 f7       	brne	.-8      	; 0x5106 <dtoa_prf+0x100>
    510e:	c2 0e       	add	r12, r18
    5110:	d1 1c       	adc	r13, r1
    5112:	aa 23       	and	r26, r26
    5114:	19 f0       	breq	.+6      	; 0x511c <dtoa_prf+0x116>
    5116:	f6 01       	movw	r30, r12
    5118:	a1 93       	st	Z+, r26
    511a:	6f 01       	movw	r12, r30
    511c:	f6 01       	movw	r30, r12
    511e:	31 96       	adiw	r30, 0x01	; 1
    5120:	e2 fe       	sbrs	r14, 2
    5122:	08 c0       	rjmp	.+16     	; 0x5134 <dtoa_prf+0x12e>
    5124:	89 e4       	ldi	r24, 0x49	; 73
    5126:	d6 01       	movw	r26, r12
    5128:	8c 93       	st	X, r24
    512a:	8e e4       	ldi	r24, 0x4E	; 78
    512c:	11 96       	adiw	r26, 0x01	; 1
    512e:	8c 93       	st	X, r24
    5130:	86 e4       	ldi	r24, 0x46	; 70
    5132:	07 c0       	rjmp	.+14     	; 0x5142 <dtoa_prf+0x13c>
    5134:	89 e6       	ldi	r24, 0x69	; 105
    5136:	d6 01       	movw	r26, r12
    5138:	8c 93       	st	X, r24
    513a:	8e e6       	ldi	r24, 0x6E	; 110
    513c:	11 96       	adiw	r26, 0x01	; 1
    513e:	8c 93       	st	X, r24
    5140:	86 e6       	ldi	r24, 0x66	; 102
    5142:	81 83       	std	Z+1, r24	; 0x01
    5144:	32 96       	adiw	r30, 0x02	; 2
    5146:	df 01       	movw	r26, r30
    5148:	89 2f       	mov	r24, r25
    514a:	20 e2       	ldi	r18, 0x20	; 32
    514c:	02 c0       	rjmp	.+4      	; 0x5152 <dtoa_prf+0x14c>
    514e:	2d 93       	st	X+, r18
    5150:	81 50       	subi	r24, 0x01	; 1
    5152:	88 23       	and	r24, r24
    5154:	e1 f7       	brne	.-8      	; 0x514e <dtoa_prf+0x148>
    5156:	e9 0f       	add	r30, r25
    5158:	f1 1d       	adc	r31, r1
    515a:	10 82       	st	Z, r1
    515c:	2e ef       	ldi	r18, 0xFE	; 254
    515e:	3f ef       	ldi	r19, 0xFF	; 255
    5160:	af c0       	rjmp	.+350    	; 0x52c0 <dtoa_prf+0x2ba>
    5162:	16 16       	cp	r1, r22
    5164:	17 06       	cpc	r1, r23
    5166:	1c f0       	brlt	.+6      	; 0x516e <dtoa_prf+0x168>
    5168:	41 e0       	ldi	r20, 0x01	; 1
    516a:	50 e0       	ldi	r21, 0x00	; 0
    516c:	03 c0       	rjmp	.+6      	; 0x5174 <dtoa_prf+0x16e>
    516e:	ab 01       	movw	r20, r22
    5170:	4f 5f       	subi	r20, 0xFF	; 255
    5172:	5f 4f       	sbci	r21, 0xFF	; 255
    5174:	aa 20       	and	r10, r10
    5176:	19 f4       	brne	.+6      	; 0x517e <dtoa_prf+0x178>
    5178:	80 e0       	ldi	r24, 0x00	; 0
    517a:	90 e0       	ldi	r25, 0x00	; 0
    517c:	03 c0       	rjmp	.+6      	; 0x5184 <dtoa_prf+0x17e>
    517e:	8a 2d       	mov	r24, r10
    5180:	90 e0       	ldi	r25, 0x00	; 0
    5182:	01 96       	adiw	r24, 0x01	; 1
    5184:	20 e0       	ldi	r18, 0x00	; 0
    5186:	30 e0       	ldi	r19, 0x00	; 0
    5188:	aa 23       	and	r26, r26
    518a:	11 f0       	breq	.+4      	; 0x5190 <dtoa_prf+0x18a>
    518c:	21 e0       	ldi	r18, 0x01	; 1
    518e:	30 e0       	ldi	r19, 0x00	; 0
    5190:	24 0f       	add	r18, r20
    5192:	35 1f       	adc	r19, r21
    5194:	28 0f       	add	r18, r24
    5196:	39 1f       	adc	r19, r25
    5198:	81 2f       	mov	r24, r17
    519a:	90 e0       	ldi	r25, 0x00	; 0
    519c:	28 17       	cp	r18, r24
    519e:	39 07       	cpc	r19, r25
    51a0:	14 f0       	brlt	.+4      	; 0x51a6 <dtoa_prf+0x1a0>
    51a2:	20 e0       	ldi	r18, 0x00	; 0
    51a4:	02 c0       	rjmp	.+4      	; 0x51aa <dtoa_prf+0x1a4>
    51a6:	12 1b       	sub	r17, r18
    51a8:	21 2f       	mov	r18, r17
    51aa:	4b 2d       	mov	r20, r11
    51ac:	50 e0       	ldi	r21, 0x00	; 0
    51ae:	ca 01       	movw	r24, r20
    51b0:	80 71       	andi	r24, 0x10	; 16
    51b2:	90 70       	andi	r25, 0x00	; 0
    51b4:	b4 fc       	sbrc	r11, 4
    51b6:	0d c0       	rjmp	.+26     	; 0x51d2 <dtoa_prf+0x1cc>
    51b8:	b3 fc       	sbrc	r11, 3
    51ba:	0b c0       	rjmp	.+22     	; 0x51d2 <dtoa_prf+0x1cc>
    51bc:	f6 01       	movw	r30, r12
    51be:	32 2f       	mov	r19, r18
    51c0:	40 e2       	ldi	r20, 0x20	; 32
    51c2:	02 c0       	rjmp	.+4      	; 0x51c8 <dtoa_prf+0x1c2>
    51c4:	41 93       	st	Z+, r20
    51c6:	31 50       	subi	r19, 0x01	; 1
    51c8:	33 23       	and	r19, r19
    51ca:	e1 f7       	brne	.-8      	; 0x51c4 <dtoa_prf+0x1be>
    51cc:	c2 0e       	add	r12, r18
    51ce:	d1 1c       	adc	r13, r1
    51d0:	01 c0       	rjmp	.+2      	; 0x51d4 <dtoa_prf+0x1ce>
    51d2:	32 2f       	mov	r19, r18
    51d4:	aa 23       	and	r26, r26
    51d6:	19 f0       	breq	.+6      	; 0x51de <dtoa_prf+0x1d8>
    51d8:	f6 01       	movw	r30, r12
    51da:	a1 93       	st	Z+, r26
    51dc:	6f 01       	movw	r12, r30
    51de:	89 2b       	or	r24, r25
    51e0:	11 f0       	breq	.+4      	; 0x51e6 <dtoa_prf+0x1e0>
    51e2:	13 2f       	mov	r17, r19
    51e4:	0a c0       	rjmp	.+20     	; 0x51fa <dtoa_prf+0x1f4>
    51e6:	f6 01       	movw	r30, r12
    51e8:	13 2f       	mov	r17, r19
    51ea:	80 e3       	ldi	r24, 0x30	; 48
    51ec:	02 c0       	rjmp	.+4      	; 0x51f2 <dtoa_prf+0x1ec>
    51ee:	81 93       	st	Z+, r24
    51f0:	11 50       	subi	r17, 0x01	; 1
    51f2:	11 23       	and	r17, r17
    51f4:	e1 f7       	brne	.-8      	; 0x51ee <dtoa_prf+0x1e8>
    51f6:	c3 0e       	add	r12, r19
    51f8:	d1 1c       	adc	r13, r1
    51fa:	09 2d       	mov	r16, r9
    51fc:	06 0f       	add	r16, r22
    51fe:	ba 80       	ldd	r11, Y+2	; 0x02
    5200:	90 e1       	ldi	r25, 0x10	; 16
    5202:	89 2e       	mov	r8, r25
    5204:	91 2c       	mov	r9, r1
    5206:	8e 20       	and	r8, r14
    5208:	9f 20       	and	r9, r15
    520a:	e4 fe       	sbrs	r14, 4
    520c:	04 c0       	rjmp	.+8      	; 0x5216 <dtoa_prf+0x210>
    520e:	f1 e3       	ldi	r31, 0x31	; 49
    5210:	bf 16       	cp	r11, r31
    5212:	09 f4       	brne	.+2      	; 0x5216 <dtoa_prf+0x210>
    5214:	01 50       	subi	r16, 0x01	; 1
    5216:	10 16       	cp	r1, r16
    5218:	14 f0       	brlt	.+4      	; 0x521e <dtoa_prf+0x218>
    521a:	01 e0       	ldi	r16, 0x01	; 1
    521c:	03 c0       	rjmp	.+6      	; 0x5224 <dtoa_prf+0x21e>
    521e:	09 30       	cpi	r16, 0x09	; 9
    5220:	08 f0       	brcs	.+2      	; 0x5224 <dtoa_prf+0x21e>
    5222:	08 e0       	ldi	r16, 0x08	; 8
    5224:	9b 01       	movw	r18, r22
    5226:	77 ff       	sbrs	r23, 7
    5228:	02 c0       	rjmp	.+4      	; 0x522e <dtoa_prf+0x228>
    522a:	20 e0       	ldi	r18, 0x00	; 0
    522c:	30 e0       	ldi	r19, 0x00	; 0
    522e:	cb 01       	movw	r24, r22
    5230:	01 96       	adiw	r24, 0x01	; 1
    5232:	82 1b       	sub	r24, r18
    5234:	93 0b       	sbc	r25, r19
    5236:	fe 01       	movw	r30, r28
    5238:	31 96       	adiw	r30, 0x01	; 1
    523a:	e8 0f       	add	r30, r24
    523c:	f9 1f       	adc	r31, r25
    523e:	8e e2       	ldi	r24, 0x2E	; 46
    5240:	f8 2e       	mov	r15, r24
    5242:	3b 01       	movw	r6, r22
    5244:	60 1a       	sub	r6, r16
    5246:	71 08       	sbc	r7, r1
    5248:	8a 2d       	mov	r24, r10
    524a:	90 e0       	ldi	r25, 0x00	; 0
    524c:	44 27       	eor	r20, r20
    524e:	55 27       	eor	r21, r21
    5250:	48 1b       	sub	r20, r24
    5252:	59 0b       	sbc	r21, r25
    5254:	8f ef       	ldi	r24, 0xFF	; 255
    5256:	2f 3f       	cpi	r18, 0xFF	; 255
    5258:	38 07       	cpc	r19, r24
    525a:	19 f4       	brne	.+6      	; 0x5262 <dtoa_prf+0x25c>
    525c:	d6 01       	movw	r26, r12
    525e:	fd 92       	st	X+, r15
    5260:	6d 01       	movw	r12, r26
    5262:	62 17       	cp	r22, r18
    5264:	73 07       	cpc	r23, r19
    5266:	2c f0       	brlt	.+10     	; 0x5272 <dtoa_prf+0x26c>
    5268:	62 16       	cp	r6, r18
    526a:	73 06       	cpc	r7, r19
    526c:	14 f4       	brge	.+4      	; 0x5272 <dtoa_prf+0x26c>
    526e:	80 81       	ld	r24, Z
    5270:	01 c0       	rjmp	.+2      	; 0x5274 <dtoa_prf+0x26e>
    5272:	80 e3       	ldi	r24, 0x30	; 48
    5274:	21 50       	subi	r18, 0x01	; 1
    5276:	30 40       	sbci	r19, 0x00	; 0
    5278:	31 96       	adiw	r30, 0x01	; 1
    527a:	24 17       	cp	r18, r20
    527c:	35 07       	cpc	r19, r21
    527e:	24 f0       	brlt	.+8      	; 0x5288 <dtoa_prf+0x282>
    5280:	d6 01       	movw	r26, r12
    5282:	8d 93       	st	X+, r24
    5284:	6d 01       	movw	r12, r26
    5286:	e6 cf       	rjmp	.-52     	; 0x5254 <dtoa_prf+0x24e>
    5288:	26 17       	cp	r18, r22
    528a:	37 07       	cpc	r19, r23
    528c:	49 f4       	brne	.+18     	; 0x52a0 <dtoa_prf+0x29a>
    528e:	b5 e3       	ldi	r27, 0x35	; 53
    5290:	bb 15       	cp	r27, r11
    5292:	28 f0       	brcs	.+10     	; 0x529e <dtoa_prf+0x298>
    5294:	bb 16       	cp	r11, r27
    5296:	21 f4       	brne	.+8      	; 0x52a0 <dtoa_prf+0x29a>
    5298:	81 14       	cp	r8, r1
    529a:	91 04       	cpc	r9, r1
    529c:	09 f4       	brne	.+2      	; 0x52a0 <dtoa_prf+0x29a>
    529e:	81 e3       	ldi	r24, 0x31	; 49
    52a0:	f6 01       	movw	r30, r12
    52a2:	81 93       	st	Z+, r24
    52a4:	d6 01       	movw	r26, r12
    52a6:	81 2f       	mov	r24, r17
    52a8:	90 e2       	ldi	r25, 0x20	; 32
    52aa:	02 c0       	rjmp	.+4      	; 0x52b0 <dtoa_prf+0x2aa>
    52ac:	9c 93       	st	X, r25
    52ae:	81 50       	subi	r24, 0x01	; 1
    52b0:	11 96       	adiw	r26, 0x01	; 1
    52b2:	88 23       	and	r24, r24
    52b4:	d9 f7       	brne	.-10     	; 0x52ac <dtoa_prf+0x2a6>
    52b6:	e1 0f       	add	r30, r17
    52b8:	f1 1d       	adc	r31, r1
    52ba:	10 82       	st	Z, r1
    52bc:	20 e0       	ldi	r18, 0x00	; 0
    52be:	30 e0       	ldi	r19, 0x00	; 0
    52c0:	c9 01       	movw	r24, r18
    52c2:	29 96       	adiw	r28, 0x09	; 9
    52c4:	ee e0       	ldi	r30, 0x0E	; 14
    52c6:	0c 94 6d 2a 	jmp	0x54da	; 0x54da <__epilogue_restores__+0x8>

000052ca <__ftoa_engine>:
    52ca:	28 30       	cpi	r18, 0x08	; 8
    52cc:	08 f0       	brcs	.+2      	; 0x52d0 <__ftoa_engine+0x6>
    52ce:	27 e0       	ldi	r18, 0x07	; 7
    52d0:	33 27       	eor	r19, r19
    52d2:	da 01       	movw	r26, r20
    52d4:	99 0f       	add	r25, r25
    52d6:	31 1d       	adc	r19, r1
    52d8:	87 fd       	sbrc	r24, 7
    52da:	91 60       	ori	r25, 0x01	; 1
    52dc:	00 96       	adiw	r24, 0x00	; 0
    52de:	61 05       	cpc	r22, r1
    52e0:	71 05       	cpc	r23, r1
    52e2:	39 f4       	brne	.+14     	; 0x52f2 <__ftoa_engine+0x28>
    52e4:	32 60       	ori	r19, 0x02	; 2
    52e6:	2e 5f       	subi	r18, 0xFE	; 254
    52e8:	3d 93       	st	X+, r19
    52ea:	30 e3       	ldi	r19, 0x30	; 48
    52ec:	2a 95       	dec	r18
    52ee:	e1 f7       	brne	.-8      	; 0x52e8 <__ftoa_engine+0x1e>
    52f0:	08 95       	ret
    52f2:	9f 3f       	cpi	r25, 0xFF	; 255
    52f4:	30 f0       	brcs	.+12     	; 0x5302 <__ftoa_engine+0x38>
    52f6:	80 38       	cpi	r24, 0x80	; 128
    52f8:	71 05       	cpc	r23, r1
    52fa:	61 05       	cpc	r22, r1
    52fc:	09 f0       	breq	.+2      	; 0x5300 <__ftoa_engine+0x36>
    52fe:	3c 5f       	subi	r19, 0xFC	; 252
    5300:	3c 5f       	subi	r19, 0xFC	; 252
    5302:	3d 93       	st	X+, r19
    5304:	91 30       	cpi	r25, 0x01	; 1
    5306:	08 f0       	brcs	.+2      	; 0x530a <__ftoa_engine+0x40>
    5308:	80 68       	ori	r24, 0x80	; 128
    530a:	91 1d       	adc	r25, r1
    530c:	df 93       	push	r29
    530e:	cf 93       	push	r28
    5310:	1f 93       	push	r17
    5312:	0f 93       	push	r16
    5314:	ff 92       	push	r15
    5316:	ef 92       	push	r14
    5318:	19 2f       	mov	r17, r25
    531a:	98 7f       	andi	r25, 0xF8	; 248
    531c:	96 95       	lsr	r25
    531e:	e9 2f       	mov	r30, r25
    5320:	96 95       	lsr	r25
    5322:	96 95       	lsr	r25
    5324:	e9 0f       	add	r30, r25
    5326:	ff 27       	eor	r31, r31
    5328:	e2 55       	subi	r30, 0x52	; 82
    532a:	ff 4f       	sbci	r31, 0xFF	; 255
    532c:	99 27       	eor	r25, r25
    532e:	33 27       	eor	r19, r19
    5330:	ee 24       	eor	r14, r14
    5332:	ff 24       	eor	r15, r15
    5334:	a7 01       	movw	r20, r14
    5336:	e7 01       	movw	r28, r14
    5338:	05 90       	lpm	r0, Z+
    533a:	08 94       	sec
    533c:	07 94       	ror	r0
    533e:	28 f4       	brcc	.+10     	; 0x534a <__ftoa_engine+0x80>
    5340:	36 0f       	add	r19, r22
    5342:	e7 1e       	adc	r14, r23
    5344:	f8 1e       	adc	r15, r24
    5346:	49 1f       	adc	r20, r25
    5348:	51 1d       	adc	r21, r1
    534a:	66 0f       	add	r22, r22
    534c:	77 1f       	adc	r23, r23
    534e:	88 1f       	adc	r24, r24
    5350:	99 1f       	adc	r25, r25
    5352:	06 94       	lsr	r0
    5354:	a1 f7       	brne	.-24     	; 0x533e <__ftoa_engine+0x74>
    5356:	05 90       	lpm	r0, Z+
    5358:	07 94       	ror	r0
    535a:	28 f4       	brcc	.+10     	; 0x5366 <__ftoa_engine+0x9c>
    535c:	e7 0e       	add	r14, r23
    535e:	f8 1e       	adc	r15, r24
    5360:	49 1f       	adc	r20, r25
    5362:	56 1f       	adc	r21, r22
    5364:	c1 1d       	adc	r28, r1
    5366:	77 0f       	add	r23, r23
    5368:	88 1f       	adc	r24, r24
    536a:	99 1f       	adc	r25, r25
    536c:	66 1f       	adc	r22, r22
    536e:	06 94       	lsr	r0
    5370:	a1 f7       	brne	.-24     	; 0x535a <__ftoa_engine+0x90>
    5372:	05 90       	lpm	r0, Z+
    5374:	07 94       	ror	r0
    5376:	28 f4       	brcc	.+10     	; 0x5382 <__ftoa_engine+0xb8>
    5378:	f8 0e       	add	r15, r24
    537a:	49 1f       	adc	r20, r25
    537c:	56 1f       	adc	r21, r22
    537e:	c7 1f       	adc	r28, r23
    5380:	d1 1d       	adc	r29, r1
    5382:	88 0f       	add	r24, r24
    5384:	99 1f       	adc	r25, r25
    5386:	66 1f       	adc	r22, r22
    5388:	77 1f       	adc	r23, r23
    538a:	06 94       	lsr	r0
    538c:	a1 f7       	brne	.-24     	; 0x5376 <__ftoa_engine+0xac>
    538e:	05 90       	lpm	r0, Z+
    5390:	07 94       	ror	r0
    5392:	20 f4       	brcc	.+8      	; 0x539c <__ftoa_engine+0xd2>
    5394:	49 0f       	add	r20, r25
    5396:	56 1f       	adc	r21, r22
    5398:	c7 1f       	adc	r28, r23
    539a:	d8 1f       	adc	r29, r24
    539c:	99 0f       	add	r25, r25
    539e:	66 1f       	adc	r22, r22
    53a0:	77 1f       	adc	r23, r23
    53a2:	88 1f       	adc	r24, r24
    53a4:	06 94       	lsr	r0
    53a6:	a9 f7       	brne	.-22     	; 0x5392 <__ftoa_engine+0xc8>
    53a8:	84 91       	lpm	r24, Z+
    53aa:	10 95       	com	r17
    53ac:	17 70       	andi	r17, 0x07	; 7
    53ae:	41 f0       	breq	.+16     	; 0x53c0 <__ftoa_engine+0xf6>
    53b0:	d6 95       	lsr	r29
    53b2:	c7 95       	ror	r28
    53b4:	57 95       	ror	r21
    53b6:	47 95       	ror	r20
    53b8:	f7 94       	ror	r15
    53ba:	e7 94       	ror	r14
    53bc:	1a 95       	dec	r17
    53be:	c1 f7       	brne	.-16     	; 0x53b0 <__ftoa_engine+0xe6>
    53c0:	e4 e5       	ldi	r30, 0x54	; 84
    53c2:	f0 e0       	ldi	r31, 0x00	; 0
    53c4:	68 94       	set
    53c6:	15 90       	lpm	r1, Z+
    53c8:	15 91       	lpm	r17, Z+
    53ca:	35 91       	lpm	r19, Z+
    53cc:	65 91       	lpm	r22, Z+
    53ce:	95 91       	lpm	r25, Z+
    53d0:	05 90       	lpm	r0, Z+
    53d2:	7f e2       	ldi	r23, 0x2F	; 47
    53d4:	73 95       	inc	r23
    53d6:	e1 18       	sub	r14, r1
    53d8:	f1 0a       	sbc	r15, r17
    53da:	43 0b       	sbc	r20, r19
    53dc:	56 0b       	sbc	r21, r22
    53de:	c9 0b       	sbc	r28, r25
    53e0:	d0 09       	sbc	r29, r0
    53e2:	c0 f7       	brcc	.-16     	; 0x53d4 <__ftoa_engine+0x10a>
    53e4:	e1 0c       	add	r14, r1
    53e6:	f1 1e       	adc	r15, r17
    53e8:	43 1f       	adc	r20, r19
    53ea:	56 1f       	adc	r21, r22
    53ec:	c9 1f       	adc	r28, r25
    53ee:	d0 1d       	adc	r29, r0
    53f0:	7e f4       	brtc	.+30     	; 0x5410 <__ftoa_engine+0x146>
    53f2:	70 33       	cpi	r23, 0x30	; 48
    53f4:	11 f4       	brne	.+4      	; 0x53fa <__ftoa_engine+0x130>
    53f6:	8a 95       	dec	r24
    53f8:	e6 cf       	rjmp	.-52     	; 0x53c6 <__ftoa_engine+0xfc>
    53fa:	e8 94       	clt
    53fc:	01 50       	subi	r16, 0x01	; 1
    53fe:	30 f0       	brcs	.+12     	; 0x540c <__ftoa_engine+0x142>
    5400:	08 0f       	add	r16, r24
    5402:	0a f4       	brpl	.+2      	; 0x5406 <__ftoa_engine+0x13c>
    5404:	00 27       	eor	r16, r16
    5406:	02 17       	cp	r16, r18
    5408:	08 f4       	brcc	.+2      	; 0x540c <__ftoa_engine+0x142>
    540a:	20 2f       	mov	r18, r16
    540c:	23 95       	inc	r18
    540e:	02 2f       	mov	r16, r18
    5410:	7a 33       	cpi	r23, 0x3A	; 58
    5412:	28 f0       	brcs	.+10     	; 0x541e <__ftoa_engine+0x154>
    5414:	79 e3       	ldi	r23, 0x39	; 57
    5416:	7d 93       	st	X+, r23
    5418:	2a 95       	dec	r18
    541a:	e9 f7       	brne	.-6      	; 0x5416 <__ftoa_engine+0x14c>
    541c:	10 c0       	rjmp	.+32     	; 0x543e <__ftoa_engine+0x174>
    541e:	7d 93       	st	X+, r23
    5420:	2a 95       	dec	r18
    5422:	89 f6       	brne	.-94     	; 0x53c6 <__ftoa_engine+0xfc>
    5424:	06 94       	lsr	r0
    5426:	97 95       	ror	r25
    5428:	67 95       	ror	r22
    542a:	37 95       	ror	r19
    542c:	17 95       	ror	r17
    542e:	17 94       	ror	r1
    5430:	e1 18       	sub	r14, r1
    5432:	f1 0a       	sbc	r15, r17
    5434:	43 0b       	sbc	r20, r19
    5436:	56 0b       	sbc	r21, r22
    5438:	c9 0b       	sbc	r28, r25
    543a:	d0 09       	sbc	r29, r0
    543c:	98 f0       	brcs	.+38     	; 0x5464 <__ftoa_engine+0x19a>
    543e:	23 95       	inc	r18
    5440:	7e 91       	ld	r23, -X
    5442:	73 95       	inc	r23
    5444:	7a 33       	cpi	r23, 0x3A	; 58
    5446:	08 f0       	brcs	.+2      	; 0x544a <__ftoa_engine+0x180>
    5448:	70 e3       	ldi	r23, 0x30	; 48
    544a:	7c 93       	st	X, r23
    544c:	20 13       	cpse	r18, r16
    544e:	b8 f7       	brcc	.-18     	; 0x543e <__ftoa_engine+0x174>
    5450:	7e 91       	ld	r23, -X
    5452:	70 61       	ori	r23, 0x10	; 16
    5454:	7d 93       	st	X+, r23
    5456:	30 f0       	brcs	.+12     	; 0x5464 <__ftoa_engine+0x19a>
    5458:	83 95       	inc	r24
    545a:	71 e3       	ldi	r23, 0x31	; 49
    545c:	7d 93       	st	X+, r23
    545e:	70 e3       	ldi	r23, 0x30	; 48
    5460:	2a 95       	dec	r18
    5462:	e1 f7       	brne	.-8      	; 0x545c <__ftoa_engine+0x192>
    5464:	11 24       	eor	r1, r1
    5466:	ef 90       	pop	r14
    5468:	ff 90       	pop	r15
    546a:	0f 91       	pop	r16
    546c:	1f 91       	pop	r17
    546e:	cf 91       	pop	r28
    5470:	df 91       	pop	r29
    5472:	99 27       	eor	r25, r25
    5474:	87 fd       	sbrc	r24, 7
    5476:	90 95       	com	r25
    5478:	08 95       	ret

0000547a <strrev>:
    547a:	dc 01       	movw	r26, r24
    547c:	fc 01       	movw	r30, r24
    547e:	67 2f       	mov	r22, r23
    5480:	71 91       	ld	r23, Z+
    5482:	77 23       	and	r23, r23
    5484:	e1 f7       	brne	.-8      	; 0x547e <strrev+0x4>
    5486:	32 97       	sbiw	r30, 0x02	; 2
    5488:	04 c0       	rjmp	.+8      	; 0x5492 <strrev+0x18>
    548a:	7c 91       	ld	r23, X
    548c:	6d 93       	st	X+, r22
    548e:	70 83       	st	Z, r23
    5490:	62 91       	ld	r22, -Z
    5492:	ae 17       	cp	r26, r30
    5494:	bf 07       	cpc	r27, r31
    5496:	c8 f3       	brcs	.-14     	; 0x548a <strrev+0x10>
    5498:	08 95       	ret

0000549a <__prologue_saves__>:
    549a:	2f 92       	push	r2
    549c:	3f 92       	push	r3
    549e:	4f 92       	push	r4
    54a0:	5f 92       	push	r5
    54a2:	6f 92       	push	r6
    54a4:	7f 92       	push	r7
    54a6:	8f 92       	push	r8
    54a8:	9f 92       	push	r9
    54aa:	af 92       	push	r10
    54ac:	bf 92       	push	r11
    54ae:	cf 92       	push	r12
    54b0:	df 92       	push	r13
    54b2:	ef 92       	push	r14
    54b4:	ff 92       	push	r15
    54b6:	0f 93       	push	r16
    54b8:	1f 93       	push	r17
    54ba:	cf 93       	push	r28
    54bc:	df 93       	push	r29
    54be:	cd b7       	in	r28, 0x3d	; 61
    54c0:	de b7       	in	r29, 0x3e	; 62
    54c2:	ca 1b       	sub	r28, r26
    54c4:	db 0b       	sbc	r29, r27
    54c6:	0f b6       	in	r0, 0x3f	; 63
    54c8:	f8 94       	cli
    54ca:	de bf       	out	0x3e, r29	; 62
    54cc:	0f be       	out	0x3f, r0	; 63
    54ce:	cd bf       	out	0x3d, r28	; 61
    54d0:	09 94       	ijmp

000054d2 <__epilogue_restores__>:
    54d2:	2a 88       	ldd	r2, Y+18	; 0x12
    54d4:	39 88       	ldd	r3, Y+17	; 0x11
    54d6:	48 88       	ldd	r4, Y+16	; 0x10
    54d8:	5f 84       	ldd	r5, Y+15	; 0x0f
    54da:	6e 84       	ldd	r6, Y+14	; 0x0e
    54dc:	7d 84       	ldd	r7, Y+13	; 0x0d
    54de:	8c 84       	ldd	r8, Y+12	; 0x0c
    54e0:	9b 84       	ldd	r9, Y+11	; 0x0b
    54e2:	aa 84       	ldd	r10, Y+10	; 0x0a
    54e4:	b9 84       	ldd	r11, Y+9	; 0x09
    54e6:	c8 84       	ldd	r12, Y+8	; 0x08
    54e8:	df 80       	ldd	r13, Y+7	; 0x07
    54ea:	ee 80       	ldd	r14, Y+6	; 0x06
    54ec:	fd 80       	ldd	r15, Y+5	; 0x05
    54ee:	0c 81       	ldd	r16, Y+4	; 0x04
    54f0:	1b 81       	ldd	r17, Y+3	; 0x03
    54f2:	aa 81       	ldd	r26, Y+2	; 0x02
    54f4:	b9 81       	ldd	r27, Y+1	; 0x01
    54f6:	ce 0f       	add	r28, r30
    54f8:	d1 1d       	adc	r29, r1
    54fa:	0f b6       	in	r0, 0x3f	; 63
    54fc:	f8 94       	cli
    54fe:	de bf       	out	0x3e, r29	; 62
    5500:	0f be       	out	0x3f, r0	; 63
    5502:	cd bf       	out	0x3d, r28	; 61
    5504:	ed 01       	movw	r28, r26
    5506:	08 95       	ret

00005508 <_exit>:
    5508:	f8 94       	cli

0000550a <__stop_program>:
    550a:	ff cf       	rjmp	.-2      	; 0x550a <__stop_program>
